open Ppxlib
let process_int x = "process_int"
let process_attributes x : string= "attributes"
let process_row_field_desc x : string= "process_row_field_desc"
let   process_object_field_desc x = "process_object_field_desc"
let   process_pattern_desc x = "process_pattern_desc"
let process_expression_desc x = "process_expression_desc"
let   process_pattern  x = "process_pattern"
let process_var_name x : string= "var_name"
let process_location x : string= "location"
let process_loc x : string= "loc"
let process_core_type_desc x : string= "core_Type_desc"
let process_location_stack x = "process_location_stack"
let process_payload x : string= "loc"  
let process_attribute x : string= ""
let process_bool x : string= "bool"
let process_position x : string= "post"

let process_expression x : string= "x"
let process_extension x : string= "x"
let process_functor_parameter x : string= "x"
let process_include_declaration x : string= "x"
let process_list x : string = "x"
let process_longident_loc x : string = "x"
let process_longident x : string= "x"
let process_module_binding x : string= "x"
let process_module_expr x : string= "x"
let process_module_type_declaration x : string= "x"
let process_module_type x : string= "x"
let process_open_declaration x : string= "x"
let process_option x: string = "x"
let process_rec_flag x : string= "x"
let process_string x : string= "x"
let process_structure x : string= "x"
let process_toplevel_directive x : string= "x"
let process_type_declaration x : string= "x"
let process_type_exception x : string= "x"
let process_type_extension x : string= "x"
let process_value_description x : string= "x"
let process_binding_op x = "process_binding_op"
let process_core_type x = "process_core_type"
let process_type_kind x = "process_type_kind"
let  process_private_flag x = "process_private_flag"
let process_mutable_flag x = "process_mutable_flag"
let process_constructor_arguments x = "process_constructor_arguments"
let process_extension_constructor_kind x = "process_extension_constructor_kind"
let    process_extension_constructor x  = "process_extension_constructor"
let process_class_type_desc x = "process_class_type_desc"
let  process_class_type_field_desc x = "process_class_type_field_desc"
let process_virtual_flag x = "process_virtual_flag"
let process_class_expr_desc x = "process_class_expr_desc"
let   process_class_field_desc x = "process_class_field_desc"
let process_module_type_desc x = "process_module_type_desc"
let process_signature_item_desc x = "process_signature_item_desc"
let   process_override_flag x = "process_override_flag"
let process_module_expr_desc x = "process_module_expr_desc"
let process_structure_item_desc x = "process_structure_item_desc"
let process_directive_argument_desc x = "process_directive_argument_desc"


let process_type_decl_position (x:position):string = match x with {pos_fname(* string*);pos_lnum(* int*);pos_bol(* int*);pos_cnum(* int*)} ->(process_string pos_fname)^(process_int pos_lnum)^(process_int pos_bol)^(process_int pos_cnum) 
 let process_type_decl_location (x:location):string = match x with {loc_start(* position*);loc_end(* position*);loc_ghost(* bool*)} ->(process_position loc_start)^(process_position loc_end)^(process_bool loc_ghost) 
 let process_type_decl_loc (x):string = match x with {txt(* var_name*);loc(* location*)} ->(process_var_name txt)^(process_location loc) 
 let process_type_decl_attribute (x:attribute):string = match x with {attr_name(* loc*);attr_payload(* payload*);attr_loc(* location*)} ->(process_loc attr_name)^(process_payload attr_payload)^(process_location attr_loc) 
 let process_type_decl_core_type (x:core_type):string = match x with {ptyp_desc(* core_type_desc*);ptyp_loc(* location*);ptyp_loc_stack(* location_stack*);ptyp_attributes(* attributes*)} ->(process_core_type_desc ptyp_desc)^(process_location ptyp_loc)^(process_location_stack ptyp_loc_stack)^(process_attributes ptyp_attributes) 
 let process_type_decl_row_field (x:row_field):string = match x with {prf_desc(* row_field_desc*);prf_loc(* location*);prf_attributes(* attributes*)} ->(process_row_field_desc prf_desc)^(process_location prf_loc)^(process_attributes prf_attributes) 
 let process_type_decl_object_field (x:object_field):string = match x with {pof_desc(* object_field_desc*);pof_loc(* location*);pof_attributes(* attributes*)} ->(process_object_field_desc pof_desc)^(process_location pof_loc)^(process_attributes pof_attributes) 
 let process_type_decl_pattern (x:pattern):string = match x with {ppat_desc(* pattern_desc*);ppat_loc(* location*);ppat_loc_stack(* location_stack*);ppat_attributes(* attributes*)} ->(process_pattern_desc ppat_desc)^(process_location ppat_loc)^(process_location_stack ppat_loc_stack)^(process_attributes ppat_attributes) 
 let process_type_decl_expression (x:expression):string = match x with {pexp_desc(* expression_desc*);pexp_loc(* location*);pexp_loc_stack(* location_stack*);pexp_attributes(* attributes*)} ->(process_expression_desc pexp_desc)^(process_location pexp_loc)^(process_location_stack pexp_loc_stack)^(process_attributes pexp_attributes) 
 let process_type_decl_case (x:case):string = match x with {pc_lhs(* pattern*);pc_guard(* option*);pc_rhs(* expression*)} ->(process_pattern pc_lhs)^(process_option pc_guard)^(process_expression pc_rhs) 
 let process_type_decl_letop (x:letop):string = match x with {let_(* binding_op*);ands(* list*);body(* expression*)} ->(process_binding_op let_)^(process_list ands)^(process_expression body) 
 let process_type_decl_binding_op (x:binding_op):string = match x with {pbop_op(* loc*);pbop_pat(* pattern*);pbop_exp(* expression*);pbop_loc(* location*)} ->(process_loc pbop_op)^(process_pattern pbop_pat)^(process_expression pbop_exp)^(process_location pbop_loc) 
 let process_type_decl_value_description (x:value_description):string = match x with {pval_name(* loc*);pval_type(* core_type*);pval_prim(* list*);pval_attributes(* attributes*);pval_loc(* location*)} ->(process_loc pval_name)^(process_core_type pval_type)^(process_list pval_prim)^(process_attributes pval_attributes)^(process_location pval_loc) 
 let process_type_decl_type_declaration (x:type_declaration):string = match x with {ptype_name(* loc*);ptype_params(* list*);ptype_cstrs(* list*);ptype_kind(* type_kind*);ptype_private(* private_flag*);ptype_manifest(* option*);ptype_attributes(* attributes*);ptype_loc(* location*)} ->(process_loc ptype_name)^(process_list ptype_params)^(process_list ptype_cstrs)^(process_type_kind ptype_kind)^(process_private_flag ptype_private)^(process_option ptype_manifest)^(process_attributes ptype_attributes)^(process_location ptype_loc) 
 let process_type_decl_label_declaration (x:label_declaration):string = match x with {pld_name(* loc*);pld_mutable(* mutable_flag*);pld_type(* core_type*);pld_loc(* location*);pld_attributes(* attributes*)} ->(process_loc pld_name)^(process_mutable_flag pld_mutable)^(process_core_type pld_type)^(process_location pld_loc)^(process_attributes pld_attributes) 
 let process_type_decl_constructor_declaration (x:constructor_declaration):string = match x with {pcd_name(* loc*);pcd_vars(* list*);pcd_args(* constructor_arguments*);pcd_res(* option*);pcd_loc(* location*);pcd_attributes(* attributes*)} ->(process_loc pcd_name)^(process_list pcd_vars)^(process_constructor_arguments pcd_args)^(process_option pcd_res)^(process_location pcd_loc)^(process_attributes pcd_attributes) 
 let process_type_decl_type_extension (x:type_extension):string = match x with {ptyext_path(* longident_loc*);ptyext_params(* list*);ptyext_constructors(* list*);ptyext_private(* private_flag*);ptyext_loc(* location*);ptyext_attributes(* attributes*)} ->(process_longident_loc ptyext_path)^(process_list ptyext_params)^(process_list ptyext_constructors)^(process_private_flag ptyext_private)^(process_location ptyext_loc)^(process_attributes ptyext_attributes) 
 let process_type_decl_extension_constructor (x:extension_constructor):string = match x with {pext_name(* loc*);pext_kind(* extension_constructor_kind*);pext_loc(* location*);pext_attributes(* attributes*)} ->(process_loc pext_name)^(process_extension_constructor_kind pext_kind)^(process_location pext_loc)^(process_attributes pext_attributes) 
 let process_type_decl_type_exception (x:type_exception):string = match x with {ptyexn_constructor(* extension_constructor*);ptyexn_loc(* location*);ptyexn_attributes(* attributes*)} ->(process_extension_constructor ptyexn_constructor)^(process_location ptyexn_loc)^(process_attributes ptyexn_attributes) 
 let process_type_decl_class_type (x:class_type):string = match x with {pcty_desc(* class_type_desc*);pcty_loc(* location*);pcty_attributes(* attributes*)} ->(process_class_type_desc pcty_desc)^(process_location pcty_loc)^(process_attributes pcty_attributes) 
 let process_type_decl_class_signature (x:class_signature):string = match x with {pcsig_self(* core_type*);pcsig_fields(* list*)} ->(process_core_type pcsig_self)^(process_list pcsig_fields) 
 let process_type_decl_class_type_field (x:class_type_field):string = match x with {pctf_desc(* class_type_field_desc*);pctf_loc(* location*);pctf_attributes(* attributes*)} ->(process_class_type_field_desc pctf_desc)^(process_location pctf_loc)^(process_attributes pctf_attributes) 
 let process_type_decl_class_infos (x):string = match x with {pci_virt(* virtual_flag*);pci_params(* list*);pci_name(* loc*);pci_expr(* var_name*);pci_loc(* location*);pci_attributes(* attributes*)} ->(process_virtual_flag pci_virt)^(process_list pci_params)^(process_loc pci_name)^(process_var_name pci_expr)^(process_location pci_loc)^(process_attributes pci_attributes) 
 let process_type_decl_class_expr (x:class_expr):string = match x with {pcl_desc(* class_expr_desc*);pcl_loc(* location*);pcl_attributes(* attributes*)} ->(process_class_expr_desc pcl_desc)^(process_location pcl_loc)^(process_attributes pcl_attributes) 
 let process_type_decl_class_structure (x:class_structure):string = match x with {pcstr_self(* pattern*);pcstr_fields(* list*)} ->(process_pattern pcstr_self)^(process_list pcstr_fields) 
 let process_type_decl_class_field (x:class_field):string = match x with {pcf_desc(* class_field_desc*);pcf_loc(* location*);pcf_attributes(* attributes*)} ->(process_class_field_desc pcf_desc)^(process_location pcf_loc)^(process_attributes pcf_attributes) 
 let process_type_decl_module_type (x:module_type):string = match x with {pmty_desc(* module_type_desc*);pmty_loc(* location*);pmty_attributes(* attributes*)} ->(process_module_type_desc pmty_desc)^(process_location pmty_loc)^(process_attributes pmty_attributes) 
 let process_type_decl_signature_item (x:signature_item):string = match x with {psig_desc(* signature_item_desc*);psig_loc(* location*)} ->(process_signature_item_desc psig_desc)^(process_location psig_loc) 
 let process_type_decl_module_declaration (x:module_declaration):string = match x with {pmd_name(* loc*);pmd_type(* module_type*);pmd_attributes(* attributes*);pmd_loc(* location*)} ->(process_loc pmd_name)^(process_module_type pmd_type)^(process_attributes pmd_attributes)^(process_location pmd_loc) 
 let process_type_decl_module_substitution (x:module_substitution):string = match x with {pms_name(* loc*);pms_manifest(* longident_loc*);pms_attributes(* attributes*);pms_loc(* location*)} ->(process_loc pms_name)^(process_longident_loc pms_manifest)^(process_attributes pms_attributes)^(process_location pms_loc) 
 let process_type_decl_module_type_declaration (x:module_type_declaration):string = match x with {pmtd_name(* loc*);pmtd_type(* option*);pmtd_attributes(* attributes*);pmtd_loc(* location*)} ->(process_loc pmtd_name)^(process_option pmtd_type)^(process_attributes pmtd_attributes)^(process_location pmtd_loc) 
 let process_type_decl_open_infos (x):string = match x with {popen_expr(* var_name*);popen_override(* override_flag*);popen_loc(* location*);popen_attributes(* attributes*)} ->(process_var_name popen_expr)^(process_override_flag popen_override)^(process_location popen_loc)^(process_attributes popen_attributes) 
 let process_type_decl_include_infos (x):string = match x with {pincl_mod(* var_name*);pincl_loc(* location*);pincl_attributes(* attributes*)} ->(process_var_name pincl_mod)^(process_location pincl_loc)^(process_attributes pincl_attributes) 
 let process_type_decl_module_expr (x:module_expr):string = match x with {pmod_desc(* module_expr_desc*);pmod_loc(* location*);pmod_attributes(* attributes*)} ->(process_module_expr_desc pmod_desc)^(process_location pmod_loc)^(process_attributes pmod_attributes) 
 let process_type_decl_structure_item (x:structure_item):string = match x with {pstr_desc(* structure_item_desc*);pstr_loc(* location*)} ->(process_structure_item_desc pstr_desc)^(process_location pstr_loc) 
 let process_type_decl_value_binding (x:value_binding):string = match x with {pvb_pat(* pattern*);pvb_expr(* expression*);pvb_attributes(* attributes*);pvb_loc(* location*)} ->(process_pattern pvb_pat)^(process_expression pvb_expr)^(process_attributes pvb_attributes)^(process_location pvb_loc) 
 let process_type_decl_module_binding (x:module_binding):string = match x with {pmb_name(* loc*);pmb_expr(* module_expr*);pmb_attributes(* attributes*);pmb_loc(* location*)} ->(process_loc pmb_name)^(process_module_expr pmb_expr)^(process_attributes pmb_attributes)^(process_location pmb_loc) 
 let process_type_decl_toplevel_directive (x:toplevel_directive):string = match x with {pdir_name(* loc*);pdir_arg(* option*);pdir_loc(* location*)} ->(process_loc pdir_name)^(process_option pdir_arg)^(process_location pdir_loc) 
 let process_type_decl_directive_argument (x:directive_argument):string = match x with {pdira_desc(* directive_argument_desc*);pdira_loc(* location*)} ->(process_directive_argument_desc pdira_desc)^(process_location pdira_loc) 
