DBG12AA:open Ppxlib
DBG221EC: let process_directive_argument_desc__Pdir_bool x :string =match x with 
DBG22A:let process_bool x : bool= x
DBG22A:let process_bool x : bool= x
DBG22EB:let (*P1*)process_types_directive_argument_desc__Pdir_bool((abool):(bool)):string = (process_generic_type_d "directive_argument_desc" "Pdir_bool") ((*P5*)process_generic_type_bool abool))
DBG222EC:emit_constructor_arguments:directive_argument_desc;Pdir_bool:(*emit_constructor_arguments:*)| Pdir_bool((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)bool0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_bool" [((*P4*)process_bool (*emit_core_type_numbered*)bool0)])
DBG22E:constructor_declaration_new: constructor:"Pdir_bool"{(*emit_constructor_arguments:*)| Pdir_bool((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)bool0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_bool" [((*P4*)process_bool (*emit_core_type_numbered*)bool0)])}
DBG221EC: let process_directive_argument_desc__Pdir_ident x :string =match x with 
DBG22A:let process_longident x : longident= x
DBG22A:let process_longident x : longident= x
DBG22EB:let (*P1*)process_types_directive_argument_desc__Pdir_ident((alongident):(longident)):string = (process_generic_type_d "directive_argument_desc" "Pdir_ident") ((*P5*)process_generic_type_longident alongident))
DBG222EC:emit_constructor_arguments:directive_argument_desc;Pdir_ident:(*emit_constructor_arguments:*)| Pdir_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_ident" [((*P4*)process_longident (*emit_core_type_numbered*)longident0)])
DBG22E:constructor_declaration_new: constructor:"Pdir_ident"{(*emit_constructor_arguments:*)| Pdir_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_ident" [((*P4*)process_longident (*emit_core_type_numbered*)longident0)])}
DBG221EC: let process_directive_argument_desc__Pdir_int x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_option x : option= x
DBG22A:let process_string x : string= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_directive_argument_desc__Pdir_int((astring,aoption):(string*option)):string = (process_generic_type_d "directive_argument_desc" "Pdir_int") ((*P5*)process_generic_type_string astring)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:directive_argument_desc;Pdir_int:(*emit_constructor_arguments:*)| Pdir_int((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_int" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Pdir_int"{(*emit_constructor_arguments:*)| Pdir_int((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_int" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_directive_argument_desc__Pdir_string x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_string x : string= x
DBG22EB:let (*P1*)process_types_directive_argument_desc__Pdir_string((astring):(string)):string = (process_generic_type_d "directive_argument_desc" "Pdir_string") ((*P5*)process_generic_type_string astring))
DBG222EC:emit_constructor_arguments:directive_argument_desc;Pdir_string:(*emit_constructor_arguments:*)| Pdir_string((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_string" [((*P4*)process_string (*emit_core_type_numbered*)string0)])
DBG22E:constructor_declaration_new: constructor:"Pdir_string"{(*emit_constructor_arguments:*)| Pdir_string((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_string" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DBG221EC: let process_toplevel_phrase__Ptop_dir x :string =match x with 
DBG22A:let process_toplevel_directive x : toplevel_directive= x
DBG22A:let process_toplevel_directive x : toplevel_directive= x
DBG22EB:let (*P1*)process_types_toplevel_phrase__Ptop_dir((atoplevel_directive):(toplevel_directive)):string = (process_generic_type_d "toplevel_phrase" "Ptop_dir") ((*P5*)process_generic_type_toplevel_directive atoplevel_directive))
DBG222EC:emit_constructor_arguments:toplevel_phrase;Ptop_dir:(*emit_constructor_arguments:*)| Ptop_dir((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)toplevel_directive0) -> ((*P5*)process_generic_type "toplevel_phrase" "Ptop_dir" [((*P4*)process_toplevel_directive (*emit_core_type_numbered*)toplevel_directive0)])
DBG22E:constructor_declaration_new: constructor:"Ptop_dir"{(*emit_constructor_arguments:*)| Ptop_dir((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)toplevel_directive0) -> ((*P5*)process_generic_type "toplevel_phrase" "Ptop_dir" [((*P4*)process_toplevel_directive (*emit_core_type_numbered*)toplevel_directive0)])}
DBG221EC: let process_toplevel_phrase__Ptop_def x :string =match x with 
DBG22A:let process_structure x : structure= x
DBG22A:let process_structure x : structure= x
DBG22EB:let (*P1*)process_types_toplevel_phrase__Ptop_def((astructure):(structure)):string = (process_generic_type_d "toplevel_phrase" "Ptop_def") ((*P5*)process_generic_type_structure astructure))
DBG222EC:emit_constructor_arguments:toplevel_phrase;Ptop_def:(*emit_constructor_arguments:*)| Ptop_def((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "toplevel_phrase" "Ptop_def" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])
DBG22E:constructor_declaration_new: constructor:"Ptop_def"{(*emit_constructor_arguments:*)| Ptop_def((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "toplevel_phrase" "Ptop_def" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])}
DBG221EC: let process_structure_item_desc__Pstr_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_attributes x : attributes= x
DBG22A:let process_extension x : extension= x
DBG22A:let process_attributes x : attributes= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_extension((aextension,aattributes):(extension*attributes)):string = (process_generic_type_d "structure_item_desc" "Pstr_extension") ((*P5*)process_generic_type_extension aextension)((*P5*)process_generic_type_attributes aattributes))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_extension:(*emit_constructor_arguments:*)| Pstr_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])
DBG22E:constructor_declaration_new: constructor:"Pstr_extension"{(*emit_constructor_arguments:*)| Pstr_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])}
DBG221EC: let process_structure_item_desc__Pstr_attribute x :string =match x with 
DBG22A:let process_attribute x : attribute= x
DBG22A:let process_attribute x : attribute= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_attribute((aattribute):(attribute)):string = (process_generic_type_d "structure_item_desc" "Pstr_attribute") ((*P5*)process_generic_type_attribute aattribute))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_attribute:(*emit_constructor_arguments:*)| Pstr_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_attribute"{(*emit_constructor_arguments:*)| Pstr_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])}
DBG221EC: let process_structure_item_desc__Pstr_include x :string =match x with 
DBG22A:let process_include_declaration x : include_declaration= x
DBG22A:let process_include_declaration x : include_declaration= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_include((ainclude_declaration):(include_declaration)):string = (process_generic_type_d "structure_item_desc" "Pstr_include") ((*P5*)process_generic_type_include_declaration ainclude_declaration))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_include:(*emit_constructor_arguments:*)| Pstr_include((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)include_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_include" [((*P4*)process_include_declaration (*emit_core_type_numbered*)include_declaration0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_include"{(*emit_constructor_arguments:*)| Pstr_include((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)include_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_include" [((*P4*)process_include_declaration (*emit_core_type_numbered*)include_declaration0)])}
DBG221EC: let process_structure_item_desc__Pstr_class_type x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_class_type((alist):(list)):string = (process_generic_type_d "structure_item_desc" "Pstr_class_type") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_class_type:(*emit_constructor_arguments:*)| Pstr_class_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_class_type" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_class_type"{(*emit_constructor_arguments:*)| Pstr_class_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_class_type" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_structure_item_desc__Pstr_class x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_class((alist):(list)):string = (process_generic_type_d "structure_item_desc" "Pstr_class") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_class:(*emit_constructor_arguments:*)| Pstr_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_class" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_class"{(*emit_constructor_arguments:*)| Pstr_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_class" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_structure_item_desc__Pstr_open x :string =match x with 
DBG22A:let process_open_declaration x : open_declaration= x
DBG22A:let process_open_declaration x : open_declaration= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_open((aopen_declaration):(open_declaration)):string = (process_generic_type_d "structure_item_desc" "Pstr_open") ((*P5*)process_generic_type_open_declaration aopen_declaration))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_open:(*emit_constructor_arguments:*)| Pstr_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_open" [((*P4*)process_open_declaration (*emit_core_type_numbered*)open_declaration0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_open"{(*emit_constructor_arguments:*)| Pstr_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_open" [((*P4*)process_open_declaration (*emit_core_type_numbered*)open_declaration0)])}
DBG221EC: let process_structure_item_desc__Pstr_modtype x :string =match x with 
DBG22A:let process_module_type_declaration x : module_type_declaration= x
DBG22A:let process_module_type_declaration x : module_type_declaration= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_modtype((amodule_type_declaration):(module_type_declaration)):string = (process_generic_type_d "structure_item_desc" "Pstr_modtype") ((*P5*)process_generic_type_module_type_declaration amodule_type_declaration))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_modtype:(*emit_constructor_arguments:*)| Pstr_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_modtype" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_modtype"{(*emit_constructor_arguments:*)| Pstr_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_modtype" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])}
DBG221EC: let process_structure_item_desc__Pstr_recmodule x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_recmodule((alist):(list)):string = (process_generic_type_d "structure_item_desc" "Pstr_recmodule") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_recmodule:(*emit_constructor_arguments:*)| Pstr_recmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_recmodule" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_recmodule"{(*emit_constructor_arguments:*)| Pstr_recmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_recmodule" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_structure_item_desc__Pstr_module x :string =match x with 
DBG22A:let process_module_binding x : module_binding= x
DBG22A:let process_module_binding x : module_binding= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_module((amodule_binding):(module_binding)):string = (process_generic_type_d "structure_item_desc" "Pstr_module") ((*P5*)process_generic_type_module_binding amodule_binding))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_module:(*emit_constructor_arguments:*)| Pstr_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_binding0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_module" [((*P4*)process_module_binding (*emit_core_type_numbered*)module_binding0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_module"{(*emit_constructor_arguments:*)| Pstr_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_binding0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_module" [((*P4*)process_module_binding (*emit_core_type_numbered*)module_binding0)])}
DBG221EC: let process_structure_item_desc__Pstr_exception x :string =match x with 
DBG22A:let process_type_exception x : type_exception= x
DBG22A:let process_type_exception x : type_exception= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_exception((atype_exception):(type_exception)):string = (process_generic_type_d "structure_item_desc" "Pstr_exception") ((*P5*)process_generic_type_type_exception atype_exception))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_exception:(*emit_constructor_arguments:*)| Pstr_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_exception0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_exception" [((*P4*)process_type_exception (*emit_core_type_numbered*)type_exception0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_exception"{(*emit_constructor_arguments:*)| Pstr_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_exception0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_exception" [((*P4*)process_type_exception (*emit_core_type_numbered*)type_exception0)])}
DBG221EC: let process_structure_item_desc__Pstr_typext x :string =match x with 
DBG22A:let process_type_extension x : type_extension= x
DBG22A:let process_type_extension x : type_extension= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_typext((atype_extension):(type_extension)):string = (process_generic_type_d "structure_item_desc" "Pstr_typext") ((*P5*)process_generic_type_type_extension atype_extension))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_typext:(*emit_constructor_arguments:*)| Pstr_typext((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_extension0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_typext" [((*P4*)process_type_extension (*emit_core_type_numbered*)type_extension0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_typext"{(*emit_constructor_arguments:*)| Pstr_typext((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_extension0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_typext" [((*P4*)process_type_extension (*emit_core_type_numbered*)type_extension0)])}
DBG221EC: let process_structure_item_desc__Pstr_type x :string =match x with 
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_type((arec_flag,alist):(rec_flag*list)):string = (process_generic_type_d "structure_item_desc" "Pstr_type") ((*P5*)process_generic_type_rec_flag arec_flag)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_type:(*emit_constructor_arguments:*)| Pstr_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_type" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Pstr_type"{(*emit_constructor_arguments:*)| Pstr_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_type" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_structure_item_desc__Pstr_primitive x :string =match x with 
DBG22A:let process_value_description x : value_description= x
DBG22A:let process_value_description x : value_description= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_primitive((avalue_description):(value_description)):string = (process_generic_type_d "structure_item_desc" "Pstr_primitive") ((*P5*)process_generic_type_value_description avalue_description))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_primitive:(*emit_constructor_arguments:*)| Pstr_primitive((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)value_description0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_primitive" [((*P4*)process_value_description (*emit_core_type_numbered*)value_description0)])
DBG22E:constructor_declaration_new: constructor:"Pstr_primitive"{(*emit_constructor_arguments:*)| Pstr_primitive((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)value_description0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_primitive" [((*P4*)process_value_description (*emit_core_type_numbered*)value_description0)])}
DBG221EC: let process_structure_item_desc__Pstr_value x :string =match x with 
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_value((arec_flag,alist):(rec_flag*list)):string = (process_generic_type_d "structure_item_desc" "Pstr_value") ((*P5*)process_generic_type_rec_flag arec_flag)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_value:(*emit_constructor_arguments:*)| Pstr_value((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_value" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Pstr_value"{(*emit_constructor_arguments:*)| Pstr_value((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_value" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_structure_item_desc__Pstr_eval x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_attributes x : attributes= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_attributes x : attributes= x
DBG22EB:let (*P1*)process_types_structure_item_desc__Pstr_eval((aexpression,aattributes):(expression*attributes)):string = (process_generic_type_d "structure_item_desc" "Pstr_eval") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_attributes aattributes))
DBG222EC:emit_constructor_arguments:structure_item_desc;Pstr_eval:(*emit_constructor_arguments:*)| Pstr_eval((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_eval" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])
DBG22E:constructor_declaration_new: constructor:"Pstr_eval"{(*emit_constructor_arguments:*)| Pstr_eval((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_eval" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])}
DBG221EC: let process_module_expr_desc__Pmod_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_module_expr_desc__Pmod_extension((aextension):(extension)):string = (process_generic_type_d "module_expr_desc" "Pmod_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:module_expr_desc;Pmod_extension:(*emit_constructor_arguments:*)| Pmod_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Pmod_extension"{(*emit_constructor_arguments:*)| Pmod_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_module_expr_desc__Pmod_unpack x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_module_expr_desc__Pmod_unpack((aexpression):(expression)):string = (process_generic_type_d "module_expr_desc" "Pmod_unpack") ((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:module_expr_desc;Pmod_unpack:(*emit_constructor_arguments:*)| Pmod_unpack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_unpack" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])
DBG22E:constructor_declaration_new: constructor:"Pmod_unpack"{(*emit_constructor_arguments:*)| Pmod_unpack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_unpack" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])}
DBG221EC: let process_module_expr_desc__Pmod_constraint x :string =match x with 
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_module_type x : module_type= x
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_module_type x : module_type= x
DBG22EB:let (*P1*)process_types_module_expr_desc__Pmod_constraint((amodule_expr,amodule_type):(module_expr*module_type)):string = (process_generic_type_d "module_expr_desc" "Pmod_constraint") ((*P5*)process_generic_type_module_expr amodule_expr)((*P5*)process_generic_type_module_type amodule_type))
DBG222EC:emit_constructor_arguments:module_expr_desc;Pmod_constraint:(*emit_constructor_arguments:*)| Pmod_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_constraint" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])
DBG22E:constructor_declaration_new: constructor:"Pmod_constraint"{(*emit_constructor_arguments:*)| Pmod_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_constraint" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DBG221EC: let process_module_expr_desc__Pmod_apply x :string =match x with 
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_module_expr x : module_expr= x
DBG22EB:let (*P1*)process_types_module_expr_desc__Pmod_apply((amodule_expr,amodule_expr):(module_expr*module_expr)):string = (process_generic_type_d "module_expr_desc" "Pmod_apply") ((*P5*)process_generic_type_module_expr amodule_expr)((*P5*)process_generic_type_module_expr amodule_expr))
DBG222EC:emit_constructor_arguments:module_expr_desc;Pmod_apply:(*emit_constructor_arguments:*)| Pmod_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_apply" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1)])
DBG22E:constructor_declaration_new: constructor:"Pmod_apply"{(*emit_constructor_arguments:*)| Pmod_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_apply" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1)])}
DBG221EC: let process_module_expr_desc__Pmod_functor x :string =match x with 
DBG22A:let process_functor_parameter x : functor_parameter= x
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_functor_parameter x : functor_parameter= x
DBG22A:let process_module_expr x : module_expr= x
DBG22EB:let (*P1*)process_types_module_expr_desc__Pmod_functor((afunctor_parameter,amodule_expr):(functor_parameter*module_expr)):string = (process_generic_type_d "module_expr_desc" "Pmod_functor") ((*P5*)process_generic_type_functor_parameter afunctor_parameter)((*P5*)process_generic_type_module_expr amodule_expr))
DBG222EC:emit_constructor_arguments:module_expr_desc;Pmod_functor:(*emit_constructor_arguments:*)| Pmod_functor((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)functor_parameter0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_functor" [((*P4*)process_functor_parameter (*emit_core_type_numbered*)functor_parameter0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1)])
DBG22E:constructor_declaration_new: constructor:"Pmod_functor"{(*emit_constructor_arguments:*)| Pmod_functor((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)functor_parameter0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_functor" [((*P4*)process_functor_parameter (*emit_core_type_numbered*)functor_parameter0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1)])}
DBG221EC: let process_module_expr_desc__Pmod_structure x :string =match x with 
DBG22A:let process_structure x : structure= x
DBG22A:let process_structure x : structure= x
DBG22EB:let (*P1*)process_types_module_expr_desc__Pmod_structure((astructure):(structure)):string = (process_generic_type_d "module_expr_desc" "Pmod_structure") ((*P5*)process_generic_type_structure astructure))
DBG222EC:emit_constructor_arguments:module_expr_desc;Pmod_structure:(*emit_constructor_arguments:*)| Pmod_structure((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_structure" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])
DBG22E:constructor_declaration_new: constructor:"Pmod_structure"{(*emit_constructor_arguments:*)| Pmod_structure((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_structure" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])}
DBG221EC: let process_module_expr_desc__Pmod_ident x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_module_expr_desc__Pmod_ident((alongident_loc):(longident_loc)):string = (process_generic_type_d "module_expr_desc" "Pmod_ident") ((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:module_expr_desc;Pmod_ident:(*emit_constructor_arguments:*)| Pmod_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])
DBG22E:constructor_declaration_new: constructor:"Pmod_ident"{(*emit_constructor_arguments:*)| Pmod_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DBG221EC: let process_with_constraint__Pwith_modsubst x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_with_constraint__Pwith_modsubst((alongident_loc,alongident_loc):(longident_loc*longident_loc)):string = (process_generic_type_d "with_constraint" "Pwith_modsubst") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:with_constraint;Pwith_modsubst:(*emit_constructor_arguments:*)| Pwith_modsubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modsubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])
DBG22E:constructor_declaration_new: constructor:"Pwith_modsubst"{(*emit_constructor_arguments:*)| Pwith_modsubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modsubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])}
DBG221EC: let process_with_constraint__Pwith_typesubst x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_type_declaration x : type_declaration= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_type_declaration x : type_declaration= x
DBG22EB:let (*P1*)process_types_with_constraint__Pwith_typesubst((alongident_loc,atype_declaration):(longident_loc*type_declaration)):string = (process_generic_type_d "with_constraint" "Pwith_typesubst") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_type_declaration atype_declaration))
DBG222EC:emit_constructor_arguments:with_constraint;Pwith_typesubst:(*emit_constructor_arguments:*)| Pwith_typesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_declaration1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_typesubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_type_declaration (*emit_core_type_numbered*)type_declaration1)])
DBG22E:constructor_declaration_new: constructor:"Pwith_typesubst"{(*emit_constructor_arguments:*)| Pwith_typesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_declaration1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_typesubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_type_declaration (*emit_core_type_numbered*)type_declaration1)])}
DBG221EC: let process_with_constraint__Pwith_modtypesubst x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_module_type x : module_type= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_module_type x : module_type= x
DBG22EB:let (*P1*)process_types_with_constraint__Pwith_modtypesubst((alongident_loc,amodule_type):(longident_loc*module_type)):string = (process_generic_type_d "with_constraint" "Pwith_modtypesubst") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_module_type amodule_type))
DBG222EC:emit_constructor_arguments:with_constraint;Pwith_modtypesubst:(*emit_constructor_arguments:*)| Pwith_modtypesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modtypesubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])
DBG22E:constructor_declaration_new: constructor:"Pwith_modtypesubst"{(*emit_constructor_arguments:*)| Pwith_modtypesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modtypesubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DBG221EC: let process_with_constraint__Pwith_modtype x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_module_type x : module_type= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_module_type x : module_type= x
DBG22EB:let (*P1*)process_types_with_constraint__Pwith_modtype((alongident_loc,amodule_type):(longident_loc*module_type)):string = (process_generic_type_d "with_constraint" "Pwith_modtype") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_module_type amodule_type))
DBG222EC:emit_constructor_arguments:with_constraint;Pwith_modtype:(*emit_constructor_arguments:*)| Pwith_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modtype" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])
DBG22E:constructor_declaration_new: constructor:"Pwith_modtype"{(*emit_constructor_arguments:*)| Pwith_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modtype" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DBG221EC: let process_with_constraint__Pwith_module x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_with_constraint__Pwith_module((alongident_loc,alongident_loc):(longident_loc*longident_loc)):string = (process_generic_type_d "with_constraint" "Pwith_module") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:with_constraint;Pwith_module:(*emit_constructor_arguments:*)| Pwith_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_module" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])
DBG22E:constructor_declaration_new: constructor:"Pwith_module"{(*emit_constructor_arguments:*)| Pwith_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_module" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])}
DBG221EC: let process_with_constraint__Pwith_type x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_type_declaration x : type_declaration= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_type_declaration x : type_declaration= x
DBG22EB:let (*P1*)process_types_with_constraint__Pwith_type((alongident_loc,atype_declaration):(longident_loc*type_declaration)):string = (process_generic_type_d "with_constraint" "Pwith_type") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_type_declaration atype_declaration))
DBG222EC:emit_constructor_arguments:with_constraint;Pwith_type:(*emit_constructor_arguments:*)| Pwith_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_declaration1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_type" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_type_declaration (*emit_core_type_numbered*)type_declaration1)])
DBG22E:constructor_declaration_new: constructor:"Pwith_type"{(*emit_constructor_arguments:*)| Pwith_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_declaration1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_type" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_type_declaration (*emit_core_type_numbered*)type_declaration1)])}
DBG221EC: let process_signature_item_desc__Psig_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_attributes x : attributes= x
DBG22A:let process_extension x : extension= x
DBG22A:let process_attributes x : attributes= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_extension((aextension,aattributes):(extension*attributes)):string = (process_generic_type_d "signature_item_desc" "Psig_extension") ((*P5*)process_generic_type_extension aextension)((*P5*)process_generic_type_attributes aattributes))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_extension:(*emit_constructor_arguments:*)| Psig_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])
DBG22E:constructor_declaration_new: constructor:"Psig_extension"{(*emit_constructor_arguments:*)| Psig_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])}
DBG221EC: let process_signature_item_desc__Psig_attribute x :string =match x with 
DBG22A:let process_attribute x : attribute= x
DBG22A:let process_attribute x : attribute= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_attribute((aattribute):(attribute)):string = (process_generic_type_d "signature_item_desc" "Psig_attribute") ((*P5*)process_generic_type_attribute aattribute))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_attribute:(*emit_constructor_arguments:*)| Psig_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])
DBG22E:constructor_declaration_new: constructor:"Psig_attribute"{(*emit_constructor_arguments:*)| Psig_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])}
DBG221EC: let process_signature_item_desc__Psig_class_type x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_class_type((alist):(list)):string = (process_generic_type_d "signature_item_desc" "Psig_class_type") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_class_type:(*emit_constructor_arguments:*)| Psig_class_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_class_type" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Psig_class_type"{(*emit_constructor_arguments:*)| Psig_class_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_class_type" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_signature_item_desc__Psig_class x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_class((alist):(list)):string = (process_generic_type_d "signature_item_desc" "Psig_class") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_class:(*emit_constructor_arguments:*)| Psig_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_class" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Psig_class"{(*emit_constructor_arguments:*)| Psig_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_class" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_signature_item_desc__Psig_include x :string =match x with 
DBG22A:let process_include_description x : include_description= x
DBG22A:let process_include_description x : include_description= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_include((ainclude_description):(include_description)):string = (process_generic_type_d "signature_item_desc" "Psig_include") ((*P5*)process_generic_type_include_description ainclude_description))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_include:(*emit_constructor_arguments:*)| Psig_include((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)include_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_include" [((*P4*)process_include_description (*emit_core_type_numbered*)include_description0)])
DBG22E:constructor_declaration_new: constructor:"Psig_include"{(*emit_constructor_arguments:*)| Psig_include((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)include_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_include" [((*P4*)process_include_description (*emit_core_type_numbered*)include_description0)])}
DBG221EC: let process_signature_item_desc__Psig_open x :string =match x with 
DBG22A:let process_open_description x : open_description= x
DBG22A:let process_open_description x : open_description= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_open((aopen_description):(open_description)):string = (process_generic_type_d "signature_item_desc" "Psig_open") ((*P5*)process_generic_type_open_description aopen_description))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_open:(*emit_constructor_arguments:*)| Psig_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0)])
DBG22E:constructor_declaration_new: constructor:"Psig_open"{(*emit_constructor_arguments:*)| Psig_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0)])}
DBG221EC: let process_signature_item_desc__Psig_modtypesubst x :string =match x with 
DBG22A:let process_module_type_declaration x : module_type_declaration= x
DBG22A:let process_module_type_declaration x : module_type_declaration= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_modtypesubst((amodule_type_declaration):(module_type_declaration)):string = (process_generic_type_d "signature_item_desc" "Psig_modtypesubst") ((*P5*)process_generic_type_module_type_declaration amodule_type_declaration))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_modtypesubst:(*emit_constructor_arguments:*)| Psig_modtypesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modtypesubst" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])
DBG22E:constructor_declaration_new: constructor:"Psig_modtypesubst"{(*emit_constructor_arguments:*)| Psig_modtypesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modtypesubst" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])}
DBG221EC: let process_signature_item_desc__Psig_modtype x :string =match x with 
DBG22A:let process_module_type_declaration x : module_type_declaration= x
DBG22A:let process_module_type_declaration x : module_type_declaration= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_modtype((amodule_type_declaration):(module_type_declaration)):string = (process_generic_type_d "signature_item_desc" "Psig_modtype") ((*P5*)process_generic_type_module_type_declaration amodule_type_declaration))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_modtype:(*emit_constructor_arguments:*)| Psig_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modtype" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])
DBG22E:constructor_declaration_new: constructor:"Psig_modtype"{(*emit_constructor_arguments:*)| Psig_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modtype" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])}
DBG221EC: let process_signature_item_desc__Psig_recmodule x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_recmodule((alist):(list)):string = (process_generic_type_d "signature_item_desc" "Psig_recmodule") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_recmodule:(*emit_constructor_arguments:*)| Psig_recmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_recmodule" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Psig_recmodule"{(*emit_constructor_arguments:*)| Psig_recmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_recmodule" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_signature_item_desc__Psig_modsubst x :string =match x with 
DBG22A:let process_module_substitution x : module_substitution= x
DBG22A:let process_module_substitution x : module_substitution= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_modsubst((amodule_substitution):(module_substitution)):string = (process_generic_type_d "signature_item_desc" "Psig_modsubst") ((*P5*)process_generic_type_module_substitution amodule_substitution))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_modsubst:(*emit_constructor_arguments:*)| Psig_modsubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_substitution0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modsubst" [((*P4*)process_module_substitution (*emit_core_type_numbered*)module_substitution0)])
DBG22E:constructor_declaration_new: constructor:"Psig_modsubst"{(*emit_constructor_arguments:*)| Psig_modsubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_substitution0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modsubst" [((*P4*)process_module_substitution (*emit_core_type_numbered*)module_substitution0)])}
DBG221EC: let process_signature_item_desc__Psig_module x :string =match x with 
DBG22A:let process_module_declaration x : module_declaration= x
DBG22A:let process_module_declaration x : module_declaration= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_module((amodule_declaration):(module_declaration)):string = (process_generic_type_d "signature_item_desc" "Psig_module") ((*P5*)process_generic_type_module_declaration amodule_declaration))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_module:(*emit_constructor_arguments:*)| Psig_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_module" [((*P4*)process_module_declaration (*emit_core_type_numbered*)module_declaration0)])
DBG22E:constructor_declaration_new: constructor:"Psig_module"{(*emit_constructor_arguments:*)| Psig_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_module" [((*P4*)process_module_declaration (*emit_core_type_numbered*)module_declaration0)])}
DBG221EC: let process_signature_item_desc__Psig_exception x :string =match x with 
DBG22A:let process_type_exception x : type_exception= x
DBG22A:let process_type_exception x : type_exception= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_exception((atype_exception):(type_exception)):string = (process_generic_type_d "signature_item_desc" "Psig_exception") ((*P5*)process_generic_type_type_exception atype_exception))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_exception:(*emit_constructor_arguments:*)| Psig_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_exception0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_exception" [((*P4*)process_type_exception (*emit_core_type_numbered*)type_exception0)])
DBG22E:constructor_declaration_new: constructor:"Psig_exception"{(*emit_constructor_arguments:*)| Psig_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_exception0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_exception" [((*P4*)process_type_exception (*emit_core_type_numbered*)type_exception0)])}
DBG221EC: let process_signature_item_desc__Psig_typext x :string =match x with 
DBG22A:let process_type_extension x : type_extension= x
DBG22A:let process_type_extension x : type_extension= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_typext((atype_extension):(type_extension)):string = (process_generic_type_d "signature_item_desc" "Psig_typext") ((*P5*)process_generic_type_type_extension atype_extension))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_typext:(*emit_constructor_arguments:*)| Psig_typext((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_extension0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_typext" [((*P4*)process_type_extension (*emit_core_type_numbered*)type_extension0)])
DBG22E:constructor_declaration_new: constructor:"Psig_typext"{(*emit_constructor_arguments:*)| Psig_typext((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_extension0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_typext" [((*P4*)process_type_extension (*emit_core_type_numbered*)type_extension0)])}
DBG221EC: let process_signature_item_desc__Psig_typesubst x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_typesubst((alist):(list)):string = (process_generic_type_d "signature_item_desc" "Psig_typesubst") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_typesubst:(*emit_constructor_arguments:*)| Psig_typesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_typesubst" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Psig_typesubst"{(*emit_constructor_arguments:*)| Psig_typesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_typesubst" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_signature_item_desc__Psig_type x :string =match x with 
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_type((arec_flag,alist):(rec_flag*list)):string = (process_generic_type_d "signature_item_desc" "Psig_type") ((*P5*)process_generic_type_rec_flag arec_flag)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_type:(*emit_constructor_arguments:*)| Psig_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_type" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Psig_type"{(*emit_constructor_arguments:*)| Psig_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_type" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_signature_item_desc__Psig_value x :string =match x with 
DBG22A:let process_value_description x : value_description= x
DBG22A:let process_value_description x : value_description= x
DBG22EB:let (*P1*)process_types_signature_item_desc__Psig_value((avalue_description):(value_description)):string = (process_generic_type_d "signature_item_desc" "Psig_value") ((*P5*)process_generic_type_value_description avalue_description))
DBG222EC:emit_constructor_arguments:signature_item_desc;Psig_value:(*emit_constructor_arguments:*)| Psig_value((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)value_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_value" [((*P4*)process_value_description (*emit_core_type_numbered*)value_description0)])
DBG22E:constructor_declaration_new: constructor:"Psig_value"{(*emit_constructor_arguments:*)| Psig_value((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)value_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_value" [((*P4*)process_value_description (*emit_core_type_numbered*)value_description0)])}
DBG221EC: let process_functor_parameter__Named x :string =match x with 
DBG22A:let process_loc x : loc= x
DBG22A:let process_module_type x : module_type= x
DBG22A:let process_loc x : loc= x
DBG22A:let process_module_type x : module_type= x
DBG22EB:let (*P1*)process_types_functor_parameter__Named((aloc,amodule_type):(loc*module_type)):string = (process_generic_type_d "functor_parameter" "Named") ((*P5*)process_generic_type_loc aloc)((*P5*)process_generic_type_module_type amodule_type))
DBG222EC:emit_constructor_arguments:functor_parameter;Named:(*emit_constructor_arguments:*)| Named((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "functor_parameter" "Named" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])
DBG22E:constructor_declaration_new: constructor:"Named"{(*emit_constructor_arguments:*)| Named((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "functor_parameter" "Named" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DBG221EC: let process_functor_parameter__Unit x :string =match x with 
DBG22EB:let (*P1*)process_types_functor_parameter__Unit(():()):string = (process_generic_type_d "functor_parameter" "Unit") )
DBG222EC:emit_constructor_arguments:functor_parameter;Unit:(*emit_constructor_arguments:*)| Unit((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "functor_parameter" "Unit" [])
DBG22E:constructor_declaration_new: constructor:"Unit"{(*emit_constructor_arguments:*)| Unit((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "functor_parameter" "Unit" [])}
DBG221EC: let process_module_type_desc__Pmty_alias x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_module_type_desc__Pmty_alias((alongident_loc):(longident_loc)):string = (process_generic_type_d "module_type_desc" "Pmty_alias") ((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:module_type_desc;Pmty_alias:(*emit_constructor_arguments:*)| Pmty_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_alias" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])
DBG22E:constructor_declaration_new: constructor:"Pmty_alias"{(*emit_constructor_arguments:*)| Pmty_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_alias" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DBG221EC: let process_module_type_desc__Pmty_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_module_type_desc__Pmty_extension((aextension):(extension)):string = (process_generic_type_d "module_type_desc" "Pmty_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:module_type_desc;Pmty_extension:(*emit_constructor_arguments:*)| Pmty_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Pmty_extension"{(*emit_constructor_arguments:*)| Pmty_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_module_type_desc__Pmty_typeof x :string =match x with 
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_module_expr x : module_expr= x
DBG22EB:let (*P1*)process_types_module_type_desc__Pmty_typeof((amodule_expr):(module_expr)):string = (process_generic_type_d "module_type_desc" "Pmty_typeof") ((*P5*)process_generic_type_module_expr amodule_expr))
DBG222EC:emit_constructor_arguments:module_type_desc;Pmty_typeof:(*emit_constructor_arguments:*)| Pmty_typeof((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_typeof" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0)])
DBG22E:constructor_declaration_new: constructor:"Pmty_typeof"{(*emit_constructor_arguments:*)| Pmty_typeof((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_typeof" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0)])}
DBG221EC: let process_module_type_desc__Pmty_with x :string =match x with 
DBG22A:let process_module_type x : module_type= x
DBG22A:let process_list x : list= x
DBG22A:let process_module_type x : module_type= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_module_type_desc__Pmty_with((amodule_type,alist):(module_type*list)):string = (process_generic_type_d "module_type_desc" "Pmty_with") ((*P5*)process_generic_type_module_type amodule_type)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:module_type_desc;Pmty_with:(*emit_constructor_arguments:*)| Pmty_with((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_with" [((*P4*)process_module_type (*emit_core_type_numbered*)module_type0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Pmty_with"{(*emit_constructor_arguments:*)| Pmty_with((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_with" [((*P4*)process_module_type (*emit_core_type_numbered*)module_type0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_module_type_desc__Pmty_functor x :string =match x with 
DBG22A:let process_functor_parameter x : functor_parameter= x
DBG22A:let process_module_type x : module_type= x
DBG22A:let process_functor_parameter x : functor_parameter= x
DBG22A:let process_module_type x : module_type= x
DBG22EB:let (*P1*)process_types_module_type_desc__Pmty_functor((afunctor_parameter,amodule_type):(functor_parameter*module_type)):string = (process_generic_type_d "module_type_desc" "Pmty_functor") ((*P5*)process_generic_type_functor_parameter afunctor_parameter)((*P5*)process_generic_type_module_type amodule_type))
DBG222EC:emit_constructor_arguments:module_type_desc;Pmty_functor:(*emit_constructor_arguments:*)| Pmty_functor((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)functor_parameter0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_functor" [((*P4*)process_functor_parameter (*emit_core_type_numbered*)functor_parameter0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])
DBG22E:constructor_declaration_new: constructor:"Pmty_functor"{(*emit_constructor_arguments:*)| Pmty_functor((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)functor_parameter0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_functor" [((*P4*)process_functor_parameter (*emit_core_type_numbered*)functor_parameter0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DBG221EC: let process_module_type_desc__Pmty_signature x :string =match x with 
DBG22A:let process_signature x : signature= x
DBG22A:let process_signature x : signature= x
DBG22EB:let (*P1*)process_types_module_type_desc__Pmty_signature((asignature):(signature)):string = (process_generic_type_d "module_type_desc" "Pmty_signature") ((*P5*)process_generic_type_signature asignature))
DBG222EC:emit_constructor_arguments:module_type_desc;Pmty_signature:(*emit_constructor_arguments:*)| Pmty_signature((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)signature0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_signature" [((*P4*)process_signature (*emit_core_type_numbered*)signature0)])
DBG22E:constructor_declaration_new: constructor:"Pmty_signature"{(*emit_constructor_arguments:*)| Pmty_signature((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)signature0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_signature" [((*P4*)process_signature (*emit_core_type_numbered*)signature0)])}
DBG221EC: let process_module_type_desc__Pmty_ident x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_module_type_desc__Pmty_ident((alongident_loc):(longident_loc)):string = (process_generic_type_d "module_type_desc" "Pmty_ident") ((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:module_type_desc;Pmty_ident:(*emit_constructor_arguments:*)| Pmty_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])
DBG22E:constructor_declaration_new: constructor:"Pmty_ident"{(*emit_constructor_arguments:*)| Pmty_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DBG221EC: let process_class_field_kind__Cfk_concrete x :string =match x with 
DBG22A:let process_override_flag x : override_flag= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_override_flag x : override_flag= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_class_field_kind__Cfk_concrete((aoverride_flag,aexpression):(override_flag*expression)):string = (process_generic_type_d "class_field_kind" "Cfk_concrete") ((*P5*)process_generic_type_override_flag aoverride_flag)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:class_field_kind;Cfk_concrete:(*emit_constructor_arguments:*)| Cfk_concrete((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)override_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "class_field_kind" "Cfk_concrete" [((*P4*)process_override_flag (*emit_core_type_numbered*)override_flag0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])
DBG22E:constructor_declaration_new: constructor:"Cfk_concrete"{(*emit_constructor_arguments:*)| Cfk_concrete((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)override_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "class_field_kind" "Cfk_concrete" [((*P4*)process_override_flag (*emit_core_type_numbered*)override_flag0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DBG221EC: let process_class_field_kind__Cfk_virtual x :string =match x with 
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_class_field_kind__Cfk_virtual((acore_type):(core_type)):string = (process_generic_type_d "class_field_kind" "Cfk_virtual") ((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:class_field_kind;Cfk_virtual:(*emit_constructor_arguments:*)| Cfk_virtual((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "class_field_kind" "Cfk_virtual" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])
DBG22E:constructor_declaration_new: constructor:"Cfk_virtual"{(*emit_constructor_arguments:*)| Cfk_virtual((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "class_field_kind" "Cfk_virtual" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])}
DBG221EC: let process_class_field_desc__Pcf_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_class_field_desc__Pcf_extension((aextension):(extension)):string = (process_generic_type_d "class_field_desc" "Pcf_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:class_field_desc;Pcf_extension:(*emit_constructor_arguments:*)| Pcf_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Pcf_extension"{(*emit_constructor_arguments:*)| Pcf_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_class_field_desc__Pcf_attribute x :string =match x with 
DBG22A:let process_attribute x : attribute= x
DBG22A:let process_attribute x : attribute= x
DBG22EB:let (*P1*)process_types_class_field_desc__Pcf_attribute((aattribute):(attribute)):string = (process_generic_type_d "class_field_desc" "Pcf_attribute") ((*P5*)process_generic_type_attribute aattribute))
DBG222EC:emit_constructor_arguments:class_field_desc;Pcf_attribute:(*emit_constructor_arguments:*)| Pcf_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])
DBG22E:constructor_declaration_new: constructor:"Pcf_attribute"{(*emit_constructor_arguments:*)| Pcf_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])}
DBG221EC: let process_class_field_desc__Pcf_initializer x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_class_field_desc__Pcf_initializer((aexpression):(expression)):string = (process_generic_type_d "class_field_desc" "Pcf_initializer") ((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:class_field_desc;Pcf_initializer:(*emit_constructor_arguments:*)| Pcf_initializer((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_initializer" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])
DBG22E:constructor_declaration_new: constructor:"Pcf_initializer"{(*emit_constructor_arguments:*)| Pcf_initializer((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_initializer" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])}
DBG221EC: let process_class_field_desc__Pcf_constraint x :string =match x with 
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))= x
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))= x
DBG22EB:let (*P1*)process_types_class_field_desc__Pcf_constraint((a(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))):((ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)))):string = (process_generic_type_d "class_field_desc" "Pcf_constraint") ((*P5*)process_generic_type_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) a(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))))
DBG222EC:emit_constructor_arguments:class_field_desc;Pcf_constraint:(*emit_constructor_arguments:*)| Pcf_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_constraint" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])
DBG22E:constructor_declaration_new: constructor:"Pcf_constraint"{(*emit_constructor_arguments:*)| Pcf_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_constraint" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])}
DBG221EC: let process_class_field_desc__Pcf_method x :string =match x with 
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))= x
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))= x
DBG22EB:let (*P1*)process_types_class_field_desc__Pcf_method((a(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))):((ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)))):string = (process_generic_type_d "class_field_desc" "Pcf_method") ((*P5*)process_generic_type_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) a(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))))
DBG222EC:emit_constructor_arguments:class_field_desc;Pcf_method:(*emit_constructor_arguments:*)| Pcf_method((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_method" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0)])
DBG22E:constructor_declaration_new: constructor:"Pcf_method"{(*emit_constructor_arguments:*)| Pcf_method((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_method" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0)])}
DBG221EC: let process_class_field_desc__Pcf_val x :string =match x with 
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))= x
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))= x
DBG22EB:let (*P1*)process_types_class_field_desc__Pcf_val((a(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))):((ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)))):string = (process_generic_type_d "class_field_desc" "Pcf_val") ((*P5*)process_generic_type_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) a(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))))
DBG222EC:emit_constructor_arguments:class_field_desc;Pcf_val:(*emit_constructor_arguments:*)| Pcf_val((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_val" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0)])
DBG22E:constructor_declaration_new: constructor:"Pcf_val"{(*emit_constructor_arguments:*)| Pcf_val((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_val" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0)])}
DBG221EC: let process_class_field_desc__Pcf_inherit x :string =match x with 
DBG22A:let process_override_flag x : override_flag= x
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_option x : option= x
DBG22A:let process_override_flag x : override_flag= x
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_class_field_desc__Pcf_inherit((aoverride_flag,aclass_expr,aoption):(override_flag*class_expr*option)):string = (process_generic_type_d "class_field_desc" "Pcf_inherit") ((*P5*)process_generic_type_override_flag aoverride_flag)((*P5*)process_generic_type_class_expr aclass_expr)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:class_field_desc;Pcf_inherit:(*emit_constructor_arguments:*)| Pcf_inherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)override_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_inherit" [((*P4*)process_override_flag (*emit_core_type_numbered*)override_flag0);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr1);((*P4*)process_option (*emit_core_type_numbered*)option2)])
DBG22E:constructor_declaration_new: constructor:"Pcf_inherit"{(*emit_constructor_arguments:*)| Pcf_inherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)override_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_inherit" [((*P4*)process_override_flag (*emit_core_type_numbered*)override_flag0);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DBG221EC: let process_class_expr_desc__Pcl_open x :string =match x with 
DBG22A:let process_open_description x : open_description= x
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_open_description x : open_description= x
DBG22A:let process_class_expr x : class_expr= x
DBG22EB:let (*P1*)process_types_class_expr_desc__Pcl_open((aopen_description,aclass_expr):(open_description*class_expr)):string = (process_generic_type_d "class_expr_desc" "Pcl_open") ((*P5*)process_generic_type_open_description aopen_description)((*P5*)process_generic_type_class_expr aclass_expr))
DBG222EC:emit_constructor_arguments:class_expr_desc;Pcl_open:(*emit_constructor_arguments:*)| Pcl_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr1)])
DBG22E:constructor_declaration_new: constructor:"Pcl_open"{(*emit_constructor_arguments:*)| Pcl_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr1)])}
DBG221EC: let process_class_expr_desc__Pcl_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_class_expr_desc__Pcl_extension((aextension):(extension)):string = (process_generic_type_d "class_expr_desc" "Pcl_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:class_expr_desc;Pcl_extension:(*emit_constructor_arguments:*)| Pcl_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Pcl_extension"{(*emit_constructor_arguments:*)| Pcl_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_class_expr_desc__Pcl_constraint x :string =match x with 
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_class_type x : class_type= x
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_class_type x : class_type= x
DBG22EB:let (*P1*)process_types_class_expr_desc__Pcl_constraint((aclass_expr,aclass_type):(class_expr*class_type)):string = (process_generic_type_d "class_expr_desc" "Pcl_constraint") ((*P5*)process_generic_type_class_expr aclass_expr)((*P5*)process_generic_type_class_type aclass_type))
DBG222EC:emit_constructor_arguments:class_expr_desc;Pcl_constraint:(*emit_constructor_arguments:*)| Pcl_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_constraint" [((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr0);((*P4*)process_class_type (*emit_core_type_numbered*)class_type1)])
DBG22E:constructor_declaration_new: constructor:"Pcl_constraint"{(*emit_constructor_arguments:*)| Pcl_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_constraint" [((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr0);((*P4*)process_class_type (*emit_core_type_numbered*)class_type1)])}
DBG221EC: let process_class_expr_desc__Pcl_let x :string =match x with 
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_class_expr x : class_expr= x
DBG22EB:let (*P1*)process_types_class_expr_desc__Pcl_let((arec_flag,alist,aclass_expr):(rec_flag*list*class_expr)):string = (process_generic_type_d "class_expr_desc" "Pcl_let") ((*P5*)process_generic_type_rec_flag arec_flag)((*P5*)process_generic_type_list alist)((*P5*)process_generic_type_class_expr aclass_expr))
DBG222EC:emit_constructor_arguments:class_expr_desc;Pcl_let:(*emit_constructor_arguments:*)| Pcl_let((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr2) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_let" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr2)])
DBG22E:constructor_declaration_new: constructor:"Pcl_let"{(*emit_constructor_arguments:*)| Pcl_let((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr2) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_let" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr2)])}
DBG221EC: let process_class_expr_desc__Pcl_apply x :string =match x with 
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_list x : list= x
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_class_expr_desc__Pcl_apply((aclass_expr,alist):(class_expr*list)):string = (process_generic_type_d "class_expr_desc" "Pcl_apply") ((*P5*)process_generic_type_class_expr aclass_expr)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:class_expr_desc;Pcl_apply:(*emit_constructor_arguments:*)| Pcl_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_apply" [((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Pcl_apply"{(*emit_constructor_arguments:*)| Pcl_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_apply" [((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_class_expr_desc__Pcl_fun x :string =match x with 
DBG22A:let process_arg_label x : arg_label= x
DBG22A:let process_option x : option= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_class_expr x : class_expr= x
DBG22A:let process_arg_label x : arg_label= x
DBG22A:let process_option x : option= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_class_expr x : class_expr= x
DBG22EB:let (*P1*)process_types_class_expr_desc__Pcl_fun((aarg_label,aoption,apattern,aclass_expr):(arg_label*option*pattern*class_expr)):string = (process_generic_type_d "class_expr_desc" "Pcl_fun") ((*P5*)process_generic_type_arg_label aarg_label)((*P5*)process_generic_type_option aoption)((*P5*)process_generic_type_pattern apattern)((*P5*)process_generic_type_class_expr aclass_expr))
DBG222EC:emit_constructor_arguments:class_expr_desc;Pcl_fun:(*emit_constructor_arguments:*)| Pcl_fun((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr3) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_fun" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_pattern (*emit_core_type_numbered*)pattern2);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr3)])
DBG22E:constructor_declaration_new: constructor:"Pcl_fun"{(*emit_constructor_arguments:*)| Pcl_fun((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr3) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_fun" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_pattern (*emit_core_type_numbered*)pattern2);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr3)])}
DBG221EC: let process_class_expr_desc__Pcl_structure x :string =match x with 
DBG22A:let process_class_structure x : class_structure= x
DBG22A:let process_class_structure x : class_structure= x
DBG22EB:let (*P1*)process_types_class_expr_desc__Pcl_structure((aclass_structure):(class_structure)):string = (process_generic_type_d "class_expr_desc" "Pcl_structure") ((*P5*)process_generic_type_class_structure aclass_structure))
DBG222EC:emit_constructor_arguments:class_expr_desc;Pcl_structure:(*emit_constructor_arguments:*)| Pcl_structure((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_structure0) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_structure" [((*P4*)process_class_structure (*emit_core_type_numbered*)class_structure0)])
DBG22E:constructor_declaration_new: constructor:"Pcl_structure"{(*emit_constructor_arguments:*)| Pcl_structure((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_structure0) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_structure" [((*P4*)process_class_structure (*emit_core_type_numbered*)class_structure0)])}
DBG221EC: let process_class_expr_desc__Pcl_constr x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_list x : list= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_class_expr_desc__Pcl_constr((alongident_loc,alist):(longident_loc*list)):string = (process_generic_type_d "class_expr_desc" "Pcl_constr") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:class_expr_desc;Pcl_constr:(*emit_constructor_arguments:*)| Pcl_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Pcl_constr"{(*emit_constructor_arguments:*)| Pcl_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_class_type_field_desc__Pctf_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_class_type_field_desc__Pctf_extension((aextension):(extension)):string = (process_generic_type_d "class_type_field_desc" "Pctf_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:class_type_field_desc;Pctf_extension:(*emit_constructor_arguments:*)| Pctf_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Pctf_extension"{(*emit_constructor_arguments:*)| Pctf_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_class_type_field_desc__Pctf_attribute x :string =match x with 
DBG22A:let process_attribute x : attribute= x
DBG22A:let process_attribute x : attribute= x
DBG22EB:let (*P1*)process_types_class_type_field_desc__Pctf_attribute((aattribute):(attribute)):string = (process_generic_type_d "class_type_field_desc" "Pctf_attribute") ((*P5*)process_generic_type_attribute aattribute))
DBG222EC:emit_constructor_arguments:class_type_field_desc;Pctf_attribute:(*emit_constructor_arguments:*)| Pctf_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])
DBG22E:constructor_declaration_new: constructor:"Pctf_attribute"{(*emit_constructor_arguments:*)| Pctf_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])}
DBG221EC: let process_class_type_field_desc__Pctf_constraint x :string =match x with 
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))= x
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))= x
DBG22EB:let (*P1*)process_types_class_type_field_desc__Pctf_constraint((a(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))):((ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)))):string = (process_generic_type_d "class_type_field_desc" "Pctf_constraint") ((*P5*)process_generic_type_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) a(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))))
DBG222EC:emit_constructor_arguments:class_type_field_desc;Pctf_constraint:(*emit_constructor_arguments:*)| Pctf_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_constraint" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])
DBG22E:constructor_declaration_new: constructor:"Pctf_constraint"{(*emit_constructor_arguments:*)| Pctf_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_constraint" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])}
DBG221EC: let process_class_type_field_desc__Pctf_method x :string =match x with 
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))= x
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))= x
DBG22EB:let (*P1*)process_types_class_type_field_desc__Pctf_method((a(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))):((ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)))):string = (process_generic_type_d "class_type_field_desc" "Pctf_method") ((*P5*)process_generic_type_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) a(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))))
DBG222EC:emit_constructor_arguments:class_type_field_desc;Pctf_method:(*emit_constructor_arguments:*)| Pctf_method((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_method" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])
DBG22E:constructor_declaration_new: constructor:"Pctf_method"{(*emit_constructor_arguments:*)| Pctf_method((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_method" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])}
DBG221EC: let process_class_type_field_desc__Pctf_val x :string =match x with 
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))= x
DBG22A:let process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) x : (ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))= x
DBG22EB:let (*P1*)process_types_class_type_field_desc__Pctf_val((a(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))):((ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)))):string = (process_generic_type_d "class_type_field_desc" "Pctf_val") ((*P5*)process_generic_type_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) a(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))))
DBG222EC:emit_constructor_arguments:class_type_field_desc;Pctf_val:(*emit_constructor_arguments:*)| Pctf_val((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_val" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])
DBG22E:constructor_declaration_new: constructor:"Pctf_val"{(*emit_constructor_arguments:*)| Pctf_val((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_val" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])}
DBG221EC: let process_class_type_field_desc__Pctf_inherit x :string =match x with 
DBG22A:let process_class_type x : class_type= x
DBG22A:let process_class_type x : class_type= x
DBG22EB:let (*P1*)process_types_class_type_field_desc__Pctf_inherit((aclass_type):(class_type)):string = (process_generic_type_d "class_type_field_desc" "Pctf_inherit") ((*P5*)process_generic_type_class_type aclass_type))
DBG222EC:emit_constructor_arguments:class_type_field_desc;Pctf_inherit:(*emit_constructor_arguments:*)| Pctf_inherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_inherit" [((*P4*)process_class_type (*emit_core_type_numbered*)class_type0)])
DBG22E:constructor_declaration_new: constructor:"Pctf_inherit"{(*emit_constructor_arguments:*)| Pctf_inherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_inherit" [((*P4*)process_class_type (*emit_core_type_numbered*)class_type0)])}
DBG221EC: let process_class_type_desc__Pcty_open x :string =match x with 
DBG22A:let process_open_description x : open_description= x
DBG22A:let process_class_type x : class_type= x
DBG22A:let process_open_description x : open_description= x
DBG22A:let process_class_type x : class_type= x
DBG22EB:let (*P1*)process_types_class_type_desc__Pcty_open((aopen_description,aclass_type):(open_description*class_type)):string = (process_generic_type_d "class_type_desc" "Pcty_open") ((*P5*)process_generic_type_open_description aopen_description)((*P5*)process_generic_type_class_type aclass_type))
DBG222EC:emit_constructor_arguments:class_type_desc;Pcty_open:(*emit_constructor_arguments:*)| Pcty_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type1) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0);((*P4*)process_class_type (*emit_core_type_numbered*)class_type1)])
DBG22E:constructor_declaration_new: constructor:"Pcty_open"{(*emit_constructor_arguments:*)| Pcty_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type1) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0);((*P4*)process_class_type (*emit_core_type_numbered*)class_type1)])}
DBG221EC: let process_class_type_desc__Pcty_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_class_type_desc__Pcty_extension((aextension):(extension)):string = (process_generic_type_d "class_type_desc" "Pcty_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:class_type_desc;Pcty_extension:(*emit_constructor_arguments:*)| Pcty_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Pcty_extension"{(*emit_constructor_arguments:*)| Pcty_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_class_type_desc__Pcty_arrow x :string =match x with 
DBG22A:let process_arg_label x : arg_label= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_class_type x : class_type= x
DBG22A:let process_arg_label x : arg_label= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_class_type x : class_type= x
DBG22EB:let (*P1*)process_types_class_type_desc__Pcty_arrow((aarg_label,acore_type,aclass_type):(arg_label*core_type*class_type)):string = (process_generic_type_d "class_type_desc" "Pcty_arrow") ((*P5*)process_generic_type_arg_label aarg_label)((*P5*)process_generic_type_core_type acore_type)((*P5*)process_generic_type_class_type aclass_type))
DBG222EC:emit_constructor_arguments:class_type_desc;Pcty_arrow:(*emit_constructor_arguments:*)| Pcty_arrow((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type2) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_arrow" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1);((*P4*)process_class_type (*emit_core_type_numbered*)class_type2)])
DBG22E:constructor_declaration_new: constructor:"Pcty_arrow"{(*emit_constructor_arguments:*)| Pcty_arrow((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type2) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_arrow" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1);((*P4*)process_class_type (*emit_core_type_numbered*)class_type2)])}
DBG221EC: let process_class_type_desc__Pcty_signature x :string =match x with 
DBG22A:let process_class_signature x : class_signature= x
DBG22A:let process_class_signature x : class_signature= x
DBG22EB:let (*P1*)process_types_class_type_desc__Pcty_signature((aclass_signature):(class_signature)):string = (process_generic_type_d "class_type_desc" "Pcty_signature") ((*P5*)process_generic_type_class_signature aclass_signature))
DBG222EC:emit_constructor_arguments:class_type_desc;Pcty_signature:(*emit_constructor_arguments:*)| Pcty_signature((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_signature0) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_signature" [((*P4*)process_class_signature (*emit_core_type_numbered*)class_signature0)])
DBG22E:constructor_declaration_new: constructor:"Pcty_signature"{(*emit_constructor_arguments:*)| Pcty_signature((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_signature0) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_signature" [((*P4*)process_class_signature (*emit_core_type_numbered*)class_signature0)])}
DBG221EC: let process_class_type_desc__Pcty_constr x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_list x : list= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_class_type_desc__Pcty_constr((alongident_loc,alist):(longident_loc*list)):string = (process_generic_type_d "class_type_desc" "Pcty_constr") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:class_type_desc;Pcty_constr:(*emit_constructor_arguments:*)| Pcty_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Pcty_constr"{(*emit_constructor_arguments:*)| Pcty_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_extension_constructor_kind__Pext_rebind x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_extension_constructor_kind__Pext_rebind((alongident_loc):(longident_loc)):string = (process_generic_type_d "extension_constructor_kind" "Pext_rebind") ((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:extension_constructor_kind;Pext_rebind:(*emit_constructor_arguments:*)| Pext_rebind((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "extension_constructor_kind" "Pext_rebind" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])
DBG22E:constructor_declaration_new: constructor:"Pext_rebind"{(*emit_constructor_arguments:*)| Pext_rebind((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "extension_constructor_kind" "Pext_rebind" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DBG221EC: let process_extension_constructor_kind__Pext_decl x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_constructor_arguments x : constructor_arguments= x
DBG22A:let process_option x : option= x
DBG22A:let process_list x : list= x
DBG22A:let process_constructor_arguments x : constructor_arguments= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_extension_constructor_kind__Pext_decl((alist,aconstructor_arguments,aoption):(list*constructor_arguments*option)):string = (process_generic_type_d "extension_constructor_kind" "Pext_decl") ((*P5*)process_generic_type_list alist)((*P5*)process_generic_type_constructor_arguments aconstructor_arguments)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:extension_constructor_kind;Pext_decl:(*emit_constructor_arguments:*)| Pext_decl((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constructor_arguments1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "extension_constructor_kind" "Pext_decl" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_constructor_arguments (*emit_core_type_numbered*)constructor_arguments1);((*P4*)process_option (*emit_core_type_numbered*)option2)])
DBG22E:constructor_declaration_new: constructor:"Pext_decl"{(*emit_constructor_arguments:*)| Pext_decl((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constructor_arguments1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "extension_constructor_kind" "Pext_decl" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_constructor_arguments (*emit_core_type_numbered*)constructor_arguments1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DBG221EC: let process_constructor_arguments__Pcstr_record x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_constructor_arguments__Pcstr_record((alist):(list)):string = (process_generic_type_d "constructor_arguments" "Pcstr_record") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:constructor_arguments;Pcstr_record:(*emit_constructor_arguments:*)| Pcstr_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "constructor_arguments" "Pcstr_record" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Pcstr_record"{(*emit_constructor_arguments:*)| Pcstr_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "constructor_arguments" "Pcstr_record" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_constructor_arguments__Pcstr_tuple x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_constructor_arguments__Pcstr_tuple((alist):(list)):string = (process_generic_type_d "constructor_arguments" "Pcstr_tuple") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:constructor_arguments;Pcstr_tuple:(*emit_constructor_arguments:*)| Pcstr_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "constructor_arguments" "Pcstr_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Pcstr_tuple"{(*emit_constructor_arguments:*)| Pcstr_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "constructor_arguments" "Pcstr_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_type_kind__Ptype_open x :string =match x with 
DBG22EB:let (*P1*)process_types_type_kind__Ptype_open(():()):string = (process_generic_type_d "type_kind" "Ptype_open") )
DBG222EC:emit_constructor_arguments:type_kind;Ptype_open:(*emit_constructor_arguments:*)| Ptype_open((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "type_kind" "Ptype_open" [])
DBG22E:constructor_declaration_new: constructor:"Ptype_open"{(*emit_constructor_arguments:*)| Ptype_open((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "type_kind" "Ptype_open" [])}
DBG221EC: let process_type_kind__Ptype_record x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_type_kind__Ptype_record((alist):(list)):string = (process_generic_type_d "type_kind" "Ptype_record") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:type_kind;Ptype_record:(*emit_constructor_arguments:*)| Ptype_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "type_kind" "Ptype_record" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Ptype_record"{(*emit_constructor_arguments:*)| Ptype_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "type_kind" "Ptype_record" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_type_kind__Ptype_variant x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_type_kind__Ptype_variant((alist):(list)):string = (process_generic_type_d "type_kind" "Ptype_variant") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:type_kind;Ptype_variant:(*emit_constructor_arguments:*)| Ptype_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "type_kind" "Ptype_variant" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Ptype_variant"{(*emit_constructor_arguments:*)| Ptype_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "type_kind" "Ptype_variant" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_type_kind__Ptype_abstract x :string =match x with 
DBG22EB:let (*P1*)process_types_type_kind__Ptype_abstract(():()):string = (process_generic_type_d "type_kind" "Ptype_abstract") )
DBG222EC:emit_constructor_arguments:type_kind;Ptype_abstract:(*emit_constructor_arguments:*)| Ptype_abstract((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "type_kind" "Ptype_abstract" [])
DBG22E:constructor_declaration_new: constructor:"Ptype_abstract"{(*emit_constructor_arguments:*)| Ptype_abstract((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "type_kind" "Ptype_abstract" [])}
DBG221EC: let process_expression_desc__Pexp_unreachable x :string =match x with 
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_unreachable(():()):string = (process_generic_type_d "expression_desc" "Pexp_unreachable") )
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_unreachable:(*emit_constructor_arguments:*)| Pexp_unreachable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "expression_desc" "Pexp_unreachable" [])
DBG22E:constructor_declaration_new: constructor:"Pexp_unreachable"{(*emit_constructor_arguments:*)| Pexp_unreachable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "expression_desc" "Pexp_unreachable" [])}
DBG221EC: let process_expression_desc__Pexp_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_extension((aextension):(extension)):string = (process_generic_type_d "expression_desc" "Pexp_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_extension:(*emit_constructor_arguments:*)| Pexp_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_extension"{(*emit_constructor_arguments:*)| Pexp_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_expression_desc__Pexp_letop x :string =match x with 
DBG22A:let process_letop x : letop= x
DBG22A:let process_letop x : letop= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_letop((aletop):(letop)):string = (process_generic_type_d "expression_desc" "Pexp_letop") ((*P5*)process_generic_type_letop aletop))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_letop:(*emit_constructor_arguments:*)| Pexp_letop((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)letop0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letop" [((*P4*)process_letop (*emit_core_type_numbered*)letop0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_letop"{(*emit_constructor_arguments:*)| Pexp_letop((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)letop0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letop" [((*P4*)process_letop (*emit_core_type_numbered*)letop0)])}
DBG221EC: let process_expression_desc__Pexp_open x :string =match x with 
DBG22A:let process_open_declaration x : open_declaration= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_open_declaration x : open_declaration= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_open((aopen_declaration,aexpression):(open_declaration*expression)):string = (process_generic_type_d "expression_desc" "Pexp_open") ((*P5*)process_generic_type_open_declaration aopen_declaration)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_open:(*emit_constructor_arguments:*)| Pexp_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_declaration0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_open" [((*P4*)process_open_declaration (*emit_core_type_numbered*)open_declaration0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_open"{(*emit_constructor_arguments:*)| Pexp_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_declaration0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_open" [((*P4*)process_open_declaration (*emit_core_type_numbered*)open_declaration0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DBG221EC: let process_expression_desc__Pexp_pack x :string =match x with 
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_module_expr x : module_expr= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_pack((amodule_expr):(module_expr)):string = (process_generic_type_d "expression_desc" "Pexp_pack") ((*P5*)process_generic_type_module_expr amodule_expr))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_pack:(*emit_constructor_arguments:*)| Pexp_pack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_pack" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_pack"{(*emit_constructor_arguments:*)| Pexp_pack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_pack" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0)])}
DBG221EC: let process_expression_desc__Pexp_newtype x :string =match x with 
DBG22A:let process_loc x : loc= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_loc x : loc= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_newtype((aloc,aexpression):(loc*expression)):string = (process_generic_type_d "expression_desc" "Pexp_newtype") ((*P5*)process_generic_type_loc aloc)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_newtype:(*emit_constructor_arguments:*)| Pexp_newtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_newtype" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_newtype"{(*emit_constructor_arguments:*)| Pexp_newtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_newtype" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DBG221EC: let process_expression_desc__Pexp_object x :string =match x with 
DBG22A:let process_class_structure x : class_structure= x
DBG22A:let process_class_structure x : class_structure= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_object((aclass_structure):(class_structure)):string = (process_generic_type_d "expression_desc" "Pexp_object") ((*P5*)process_generic_type_class_structure aclass_structure))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_object:(*emit_constructor_arguments:*)| Pexp_object((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_structure0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_object" [((*P4*)process_class_structure (*emit_core_type_numbered*)class_structure0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_object"{(*emit_constructor_arguments:*)| Pexp_object((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_structure0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_object" [((*P4*)process_class_structure (*emit_core_type_numbered*)class_structure0)])}
DBG221EC: let process_expression_desc__Pexp_poly x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_option x : option= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_poly((aexpression,aoption):(expression*option)):string = (process_generic_type_d "expression_desc" "Pexp_poly") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_poly:(*emit_constructor_arguments:*)| Pexp_poly((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_poly" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_poly"{(*emit_constructor_arguments:*)| Pexp_poly((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_poly" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_expression_desc__Pexp_lazy x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_lazy((aexpression):(expression)):string = (process_generic_type_d "expression_desc" "Pexp_lazy") ((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_lazy:(*emit_constructor_arguments:*)| Pexp_lazy((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_lazy" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_lazy"{(*emit_constructor_arguments:*)| Pexp_lazy((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_lazy" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])}
DBG221EC: let process_expression_desc__Pexp_assert x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_assert((aexpression):(expression)):string = (process_generic_type_d "expression_desc" "Pexp_assert") ((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_assert:(*emit_constructor_arguments:*)| Pexp_assert((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_assert" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_assert"{(*emit_constructor_arguments:*)| Pexp_assert((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_assert" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])}
DBG221EC: let process_expression_desc__Pexp_letexception x :string =match x with 
DBG22A:let process_extension_constructor x : extension_constructor= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_extension_constructor x : extension_constructor= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_letexception((aextension_constructor,aexpression):(extension_constructor*expression)):string = (process_generic_type_d "expression_desc" "Pexp_letexception") ((*P5*)process_generic_type_extension_constructor aextension_constructor)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_letexception:(*emit_constructor_arguments:*)| Pexp_letexception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension_constructor0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letexception" [((*P4*)process_extension_constructor (*emit_core_type_numbered*)extension_constructor0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_letexception"{(*emit_constructor_arguments:*)| Pexp_letexception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension_constructor0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letexception" [((*P4*)process_extension_constructor (*emit_core_type_numbered*)extension_constructor0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DBG221EC: let process_expression_desc__Pexp_letmodule x :string =match x with 
DBG22A:let process_loc x : loc= x
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_loc x : loc= x
DBG22A:let process_module_expr x : module_expr= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_letmodule((aloc,amodule_expr,aexpression):(loc*module_expr*expression)):string = (process_generic_type_d "expression_desc" "Pexp_letmodule") ((*P5*)process_generic_type_loc aloc)((*P5*)process_generic_type_module_expr amodule_expr)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_letmodule:(*emit_constructor_arguments:*)| Pexp_letmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letmodule" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])
DBG22E:constructor_declaration_new: constructor:"Pexp_letmodule"{(*emit_constructor_arguments:*)| Pexp_letmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letmodule" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])}
DBG221EC: let process_expression_desc__Pexp_override x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_override((alist):(list)):string = (process_generic_type_d "expression_desc" "Pexp_override") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_override:(*emit_constructor_arguments:*)| Pexp_override((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_override" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_override"{(*emit_constructor_arguments:*)| Pexp_override((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_override" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_expression_desc__Pexp_setinstvar x :string =match x with 
DBG22A:let process_loc x : loc= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_loc x : loc= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_setinstvar((aloc,aexpression):(loc*expression)):string = (process_generic_type_d "expression_desc" "Pexp_setinstvar") ((*P5*)process_generic_type_loc aloc)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_setinstvar:(*emit_constructor_arguments:*)| Pexp_setinstvar((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_setinstvar" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_setinstvar"{(*emit_constructor_arguments:*)| Pexp_setinstvar((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_setinstvar" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DBG221EC: let process_expression_desc__Pexp_new x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_new((alongident_loc):(longident_loc)):string = (process_generic_type_d "expression_desc" "Pexp_new") ((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_new:(*emit_constructor_arguments:*)| Pexp_new((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_new" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_new"{(*emit_constructor_arguments:*)| Pexp_new((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_new" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DBG221EC: let process_expression_desc__Pexp_send x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_loc x : loc= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_loc x : loc= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_send((aexpression,aloc):(expression*loc)):string = (process_generic_type_d "expression_desc" "Pexp_send") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_loc aloc))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_send:(*emit_constructor_arguments:*)| Pexp_send((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_send" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_loc (*emit_core_type_numbered*)loc1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_send"{(*emit_constructor_arguments:*)| Pexp_send((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_send" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_loc (*emit_core_type_numbered*)loc1)])}
DBG221EC: let process_expression_desc__Pexp_coerce x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_option x : option= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_option x : option= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_coerce((aexpression,aoption,acore_type):(expression*option*core_type)):string = (process_generic_type_d "expression_desc" "Pexp_coerce") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_option aoption)((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_coerce:(*emit_constructor_arguments:*)| Pexp_coerce((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_coerce" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_core_type (*emit_core_type_numbered*)core_type2)])
DBG22E:constructor_declaration_new: constructor:"Pexp_coerce"{(*emit_constructor_arguments:*)| Pexp_coerce((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_coerce" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_core_type (*emit_core_type_numbered*)core_type2)])}
DBG221EC: let process_expression_desc__Pexp_constraint x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_constraint((aexpression,acore_type):(expression*core_type)):string = (process_generic_type_d "expression_desc" "Pexp_constraint") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_constraint:(*emit_constructor_arguments:*)| Pexp_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_constraint" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_constraint"{(*emit_constructor_arguments:*)| Pexp_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_constraint" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])}
DBG221EC: let process_expression_desc__Pexp_for x :string =match x with 
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_direction_flag x : direction_flag= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_direction_flag x : direction_flag= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_for((apattern,aexpression,aexpression,adirection_flag,aexpression):(pattern*expression*expression*direction_flag*expression)):string = (process_generic_type_d "expression_desc" "Pexp_for") ((*P5*)process_generic_type_pattern apattern)((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_direction_flag adirection_flag)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_for:(*emit_constructor_arguments:*)| Pexp_for((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)direction_flag3,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression4) -> ((*P5*)process_generic_type "expression_desc" "Pexp_for" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_expression (*emit_core_type_numbered*)expression1);((*P4*)process_expression (*emit_core_type_numbered*)expression2);((*P4*)process_direction_flag (*emit_core_type_numbered*)direction_flag3);((*P4*)process_expression (*emit_core_type_numbered*)expression4)])
DBG22E:constructor_declaration_new: constructor:"Pexp_for"{(*emit_constructor_arguments:*)| Pexp_for((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)direction_flag3,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression4) -> ((*P5*)process_generic_type "expression_desc" "Pexp_for" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_expression (*emit_core_type_numbered*)expression1);((*P4*)process_expression (*emit_core_type_numbered*)expression2);((*P4*)process_direction_flag (*emit_core_type_numbered*)direction_flag3);((*P4*)process_expression (*emit_core_type_numbered*)expression4)])}
DBG221EC: let process_expression_desc__Pexp_while x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_while((aexpression,aexpression):(expression*expression)):string = (process_generic_type_d "expression_desc" "Pexp_while") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_while:(*emit_constructor_arguments:*)| Pexp_while((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_while" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_while"{(*emit_constructor_arguments:*)| Pexp_while((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_while" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DBG221EC: let process_expression_desc__Pexp_sequence x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_sequence((aexpression,aexpression):(expression*expression)):string = (process_generic_type_d "expression_desc" "Pexp_sequence") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_sequence:(*emit_constructor_arguments:*)| Pexp_sequence((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_sequence" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_sequence"{(*emit_constructor_arguments:*)| Pexp_sequence((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_sequence" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DBG221EC: let process_expression_desc__Pexp_ifthenelse x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_option x : option= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_ifthenelse((aexpression,aexpression,aoption):(expression*expression*option)):string = (process_generic_type_d "expression_desc" "Pexp_ifthenelse") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_ifthenelse:(*emit_constructor_arguments:*)| Pexp_ifthenelse((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_ifthenelse" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1);((*P4*)process_option (*emit_core_type_numbered*)option2)])
DBG22E:constructor_declaration_new: constructor:"Pexp_ifthenelse"{(*emit_constructor_arguments:*)| Pexp_ifthenelse((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_ifthenelse" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DBG221EC: let process_expression_desc__Pexp_array x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_array((alist):(list)):string = (process_generic_type_d "expression_desc" "Pexp_array") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_array:(*emit_constructor_arguments:*)| Pexp_array((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_array" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_array"{(*emit_constructor_arguments:*)| Pexp_array((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_array" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_expression_desc__Pexp_setfield x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_setfield((aexpression,alongident_loc,aexpression):(expression*longident_loc*expression)):string = (process_generic_type_d "expression_desc" "Pexp_setfield") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_setfield:(*emit_constructor_arguments:*)| Pexp_setfield((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_setfield" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])
DBG22E:constructor_declaration_new: constructor:"Pexp_setfield"{(*emit_constructor_arguments:*)| Pexp_setfield((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_setfield" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])}
DBG221EC: let process_expression_desc__Pexp_field x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_field((aexpression,alongident_loc):(expression*longident_loc)):string = (process_generic_type_d "expression_desc" "Pexp_field") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_field:(*emit_constructor_arguments:*)| Pexp_field((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_field" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_field"{(*emit_constructor_arguments:*)| Pexp_field((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_field" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])}
DBG221EC: let process_expression_desc__Pexp_record x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_option x : option= x
DBG22A:let process_list x : list= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_record((alist,aoption):(list*option)):string = (process_generic_type_d "expression_desc" "Pexp_record") ((*P5*)process_generic_type_list alist)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_record:(*emit_constructor_arguments:*)| Pexp_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_record" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_record"{(*emit_constructor_arguments:*)| Pexp_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_record" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_expression_desc__Pexp_variant x :string =match x with 
DBG22A:let process_label x : label= x
DBG22A:let process_option x : option= x
DBG22A:let process_label x : label= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_variant((alabel,aoption):(label*option)):string = (process_generic_type_d "expression_desc" "Pexp_variant") ((*P5*)process_generic_type_label alabel)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_variant:(*emit_constructor_arguments:*)| Pexp_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_variant" [((*P4*)process_label (*emit_core_type_numbered*)label0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_variant"{(*emit_constructor_arguments:*)| Pexp_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_variant" [((*P4*)process_label (*emit_core_type_numbered*)label0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_expression_desc__Pexp_construct x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_option x : option= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_construct((alongident_loc,aoption):(longident_loc*option)):string = (process_generic_type_d "expression_desc" "Pexp_construct") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_construct:(*emit_constructor_arguments:*)| Pexp_construct((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_construct" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_construct"{(*emit_constructor_arguments:*)| Pexp_construct((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_construct" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_expression_desc__Pexp_tuple x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_tuple((alist):(list)):string = (process_generic_type_d "expression_desc" "Pexp_tuple") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_tuple:(*emit_constructor_arguments:*)| Pexp_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_tuple"{(*emit_constructor_arguments:*)| Pexp_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_expression_desc__Pexp_try x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_cases x : cases= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_cases x : cases= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_try((aexpression,acases):(expression*cases)):string = (process_generic_type_d "expression_desc" "Pexp_try") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_cases acases))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_try:(*emit_constructor_arguments:*)| Pexp_try((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_try" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_cases (*emit_core_type_numbered*)cases1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_try"{(*emit_constructor_arguments:*)| Pexp_try((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_try" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_cases (*emit_core_type_numbered*)cases1)])}
DBG221EC: let process_expression_desc__Pexp_match x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_cases x : cases= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_cases x : cases= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_match((aexpression,acases):(expression*cases)):string = (process_generic_type_d "expression_desc" "Pexp_match") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_cases acases))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_match:(*emit_constructor_arguments:*)| Pexp_match((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_match" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_cases (*emit_core_type_numbered*)cases1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_match"{(*emit_constructor_arguments:*)| Pexp_match((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_match" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_cases (*emit_core_type_numbered*)cases1)])}
DBG221EC: let process_expression_desc__Pexp_apply x :string =match x with 
DBG22A:let process_expression x : expression= x
DBG22A:let process_list x : list= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_apply((aexpression,alist):(expression*list)):string = (process_generic_type_d "expression_desc" "Pexp_apply") ((*P5*)process_generic_type_expression aexpression)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_apply:(*emit_constructor_arguments:*)| Pexp_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_apply" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Pexp_apply"{(*emit_constructor_arguments:*)| Pexp_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_apply" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_expression_desc__Pexp_fun x :string =match x with 
DBG22A:let process_arg_label x : arg_label= x
DBG22A:let process_option x : option= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_arg_label x : arg_label= x
DBG22A:let process_option x : option= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_fun((aarg_label,aoption,apattern,aexpression):(arg_label*option*pattern*expression)):string = (process_generic_type_d "expression_desc" "Pexp_fun") ((*P5*)process_generic_type_arg_label aarg_label)((*P5*)process_generic_type_option aoption)((*P5*)process_generic_type_pattern apattern)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_fun:(*emit_constructor_arguments:*)| Pexp_fun((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression3) -> ((*P5*)process_generic_type "expression_desc" "Pexp_fun" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_pattern (*emit_core_type_numbered*)pattern2);((*P4*)process_expression (*emit_core_type_numbered*)expression3)])
DBG22E:constructor_declaration_new: constructor:"Pexp_fun"{(*emit_constructor_arguments:*)| Pexp_fun((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression3) -> ((*P5*)process_generic_type "expression_desc" "Pexp_fun" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_pattern (*emit_core_type_numbered*)pattern2);((*P4*)process_expression (*emit_core_type_numbered*)expression3)])}
DBG221EC: let process_expression_desc__Pexp_function x :string =match x with 
DBG22A:let process_cases x : cases= x
DBG22A:let process_cases x : cases= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_function((acases):(cases)):string = (process_generic_type_d "expression_desc" "Pexp_function") ((*P5*)process_generic_type_cases acases))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_function:(*emit_constructor_arguments:*)| Pexp_function((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_function" [((*P4*)process_cases (*emit_core_type_numbered*)cases0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_function"{(*emit_constructor_arguments:*)| Pexp_function((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_function" [((*P4*)process_cases (*emit_core_type_numbered*)cases0)])}
DBG221EC: let process_expression_desc__Pexp_let x :string =match x with 
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_expression x : expression= x
DBG22A:let process_rec_flag x : rec_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_expression x : expression= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_let((arec_flag,alist,aexpression):(rec_flag*list*expression)):string = (process_generic_type_d "expression_desc" "Pexp_let") ((*P5*)process_generic_type_rec_flag arec_flag)((*P5*)process_generic_type_list alist)((*P5*)process_generic_type_expression aexpression))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_let:(*emit_constructor_arguments:*)| Pexp_let((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_let" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])
DBG22E:constructor_declaration_new: constructor:"Pexp_let"{(*emit_constructor_arguments:*)| Pexp_let((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_let" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])}
DBG221EC: let process_expression_desc__Pexp_constant x :string =match x with 
DBG22A:let process_constant x : constant= x
DBG22A:let process_constant x : constant= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_constant((aconstant):(constant)):string = (process_generic_type_d "expression_desc" "Pexp_constant") ((*P5*)process_generic_type_constant aconstant))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_constant:(*emit_constructor_arguments:*)| Pexp_constant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_constant" [((*P4*)process_constant (*emit_core_type_numbered*)constant0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_constant"{(*emit_constructor_arguments:*)| Pexp_constant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_constant" [((*P4*)process_constant (*emit_core_type_numbered*)constant0)])}
DBG221EC: let process_expression_desc__Pexp_ident x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_expression_desc__Pexp_ident((alongident_loc):(longident_loc)):string = (process_generic_type_d "expression_desc" "Pexp_ident") ((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:expression_desc;Pexp_ident:(*emit_constructor_arguments:*)| Pexp_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])
DBG22E:constructor_declaration_new: constructor:"Pexp_ident"{(*emit_constructor_arguments:*)| Pexp_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DBG221EC: let process_pattern_desc__Ppat_open x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_pattern x : pattern= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_open((alongident_loc,apattern):(longident_loc*pattern)):string = (process_generic_type_d "pattern_desc" "Ppat_open") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_pattern apattern))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_open:(*emit_constructor_arguments:*)| Ppat_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_open" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_pattern (*emit_core_type_numbered*)pattern1)])
DBG22E:constructor_declaration_new: constructor:"Ppat_open"{(*emit_constructor_arguments:*)| Ppat_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_open" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_pattern (*emit_core_type_numbered*)pattern1)])}
DBG221EC: let process_pattern_desc__Ppat_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_extension((aextension):(extension)):string = (process_generic_type_d "pattern_desc" "Ppat_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_extension:(*emit_constructor_arguments:*)| Ppat_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_extension"{(*emit_constructor_arguments:*)| Ppat_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_pattern_desc__Ppat_exception x :string =match x with 
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_pattern x : pattern= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_exception((apattern):(pattern)):string = (process_generic_type_d "pattern_desc" "Ppat_exception") ((*P5*)process_generic_type_pattern apattern))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_exception:(*emit_constructor_arguments:*)| Ppat_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_exception" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_exception"{(*emit_constructor_arguments:*)| Ppat_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_exception" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0)])}
DBG221EC: let process_pattern_desc__Ppat_unpack x :string =match x with 
DBG22A:let process_loc x : loc= x
DBG22A:let process_loc x : loc= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_unpack((aloc):(loc)):string = (process_generic_type_d "pattern_desc" "Ppat_unpack") ((*P5*)process_generic_type_loc aloc))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_unpack:(*emit_constructor_arguments:*)| Ppat_unpack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_unpack" [((*P4*)process_loc (*emit_core_type_numbered*)loc0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_unpack"{(*emit_constructor_arguments:*)| Ppat_unpack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_unpack" [((*P4*)process_loc (*emit_core_type_numbered*)loc0)])}
DBG221EC: let process_pattern_desc__Ppat_lazy x :string =match x with 
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_pattern x : pattern= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_lazy((apattern):(pattern)):string = (process_generic_type_d "pattern_desc" "Ppat_lazy") ((*P5*)process_generic_type_pattern apattern))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_lazy:(*emit_constructor_arguments:*)| Ppat_lazy((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_lazy" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_lazy"{(*emit_constructor_arguments:*)| Ppat_lazy((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_lazy" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0)])}
DBG221EC: let process_pattern_desc__Ppat_type x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_type((alongident_loc):(longident_loc)):string = (process_generic_type_d "pattern_desc" "Ppat_type") ((*P5*)process_generic_type_longident_loc alongident_loc))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_type:(*emit_constructor_arguments:*)| Ppat_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_type" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_type"{(*emit_constructor_arguments:*)| Ppat_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_type" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DBG221EC: let process_pattern_desc__Ppat_constraint x :string =match x with 
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_constraint((apattern,acore_type):(pattern*core_type)):string = (process_generic_type_d "pattern_desc" "Ppat_constraint") ((*P5*)process_generic_type_pattern apattern)((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_constraint:(*emit_constructor_arguments:*)| Ppat_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_constraint" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])
DBG22E:constructor_declaration_new: constructor:"Ppat_constraint"{(*emit_constructor_arguments:*)| Ppat_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_constraint" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])}
DBG221EC: let process_pattern_desc__Ppat_or x :string =match x with 
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_pattern x : pattern= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_or((apattern,apattern):(pattern*pattern)):string = (process_generic_type_d "pattern_desc" "Ppat_or") ((*P5*)process_generic_type_pattern apattern)((*P5*)process_generic_type_pattern apattern))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_or:(*emit_constructor_arguments:*)| Ppat_or((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_or" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_pattern (*emit_core_type_numbered*)pattern1)])
DBG22E:constructor_declaration_new: constructor:"Ppat_or"{(*emit_constructor_arguments:*)| Ppat_or((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_or" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_pattern (*emit_core_type_numbered*)pattern1)])}
DBG221EC: let process_pattern_desc__Ppat_array x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_array((alist):(list)):string = (process_generic_type_d "pattern_desc" "Ppat_array") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_array:(*emit_constructor_arguments:*)| Ppat_array((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_array" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_array"{(*emit_constructor_arguments:*)| Ppat_array((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_array" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_pattern_desc__Ppat_record x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_closed_flag x : closed_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_closed_flag x : closed_flag= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_record((alist,aclosed_flag):(list*closed_flag)):string = (process_generic_type_d "pattern_desc" "Ppat_record") ((*P5*)process_generic_type_list alist)((*P5*)process_generic_type_closed_flag aclosed_flag))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_record:(*emit_constructor_arguments:*)| Ppat_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_record" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1)])
DBG22E:constructor_declaration_new: constructor:"Ppat_record"{(*emit_constructor_arguments:*)| Ppat_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_record" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1)])}
DBG221EC: let process_pattern_desc__Ppat_variant x :string =match x with 
DBG22A:let process_label x : label= x
DBG22A:let process_option x : option= x
DBG22A:let process_label x : label= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_variant((alabel,aoption):(label*option)):string = (process_generic_type_d "pattern_desc" "Ppat_variant") ((*P5*)process_generic_type_label alabel)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_variant:(*emit_constructor_arguments:*)| Ppat_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_variant" [((*P4*)process_label (*emit_core_type_numbered*)label0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Ppat_variant"{(*emit_constructor_arguments:*)| Ppat_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_variant" [((*P4*)process_label (*emit_core_type_numbered*)label0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_pattern_desc__Ppat_construct x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_option x : option= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_construct((alongident_loc,aoption):(longident_loc*option)):string = (process_generic_type_d "pattern_desc" "Ppat_construct") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_construct:(*emit_constructor_arguments:*)| Ppat_construct((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_construct" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Ppat_construct"{(*emit_constructor_arguments:*)| Ppat_construct((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_construct" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_pattern_desc__Ppat_tuple x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_tuple((alist):(list)):string = (process_generic_type_d "pattern_desc" "Ppat_tuple") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_tuple:(*emit_constructor_arguments:*)| Ppat_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_tuple"{(*emit_constructor_arguments:*)| Ppat_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_pattern_desc__Ppat_interval x :string =match x with 
DBG22A:let process_constant x : constant= x
DBG22A:let process_constant x : constant= x
DBG22A:let process_constant x : constant= x
DBG22A:let process_constant x : constant= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_interval((aconstant,aconstant):(constant*constant)):string = (process_generic_type_d "pattern_desc" "Ppat_interval") ((*P5*)process_generic_type_constant aconstant)((*P5*)process_generic_type_constant aconstant))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_interval:(*emit_constructor_arguments:*)| Ppat_interval((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_interval" [((*P4*)process_constant (*emit_core_type_numbered*)constant0);((*P4*)process_constant (*emit_core_type_numbered*)constant1)])
DBG22E:constructor_declaration_new: constructor:"Ppat_interval"{(*emit_constructor_arguments:*)| Ppat_interval((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_interval" [((*P4*)process_constant (*emit_core_type_numbered*)constant0);((*P4*)process_constant (*emit_core_type_numbered*)constant1)])}
DBG221EC: let process_pattern_desc__Ppat_constant x :string =match x with 
DBG22A:let process_constant x : constant= x
DBG22A:let process_constant x : constant= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_constant((aconstant):(constant)):string = (process_generic_type_d "pattern_desc" "Ppat_constant") ((*P5*)process_generic_type_constant aconstant))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_constant:(*emit_constructor_arguments:*)| Ppat_constant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_constant" [((*P4*)process_constant (*emit_core_type_numbered*)constant0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_constant"{(*emit_constructor_arguments:*)| Ppat_constant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_constant" [((*P4*)process_constant (*emit_core_type_numbered*)constant0)])}
DBG221EC: let process_pattern_desc__Ppat_alias x :string =match x with 
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_loc x : loc= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_loc x : loc= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_alias((apattern,aloc):(pattern*loc)):string = (process_generic_type_d "pattern_desc" "Ppat_alias") ((*P5*)process_generic_type_pattern apattern)((*P5*)process_generic_type_loc aloc))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_alias:(*emit_constructor_arguments:*)| Ppat_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_alias" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_loc (*emit_core_type_numbered*)loc1)])
DBG22E:constructor_declaration_new: constructor:"Ppat_alias"{(*emit_constructor_arguments:*)| Ppat_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_alias" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_loc (*emit_core_type_numbered*)loc1)])}
DBG221EC: let process_pattern_desc__Ppat_var x :string =match x with 
DBG22A:let process_loc x : loc= x
DBG22A:let process_loc x : loc= x
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_var((aloc):(loc)):string = (process_generic_type_d "pattern_desc" "Ppat_var") ((*P5*)process_generic_type_loc aloc))
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_var:(*emit_constructor_arguments:*)| Ppat_var((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_var" [((*P4*)process_loc (*emit_core_type_numbered*)loc0)])
DBG22E:constructor_declaration_new: constructor:"Ppat_var"{(*emit_constructor_arguments:*)| Ppat_var((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_var" [((*P4*)process_loc (*emit_core_type_numbered*)loc0)])}
DBG221EC: let process_pattern_desc__Ppat_any x :string =match x with 
DBG22EB:let (*P1*)process_types_pattern_desc__Ppat_any(():()):string = (process_generic_type_d "pattern_desc" "Ppat_any") )
DBG222EC:emit_constructor_arguments:pattern_desc;Ppat_any:(*emit_constructor_arguments:*)| Ppat_any((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_any" [])
DBG22E:constructor_declaration_new: constructor:"Ppat_any"{(*emit_constructor_arguments:*)| Ppat_any((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_any" [])}
DBG221EC: let process_object_field_desc__Oinherit x :string =match x with 
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_object_field_desc__Oinherit((acore_type):(core_type)):string = (process_generic_type_d "object_field_desc" "Oinherit") ((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:object_field_desc;Oinherit:(*emit_constructor_arguments:*)| Oinherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "object_field_desc" "Oinherit" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])
DBG22E:constructor_declaration_new: constructor:"Oinherit"{(*emit_constructor_arguments:*)| Oinherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "object_field_desc" "Oinherit" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])}
DBG221EC: let process_object_field_desc__Otag x :string =match x with 
DBG22A:let process_loc x : loc= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_loc x : loc= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_object_field_desc__Otag((aloc,acore_type):(loc*core_type)):string = (process_generic_type_d "object_field_desc" "Otag") ((*P5*)process_generic_type_loc aloc)((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:object_field_desc;Otag:(*emit_constructor_arguments:*)| Otag((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "object_field_desc" "Otag" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])
DBG22E:constructor_declaration_new: constructor:"Otag"{(*emit_constructor_arguments:*)| Otag((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "object_field_desc" "Otag" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])}
DBG221EC: let process_row_field_desc__Rinherit x :string =match x with 
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_row_field_desc__Rinherit((acore_type):(core_type)):string = (process_generic_type_d "row_field_desc" "Rinherit") ((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:row_field_desc;Rinherit:(*emit_constructor_arguments:*)| Rinherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "row_field_desc" "Rinherit" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])
DBG22E:constructor_declaration_new: constructor:"Rinherit"{(*emit_constructor_arguments:*)| Rinherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "row_field_desc" "Rinherit" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])}
DBG221EC: let process_row_field_desc__Rtag x :string =match x with 
DBG22A:let process_loc x : loc= x
DBG22A:let process_bool x : bool= x
DBG22A:let process_list x : list= x
DBG22A:let process_loc x : loc= x
DBG22A:let process_bool x : bool= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_row_field_desc__Rtag((aloc,abool,alist):(loc*bool*list)):string = (process_generic_type_d "row_field_desc" "Rtag") ((*P5*)process_generic_type_loc aloc)((*P5*)process_generic_type_bool abool)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:row_field_desc;Rtag:(*emit_constructor_arguments:*)| Rtag((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)bool1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list2) -> ((*P5*)process_generic_type "row_field_desc" "Rtag" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_bool (*emit_core_type_numbered*)bool1);((*P4*)process_list (*emit_core_type_numbered*)list2)])
DBG22E:constructor_declaration_new: constructor:"Rtag"{(*emit_constructor_arguments:*)| Rtag((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)bool1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list2) -> ((*P5*)process_generic_type "row_field_desc" "Rtag" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_bool (*emit_core_type_numbered*)bool1);((*P4*)process_list (*emit_core_type_numbered*)list2)])}
DBG221EC: let process_core_type_desc__Ptyp_extension x :string =match x with 
DBG22A:let process_extension x : extension= x
DBG22A:let process_extension x : extension= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_extension((aextension):(extension)):string = (process_generic_type_d "core_type_desc" "Ptyp_extension") ((*P5*)process_generic_type_extension aextension))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_extension:(*emit_constructor_arguments:*)| Ptyp_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_extension"{(*emit_constructor_arguments:*)| Ptyp_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DBG221EC: let process_core_type_desc__Ptyp_package x :string =match x with 
DBG22A:let process_package_type x : package_type= x
DBG22A:let process_package_type x : package_type= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_package((apackage_type):(package_type)):string = (process_generic_type_d "core_type_desc" "Ptyp_package") ((*P5*)process_generic_type_package_type apackage_type))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_package:(*emit_constructor_arguments:*)| Ptyp_package((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)package_type0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_package" [((*P4*)process_package_type (*emit_core_type_numbered*)package_type0)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_package"{(*emit_constructor_arguments:*)| Ptyp_package((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)package_type0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_package" [((*P4*)process_package_type (*emit_core_type_numbered*)package_type0)])}
DBG221EC: let process_core_type_desc__Ptyp_poly x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_list x : list= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_poly((alist,acore_type):(list*core_type)):string = (process_generic_type_d "core_type_desc" "Ptyp_poly") ((*P5*)process_generic_type_list alist)((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_poly:(*emit_constructor_arguments:*)| Ptyp_poly((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_poly" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_poly"{(*emit_constructor_arguments:*)| Ptyp_poly((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_poly" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])}
DBG221EC: let process_core_type_desc__Ptyp_variant x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_closed_flag x : closed_flag= x
DBG22A:let process_option x : option= x
DBG22A:let process_list x : list= x
DBG22A:let process_closed_flag x : closed_flag= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_variant((alist,aclosed_flag,aoption):(list*closed_flag*option)):string = (process_generic_type_d "core_type_desc" "Ptyp_variant") ((*P5*)process_generic_type_list alist)((*P5*)process_generic_type_closed_flag aclosed_flag)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_variant:(*emit_constructor_arguments:*)| Ptyp_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_variant" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1);((*P4*)process_option (*emit_core_type_numbered*)option2)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_variant"{(*emit_constructor_arguments:*)| Ptyp_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_variant" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DBG221EC: let process_core_type_desc__Ptyp_alias x :string =match x with 
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_string x : string= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_string x : string= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_alias((acore_type,astring):(core_type*string)):string = (process_generic_type_d "core_type_desc" "Ptyp_alias") ((*P5*)process_generic_type_core_type acore_type)((*P5*)process_generic_type_string astring))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_alias:(*emit_constructor_arguments:*)| Ptyp_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_alias" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0);((*P4*)process_string (*emit_core_type_numbered*)string1)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_alias"{(*emit_constructor_arguments:*)| Ptyp_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_alias" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0);((*P4*)process_string (*emit_core_type_numbered*)string1)])}
DBG221EC: let process_core_type_desc__Ptyp_class x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_list x : list= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_class((alongident_loc,alist):(longident_loc*list)):string = (process_generic_type_d "core_type_desc" "Ptyp_class") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_class:(*emit_constructor_arguments:*)| Ptyp_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_class" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_class"{(*emit_constructor_arguments:*)| Ptyp_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_class" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_core_type_desc__Ptyp_object x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_closed_flag x : closed_flag= x
DBG22A:let process_list x : list= x
DBG22A:let process_closed_flag x : closed_flag= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_object((alist,aclosed_flag):(list*closed_flag)):string = (process_generic_type_d "core_type_desc" "Ptyp_object") ((*P5*)process_generic_type_list alist)((*P5*)process_generic_type_closed_flag aclosed_flag))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_object:(*emit_constructor_arguments:*)| Ptyp_object((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_object" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_object"{(*emit_constructor_arguments:*)| Ptyp_object((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_object" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1)])}
DBG221EC: let process_core_type_desc__Ptyp_constr x :string =match x with 
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_list x : list= x
DBG22A:let process_longident_loc x : longident_loc= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_constr((alongident_loc,alist):(longident_loc*list)):string = (process_generic_type_d "core_type_desc" "Ptyp_constr") ((*P5*)process_generic_type_longident_loc alongident_loc)((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_constr:(*emit_constructor_arguments:*)| Ptyp_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_constr"{(*emit_constructor_arguments:*)| Ptyp_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DBG221EC: let process_core_type_desc__Ptyp_tuple x :string =match x with 
DBG22A:let process_list x : list= x
DBG22A:let process_list x : list= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_tuple((alist):(list)):string = (process_generic_type_d "core_type_desc" "Ptyp_tuple") ((*P5*)process_generic_type_list alist))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_tuple:(*emit_constructor_arguments:*)| Ptyp_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_tuple"{(*emit_constructor_arguments:*)| Ptyp_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DBG221EC: let process_core_type_desc__Ptyp_arrow x :string =match x with 
DBG22A:let process_arg_label x : arg_label= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_arg_label x : arg_label= x
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_arrow((aarg_label,acore_type,acore_type):(arg_label*core_type*core_type)):string = (process_generic_type_d "core_type_desc" "Ptyp_arrow") ((*P5*)process_generic_type_arg_label aarg_label)((*P5*)process_generic_type_core_type acore_type)((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_arrow:(*emit_constructor_arguments:*)| Ptyp_arrow((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type2) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_arrow" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1);((*P4*)process_core_type (*emit_core_type_numbered*)core_type2)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_arrow"{(*emit_constructor_arguments:*)| Ptyp_arrow((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type2) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_arrow" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1);((*P4*)process_core_type (*emit_core_type_numbered*)core_type2)])}
DBG221EC: let process_core_type_desc__Ptyp_var x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_string x : string= x
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_var((astring):(string)):string = (process_generic_type_d "core_type_desc" "Ptyp_var") ((*P5*)process_generic_type_string astring))
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_var:(*emit_constructor_arguments:*)| Ptyp_var((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_var" [((*P4*)process_string (*emit_core_type_numbered*)string0)])
DBG22E:constructor_declaration_new: constructor:"Ptyp_var"{(*emit_constructor_arguments:*)| Ptyp_var((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_var" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DBG221EC: let process_core_type_desc__Ptyp_any x :string =match x with 
DBG22EB:let (*P1*)process_types_core_type_desc__Ptyp_any(():()):string = (process_generic_type_d "core_type_desc" "Ptyp_any") )
DBG222EC:emit_constructor_arguments:core_type_desc;Ptyp_any:(*emit_constructor_arguments:*)| Ptyp_any((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_any" [])
DBG22E:constructor_declaration_new: constructor:"Ptyp_any"{(*emit_constructor_arguments:*)| Ptyp_any((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_any" [])}
DBG221EC: let process_payload__PPat x :string =match x with 
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_option x : option= x
DBG22A:let process_pattern x : pattern= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_payload__PPat((apattern,aoption):(pattern*option)):string = (process_generic_type_d "payload" "PPat") ((*P5*)process_generic_type_pattern apattern)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:payload;PPat:(*emit_constructor_arguments:*)| PPat((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "payload" "PPat" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"PPat"{(*emit_constructor_arguments:*)| PPat((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "payload" "PPat" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_payload__PTyp x :string =match x with 
DBG22A:let process_core_type x : core_type= x
DBG22A:let process_core_type x : core_type= x
DBG22EB:let (*P1*)process_types_payload__PTyp((acore_type):(core_type)):string = (process_generic_type_d "payload" "PTyp") ((*P5*)process_generic_type_core_type acore_type))
DBG222EC:emit_constructor_arguments:payload;PTyp:(*emit_constructor_arguments:*)| PTyp((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "payload" "PTyp" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])
DBG22E:constructor_declaration_new: constructor:"PTyp"{(*emit_constructor_arguments:*)| PTyp((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "payload" "PTyp" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])}
DBG221EC: let process_payload__PSig x :string =match x with 
DBG22A:let process_signature x : signature= x
DBG22A:let process_signature x : signature= x
DBG22EB:let (*P1*)process_types_payload__PSig((asignature):(signature)):string = (process_generic_type_d "payload" "PSig") ((*P5*)process_generic_type_signature asignature))
DBG222EC:emit_constructor_arguments:payload;PSig:(*emit_constructor_arguments:*)| PSig((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)signature0) -> ((*P5*)process_generic_type "payload" "PSig" [((*P4*)process_signature (*emit_core_type_numbered*)signature0)])
DBG22E:constructor_declaration_new: constructor:"PSig"{(*emit_constructor_arguments:*)| PSig((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)signature0) -> ((*P5*)process_generic_type "payload" "PSig" [((*P4*)process_signature (*emit_core_type_numbered*)signature0)])}
DBG221EC: let process_payload__PStr x :string =match x with 
DBG22A:let process_structure x : structure= x
DBG22A:let process_structure x : structure= x
DBG22EB:let (*P1*)process_types_payload__PStr((astructure):(structure)):string = (process_generic_type_d "payload" "PStr") ((*P5*)process_generic_type_structure astructure))
DBG222EC:emit_constructor_arguments:payload;PStr:(*emit_constructor_arguments:*)| PStr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "payload" "PStr" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])
DBG22E:constructor_declaration_new: constructor:"PStr"{(*emit_constructor_arguments:*)| PStr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "payload" "PStr" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])}
DBG221EC: let process_constant__Pconst_float x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_option x : option= x
DBG22A:let process_string x : string= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_constant__Pconst_float((astring,aoption):(string*option)):string = (process_generic_type_d "constant" "Pconst_float") ((*P5*)process_generic_type_string astring)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:constant;Pconst_float:(*emit_constructor_arguments:*)| Pconst_float((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "constant" "Pconst_float" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Pconst_float"{(*emit_constructor_arguments:*)| Pconst_float((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "constant" "Pconst_float" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_constant__Pconst_string x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_location x : location= x
DBG22A:let process_option x : option= x
DBG22A:let process_string x : string= x
DBG22A:let process_location x : location= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_constant__Pconst_string((astring,alocation,aoption):(string*location*option)):string = (process_generic_type_d "constant" "Pconst_string") ((*P5*)process_generic_type_string astring)((*P5*)process_generic_type_location alocation)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:constant;Pconst_string:(*emit_constructor_arguments:*)| Pconst_string((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)location1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "constant" "Pconst_string" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_location (*emit_core_type_numbered*)location1);((*P4*)process_option (*emit_core_type_numbered*)option2)])
DBG22E:constructor_declaration_new: constructor:"Pconst_string"{(*emit_constructor_arguments:*)| Pconst_string((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)location1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "constant" "Pconst_string" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_location (*emit_core_type_numbered*)location1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DBG221EC: let process_constant__Pconst_char x :string =match x with 
DBG22A:let process_char x : char= x
DBG22A:let process_char x : char= x
DBG22EB:let (*P1*)process_types_constant__Pconst_char((achar):(char)):string = (process_generic_type_d "constant" "Pconst_char") ((*P5*)process_generic_type_char achar))
DBG222EC:emit_constructor_arguments:constant;Pconst_char:(*emit_constructor_arguments:*)| Pconst_char((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)char0) -> ((*P5*)process_generic_type "constant" "Pconst_char" [((*P4*)process_char (*emit_core_type_numbered*)char0)])
DBG22E:constructor_declaration_new: constructor:"Pconst_char"{(*emit_constructor_arguments:*)| Pconst_char((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)char0) -> ((*P5*)process_generic_type "constant" "Pconst_char" [((*P4*)process_char (*emit_core_type_numbered*)char0)])}
DBG221EC: let process_constant__Pconst_integer x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_option x : option= x
DBG22A:let process_string x : string= x
DBG22A:let process_option x : option= x
DBG22EB:let (*P1*)process_types_constant__Pconst_integer((astring,aoption):(string*option)):string = (process_generic_type_d "constant" "Pconst_integer") ((*P5*)process_generic_type_string astring)((*P5*)process_generic_type_option aoption))
DBG222EC:emit_constructor_arguments:constant;Pconst_integer:(*emit_constructor_arguments:*)| Pconst_integer((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "constant" "Pconst_integer" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])
DBG22E:constructor_declaration_new: constructor:"Pconst_integer"{(*emit_constructor_arguments:*)| Pconst_integer((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "constant" "Pconst_integer" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DBG221EC: let process_injectivity__NoInjectivity x :string =match x with 
DBG22EB:let (*P1*)process_types_injectivity__NoInjectivity(():()):string = (process_generic_type_d "injectivity" "NoInjectivity") )
DBG222EC:emit_constructor_arguments:injectivity;NoInjectivity:(*emit_constructor_arguments:*)| NoInjectivity((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "injectivity" "NoInjectivity" [])
DBG22E:constructor_declaration_new: constructor:"NoInjectivity"{(*emit_constructor_arguments:*)| NoInjectivity((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "injectivity" "NoInjectivity" [])}
DBG221EC: let process_injectivity__Injective x :string =match x with 
DBG22EB:let (*P1*)process_types_injectivity__Injective(():()):string = (process_generic_type_d "injectivity" "Injective") )
DBG222EC:emit_constructor_arguments:injectivity;Injective:(*emit_constructor_arguments:*)| Injective((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "injectivity" "Injective" [])
DBG22E:constructor_declaration_new: constructor:"Injective"{(*emit_constructor_arguments:*)| Injective((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "injectivity" "Injective" [])}
DBG221EC: let process_variance__NoVariance x :string =match x with 
DBG22EB:let (*P1*)process_types_variance__NoVariance(():()):string = (process_generic_type_d "variance" "NoVariance") )
DBG222EC:emit_constructor_arguments:variance;NoVariance:(*emit_constructor_arguments:*)| NoVariance((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "NoVariance" [])
DBG22E:constructor_declaration_new: constructor:"NoVariance"{(*emit_constructor_arguments:*)| NoVariance((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "NoVariance" [])}
DBG221EC: let process_variance__Contravariant x :string =match x with 
DBG22EB:let (*P1*)process_types_variance__Contravariant(():()):string = (process_generic_type_d "variance" "Contravariant") )
DBG222EC:emit_constructor_arguments:variance;Contravariant:(*emit_constructor_arguments:*)| Contravariant((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "Contravariant" [])
DBG22E:constructor_declaration_new: constructor:"Contravariant"{(*emit_constructor_arguments:*)| Contravariant((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "Contravariant" [])}
DBG221EC: let process_variance__Covariant x :string =match x with 
DBG22EB:let (*P1*)process_types_variance__Covariant(():()):string = (process_generic_type_d "variance" "Covariant") )
DBG222EC:emit_constructor_arguments:variance;Covariant:(*emit_constructor_arguments:*)| Covariant((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "Covariant" [])
DBG22E:constructor_declaration_new: constructor:"Covariant"{(*emit_constructor_arguments:*)| Covariant((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "Covariant" [])}
DBG221EC: let process_arg_label__Optional x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_string x : string= x
DBG22EB:let (*P1*)process_types_arg_label__Optional((astring):(string)):string = (process_generic_type_d "arg_label" "Optional") ((*P5*)process_generic_type_string astring))
DBG222EC:emit_constructor_arguments:arg_label;Optional:(*emit_constructor_arguments:*)| Optional((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "arg_label" "Optional" [((*P4*)process_string (*emit_core_type_numbered*)string0)])
DBG22E:constructor_declaration_new: constructor:"Optional"{(*emit_constructor_arguments:*)| Optional((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "arg_label" "Optional" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DBG221EC: let process_arg_label__Labelled x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_string x : string= x
DBG22EB:let (*P1*)process_types_arg_label__Labelled((astring):(string)):string = (process_generic_type_d "arg_label" "Labelled") ((*P5*)process_generic_type_string astring))
DBG222EC:emit_constructor_arguments:arg_label;Labelled:(*emit_constructor_arguments:*)| Labelled((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "arg_label" "Labelled" [((*P4*)process_string (*emit_core_type_numbered*)string0)])
DBG22E:constructor_declaration_new: constructor:"Labelled"{(*emit_constructor_arguments:*)| Labelled((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "arg_label" "Labelled" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DBG221EC: let process_arg_label__Nolabel x :string =match x with 
DBG22EB:let (*P1*)process_types_arg_label__Nolabel(():()):string = (process_generic_type_d "arg_label" "Nolabel") )
DBG222EC:emit_constructor_arguments:arg_label;Nolabel:(*emit_constructor_arguments:*)| Nolabel((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "arg_label" "Nolabel" [])
DBG22E:constructor_declaration_new: constructor:"Nolabel"{(*emit_constructor_arguments:*)| Nolabel((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "arg_label" "Nolabel" [])}
DBG221EC: let process_closed_flag__Open x :string =match x with 
DBG22EB:let (*P1*)process_types_closed_flag__Open(():()):string = (process_generic_type_d "closed_flag" "Open") )
DBG222EC:emit_constructor_arguments:closed_flag;Open:(*emit_constructor_arguments:*)| Open((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "closed_flag" "Open" [])
DBG22E:constructor_declaration_new: constructor:"Open"{(*emit_constructor_arguments:*)| Open((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "closed_flag" "Open" [])}
DBG221EC: let process_closed_flag__Closed x :string =match x with 
DBG22EB:let (*P1*)process_types_closed_flag__Closed(():()):string = (process_generic_type_d "closed_flag" "Closed") )
DBG222EC:emit_constructor_arguments:closed_flag;Closed:(*emit_constructor_arguments:*)| Closed((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "closed_flag" "Closed" [])
DBG22E:constructor_declaration_new: constructor:"Closed"{(*emit_constructor_arguments:*)| Closed((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "closed_flag" "Closed" [])}
DBG221EC: let process_override_flag__Fresh x :string =match x with 
DBG22EB:let (*P1*)process_types_override_flag__Fresh(():()):string = (process_generic_type_d "override_flag" "Fresh") )
DBG222EC:emit_constructor_arguments:override_flag;Fresh:(*emit_constructor_arguments:*)| Fresh((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "override_flag" "Fresh" [])
DBG22E:constructor_declaration_new: constructor:"Fresh"{(*emit_constructor_arguments:*)| Fresh((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "override_flag" "Fresh" [])}
DBG221EC: let process_override_flag__Override x :string =match x with 
DBG22EB:let (*P1*)process_types_override_flag__Override(():()):string = (process_generic_type_d "override_flag" "Override") )
DBG222EC:emit_constructor_arguments:override_flag;Override:(*emit_constructor_arguments:*)| Override((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "override_flag" "Override" [])
DBG22E:constructor_declaration_new: constructor:"Override"{(*emit_constructor_arguments:*)| Override((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "override_flag" "Override" [])}
DBG221EC: let process_virtual_flag__Concrete x :string =match x with 
DBG22EB:let (*P1*)process_types_virtual_flag__Concrete(():()):string = (process_generic_type_d "virtual_flag" "Concrete") )
DBG222EC:emit_constructor_arguments:virtual_flag;Concrete:(*emit_constructor_arguments:*)| Concrete((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "virtual_flag" "Concrete" [])
DBG22E:constructor_declaration_new: constructor:"Concrete"{(*emit_constructor_arguments:*)| Concrete((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "virtual_flag" "Concrete" [])}
DBG221EC: let process_virtual_flag__Virtual x :string =match x with 
DBG22EB:let (*P1*)process_types_virtual_flag__Virtual(():()):string = (process_generic_type_d "virtual_flag" "Virtual") )
DBG222EC:emit_constructor_arguments:virtual_flag;Virtual:(*emit_constructor_arguments:*)| Virtual((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "virtual_flag" "Virtual" [])
DBG22E:constructor_declaration_new: constructor:"Virtual"{(*emit_constructor_arguments:*)| Virtual((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "virtual_flag" "Virtual" [])}
DBG221EC: let process_mutable_flag__Mutable x :string =match x with 
DBG22EB:let (*P1*)process_types_mutable_flag__Mutable(():()):string = (process_generic_type_d "mutable_flag" "Mutable") )
DBG222EC:emit_constructor_arguments:mutable_flag;Mutable:(*emit_constructor_arguments:*)| Mutable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "mutable_flag" "Mutable" [])
DBG22E:constructor_declaration_new: constructor:"Mutable"{(*emit_constructor_arguments:*)| Mutable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "mutable_flag" "Mutable" [])}
DBG221EC: let process_mutable_flag__Immutable x :string =match x with 
DBG22EB:let (*P1*)process_types_mutable_flag__Immutable(():()):string = (process_generic_type_d "mutable_flag" "Immutable") )
DBG222EC:emit_constructor_arguments:mutable_flag;Immutable:(*emit_constructor_arguments:*)| Immutable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "mutable_flag" "Immutable" [])
DBG22E:constructor_declaration_new: constructor:"Immutable"{(*emit_constructor_arguments:*)| Immutable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "mutable_flag" "Immutable" [])}
DBG221EC: let process_private_flag__Public x :string =match x with 
DBG22EB:let (*P1*)process_types_private_flag__Public(():()):string = (process_generic_type_d "private_flag" "Public") )
DBG222EC:emit_constructor_arguments:private_flag;Public:(*emit_constructor_arguments:*)| Public((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "private_flag" "Public" [])
DBG22E:constructor_declaration_new: constructor:"Public"{(*emit_constructor_arguments:*)| Public((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "private_flag" "Public" [])}
DBG221EC: let process_private_flag__Private x :string =match x with 
DBG22EB:let (*P1*)process_types_private_flag__Private(():()):string = (process_generic_type_d "private_flag" "Private") )
DBG222EC:emit_constructor_arguments:private_flag;Private:(*emit_constructor_arguments:*)| Private((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "private_flag" "Private" [])
DBG22E:constructor_declaration_new: constructor:"Private"{(*emit_constructor_arguments:*)| Private((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "private_flag" "Private" [])}
DBG221EC: let process_direction_flag__Downto x :string =match x with 
DBG22EB:let (*P1*)process_types_direction_flag__Downto(():()):string = (process_generic_type_d "direction_flag" "Downto") )
DBG222EC:emit_constructor_arguments:direction_flag;Downto:(*emit_constructor_arguments:*)| Downto((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "direction_flag" "Downto" [])
DBG22E:constructor_declaration_new: constructor:"Downto"{(*emit_constructor_arguments:*)| Downto((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "direction_flag" "Downto" [])}
DBG221EC: let process_direction_flag__Upto x :string =match x with 
DBG22EB:let (*P1*)process_types_direction_flag__Upto(():()):string = (process_generic_type_d "direction_flag" "Upto") )
DBG222EC:emit_constructor_arguments:direction_flag;Upto:(*emit_constructor_arguments:*)| Upto((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "direction_flag" "Upto" [])
DBG22E:constructor_declaration_new: constructor:"Upto"{(*emit_constructor_arguments:*)| Upto((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "direction_flag" "Upto" [])}
DBG221EC: let process_rec_flag__Recursive x :string =match x with 
DBG22EB:let (*P1*)process_types_rec_flag__Recursive(():()):string = (process_generic_type_d "rec_flag" "Recursive") )
DBG222EC:emit_constructor_arguments:rec_flag;Recursive:(*emit_constructor_arguments:*)| Recursive((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "rec_flag" "Recursive" [])
DBG22E:constructor_declaration_new: constructor:"Recursive"{(*emit_constructor_arguments:*)| Recursive((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "rec_flag" "Recursive" [])}
DBG221EC: let process_rec_flag__Nonrecursive x :string =match x with 
DBG22EB:let (*P1*)process_types_rec_flag__Nonrecursive(():()):string = (process_generic_type_d "rec_flag" "Nonrecursive") )
DBG222EC:emit_constructor_arguments:rec_flag;Nonrecursive:(*emit_constructor_arguments:*)| Nonrecursive((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "rec_flag" "Nonrecursive" [])
DBG22E:constructor_declaration_new: constructor:"Nonrecursive"{(*emit_constructor_arguments:*)| Nonrecursive((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "rec_flag" "Nonrecursive" [])}
DBG221EC: let process_longident__Lapply x :string =match x with 
DBG22A:let process_longident x : longident= x
DBG22A:let process_longident x : longident= x
DBG22A:let process_longident x : longident= x
DBG22A:let process_longident x : longident= x
DBG22EB:let (*P1*)process_types_longident__Lapply((alongident,alongident):(longident*longident)):string = (process_generic_type_d "longident" "Lapply") ((*P5*)process_generic_type_longident alongident)((*P5*)process_generic_type_longident alongident))
DBG222EC:emit_constructor_arguments:longident;Lapply:(*emit_constructor_arguments:*)| Lapply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident1) -> ((*P5*)process_generic_type "longident" "Lapply" [((*P4*)process_longident (*emit_core_type_numbered*)longident0);((*P4*)process_longident (*emit_core_type_numbered*)longident1)])
DBG22E:constructor_declaration_new: constructor:"Lapply"{(*emit_constructor_arguments:*)| Lapply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident1) -> ((*P5*)process_generic_type "longident" "Lapply" [((*P4*)process_longident (*emit_core_type_numbered*)longident0);((*P4*)process_longident (*emit_core_type_numbered*)longident1)])}
DBG221EC: let process_longident__Ldot x :string =match x with 
DBG22A:let process_longident x : longident= x
DBG22A:let process_string x : string= x
DBG22A:let process_longident x : longident= x
DBG22A:let process_string x : string= x
DBG22EB:let (*P1*)process_types_longident__Ldot((alongident,astring):(longident*string)):string = (process_generic_type_d "longident" "Ldot") ((*P5*)process_generic_type_longident alongident)((*P5*)process_generic_type_string astring))
DBG222EC:emit_constructor_arguments:longident;Ldot:(*emit_constructor_arguments:*)| Ldot((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string1) -> ((*P5*)process_generic_type "longident" "Ldot" [((*P4*)process_longident (*emit_core_type_numbered*)longident0);((*P4*)process_string (*emit_core_type_numbered*)string1)])
DBG22E:constructor_declaration_new: constructor:"Ldot"{(*emit_constructor_arguments:*)| Ldot((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string1) -> ((*P5*)process_generic_type "longident" "Ldot" [((*P4*)process_longident (*emit_core_type_numbered*)longident0);((*P4*)process_string (*emit_core_type_numbered*)string1)])}
DBG221EC: let process_longident__Lident x :string =match x with 
DBG22A:let process_string x : string= x
DBG22A:let process_string x : string= x
DBG22EB:let (*P1*)process_types_longident__Lident((astring):(string)):string = (process_generic_type_d "longident" "Lident") ((*P5*)process_generic_type_string astring))
DBG222EC:emit_constructor_arguments:longident;Lident:(*emit_constructor_arguments:*)| Lident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "longident" "Lident" [((*P4*)process_string (*emit_core_type_numbered*)string0)])
DBG22E:constructor_declaration_new: constructor:"Lident"{(*emit_constructor_arguments:*)| Lident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "longident" "Lident" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}

(HELPEmitthecode_emit_type_decl_list ((*P17*)process_types "rec_flag","Recursive")
DEBUG2Erec: let process_type_decl_position123 (x:position123):string = match x with {pos_fname(* string*);pos_lnum(* int*);pos_bol(* int*);pos_cnum(* int*)} ->((*P2*)process_type_decl_string pos_fname)^((*P2*)process_type_decl_int pos_lnum)^((*P2*)process_type_decl_int pos_bol)^((*P2*)process_type_decl_int pos_cnum) 
DEBUG2Erec: let process_type_decl_location123 (x:location123):string = match x with {loc_start(* position*);loc_end(* position*);loc_ghost(* bool*)} ->((*P2*)process_type_decl_position loc_start)^((*P2*)process_type_decl_position loc_end)^((*P2*)process_type_decl_bool loc_ghost) 
DEBUG2Erec: let process_type_decl_location (x:location):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_position (x:position):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_location_stack (x:location_stack):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_loc (x:loc):string = match x with {txt(* FIXME*);loc(* location*)} ->((*P2*)process_type_decl_FIXME txt)^((*P2*)process_type_decl_location loc) 
DEBUG2Erec: let process_type_decl_longident (x:longident):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Lident"{(*emit_constructor_arguments:*)| Lident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "longident" "Lident" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ldot"{(*emit_constructor_arguments:*)| Ldot((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string1) -> ((*P5*)process_generic_type "longident" "Ldot" [((*P4*)process_longident (*emit_core_type_numbered*)longident0);((*P4*)process_string (*emit_core_type_numbered*)string1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Lapply"{(*emit_constructor_arguments:*)| Lapply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident1) -> ((*P5*)process_generic_type "longident" "Lapply" [((*P4*)process_longident (*emit_core_type_numbered*)longident0);((*P4*)process_longident (*emit_core_type_numbered*)longident1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "longident"))} ->SKIP 
DEBUG2Erec: let process_type_decl_longident_loc (x:longident_loc):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_rec_flag (x:rec_flag):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Nonrecursive"{(*emit_constructor_arguments:*)| Nonrecursive((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "rec_flag" "Nonrecursive" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Recursive"{(*emit_constructor_arguments:*)| Recursive((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "rec_flag" "Recursive" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "rec_flag"))} ->SKIP 
DEBUG2Erec: let process_type_decl_direction_flag (x:direction_flag):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Upto"{(*emit_constructor_arguments:*)| Upto((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "direction_flag" "Upto" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Downto"{(*emit_constructor_arguments:*)| Downto((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "direction_flag" "Downto" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "direction_flag"))} ->SKIP 
DEBUG2Erec: let process_type_decl_private_flag (x:private_flag):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Private"{(*emit_constructor_arguments:*)| Private((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "private_flag" "Private" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Public"{(*emit_constructor_arguments:*)| Public((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "private_flag" "Public" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "private_flag"))} ->SKIP 
DEBUG2Erec: let process_type_decl_mutable_flag (x:mutable_flag):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Immutable"{(*emit_constructor_arguments:*)| Immutable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "mutable_flag" "Immutable" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Mutable"{(*emit_constructor_arguments:*)| Mutable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "mutable_flag" "Mutable" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "mutable_flag"))} ->SKIP 
DEBUG2Erec: let process_type_decl_virtual_flag (x:virtual_flag):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Virtual"{(*emit_constructor_arguments:*)| Virtual((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "virtual_flag" "Virtual" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Concrete"{(*emit_constructor_arguments:*)| Concrete((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "virtual_flag" "Concrete" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "virtual_flag"))} ->SKIP 
DEBUG2Erec: let process_type_decl_override_flag (x:override_flag):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Override"{(*emit_constructor_arguments:*)| Override((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "override_flag" "Override" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Fresh"{(*emit_constructor_arguments:*)| Fresh((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "override_flag" "Fresh" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "override_flag"))} ->SKIP 
DEBUG2Erec: let process_type_decl_closed_flag (x:closed_flag):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Closed"{(*emit_constructor_arguments:*)| Closed((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "closed_flag" "Closed" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Open"{(*emit_constructor_arguments:*)| Open((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "closed_flag" "Open" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "closed_flag"))} ->SKIP 
DEBUG2Erec: let process_type_decl_label (x:label):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_arg_label (x:arg_label):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Nolabel"{(*emit_constructor_arguments:*)| Nolabel((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "arg_label" "Nolabel" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Labelled"{(*emit_constructor_arguments:*)| Labelled((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "arg_label" "Labelled" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Optional"{(*emit_constructor_arguments:*)| Optional((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "arg_label" "Optional" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "arg_label"))} ->SKIP 
DEBUG2Erec: let process_type_decl_variance (x:variance):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Covariant"{(*emit_constructor_arguments:*)| Covariant((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "Covariant" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Contravariant"{(*emit_constructor_arguments:*)| Contravariant((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "Contravariant" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"NoVariance"{(*emit_constructor_arguments:*)| NoVariance((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "variance" "NoVariance" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "variance"))} ->SKIP 
DEBUG2Erec: let process_type_decl_injectivity (x:injectivity):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Injective"{(*emit_constructor_arguments:*)| Injective((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "injectivity" "Injective" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"NoInjectivity"{(*emit_constructor_arguments:*)| NoInjectivity((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "injectivity" "NoInjectivity" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "injectivity"))} ->SKIP 
DEBUG2Erec: let process_type_decl_constant (x:constant):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pconst_integer"{(*emit_constructor_arguments:*)| Pconst_integer((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "constant" "Pconst_integer" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pconst_char"{(*emit_constructor_arguments:*)| Pconst_char((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)char0) -> ((*P5*)process_generic_type "constant" "Pconst_char" [((*P4*)process_char (*emit_core_type_numbered*)char0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pconst_string"{(*emit_constructor_arguments:*)| Pconst_string((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)location1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "constant" "Pconst_string" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_location (*emit_core_type_numbered*)location1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pconst_float"{(*emit_constructor_arguments:*)| Pconst_float((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "constant" "Pconst_float" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "constant"))} ->SKIP 
DEBUG2Erec: let process_type_decl_attribute (x:attribute):string = match x with {attr_name(* loc*);attr_payload(* payload*);attr_loc(* location*)} ->((*P2*)process_type_decl_loc attr_name)^((*P2*)process_type_decl_payload attr_payload)^((*P2*)process_type_decl_location attr_loc) 
DEBUG2Erec: let process_type_decl_extension (x:extension):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_attributes (x:attributes):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_payload (x:payload):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"PStr"{(*emit_constructor_arguments:*)| PStr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "payload" "PStr" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"PSig"{(*emit_constructor_arguments:*)| PSig((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)signature0) -> ((*P5*)process_generic_type "payload" "PSig" [((*P4*)process_signature (*emit_core_type_numbered*)signature0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"PTyp"{(*emit_constructor_arguments:*)| PTyp((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "payload" "PTyp" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"PPat"{(*emit_constructor_arguments:*)| PPat((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "payload" "PPat" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "payload"))} ->SKIP 
DEBUG2Erec: let process_type_decl_core_type (x:core_type):string = match x with {ptyp_desc(* core_type_desc*);ptyp_loc(* location*);ptyp_loc_stack(* location_stack*);ptyp_attributes(* attributes*)} ->((*P2*)process_type_decl_core_type_desc ptyp_desc)^((*P2*)process_type_decl_location ptyp_loc)^((*P2*)process_type_decl_location_stack ptyp_loc_stack)^((*P2*)process_type_decl_attributes ptyp_attributes) 
DEBUG2Erec: let process_type_decl_core_type_desc (x:core_type_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_any"{(*emit_constructor_arguments:*)| Ptyp_any((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_any" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_var"{(*emit_constructor_arguments:*)| Ptyp_var((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_var" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_arrow"{(*emit_constructor_arguments:*)| Ptyp_arrow((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type2) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_arrow" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1);((*P4*)process_core_type (*emit_core_type_numbered*)core_type2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_tuple"{(*emit_constructor_arguments:*)| Ptyp_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_constr"{(*emit_constructor_arguments:*)| Ptyp_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_object"{(*emit_constructor_arguments:*)| Ptyp_object((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_object" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_class"{(*emit_constructor_arguments:*)| Ptyp_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_class" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_alias"{(*emit_constructor_arguments:*)| Ptyp_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_alias" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0);((*P4*)process_string (*emit_core_type_numbered*)string1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_variant"{(*emit_constructor_arguments:*)| Ptyp_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_variant" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_poly"{(*emit_constructor_arguments:*)| Ptyp_poly((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_poly" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_package"{(*emit_constructor_arguments:*)| Ptyp_package((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)package_type0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_package" [((*P4*)process_package_type (*emit_core_type_numbered*)package_type0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptyp_extension"{(*emit_constructor_arguments:*)| Ptyp_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "core_type_desc" "Ptyp_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "core_type_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_package_type (x:package_type):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_row_field (x:row_field):string = match x with {prf_desc(* row_field_desc*);prf_loc(* location*);prf_attributes(* attributes*)} ->((*P2*)process_type_decl_row_field_desc prf_desc)^((*P2*)process_type_decl_location prf_loc)^((*P2*)process_type_decl_attributes prf_attributes) 
DEBUG2Erec: let process_type_decl_row_field_desc (x:row_field_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Rtag"{(*emit_constructor_arguments:*)| Rtag((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)bool1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list2) -> ((*P5*)process_generic_type "row_field_desc" "Rtag" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_bool (*emit_core_type_numbered*)bool1);((*P4*)process_list (*emit_core_type_numbered*)list2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Rinherit"{(*emit_constructor_arguments:*)| Rinherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "row_field_desc" "Rinherit" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "row_field_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_object_field (x:object_field):string = match x with {pof_desc(* object_field_desc*);pof_loc(* location*);pof_attributes(* attributes*)} ->((*P2*)process_type_decl_object_field_desc pof_desc)^((*P2*)process_type_decl_location pof_loc)^((*P2*)process_type_decl_attributes pof_attributes) 
DEBUG2Erec: let process_type_decl_object_field_desc (x:object_field_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Otag"{(*emit_constructor_arguments:*)| Otag((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "object_field_desc" "Otag" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Oinherit"{(*emit_constructor_arguments:*)| Oinherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "object_field_desc" "Oinherit" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "object_field_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_pattern (x:pattern):string = match x with {ppat_desc(* pattern_desc*);ppat_loc(* location*);ppat_loc_stack(* location_stack*);ppat_attributes(* attributes*)} ->((*P2*)process_type_decl_pattern_desc ppat_desc)^((*P2*)process_type_decl_location ppat_loc)^((*P2*)process_type_decl_location_stack ppat_loc_stack)^((*P2*)process_type_decl_attributes ppat_attributes) 
DEBUG2Erec: let process_type_decl_pattern_desc (x:pattern_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_any"{(*emit_constructor_arguments:*)| Ppat_any((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_any" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_var"{(*emit_constructor_arguments:*)| Ppat_var((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_var" [((*P4*)process_loc (*emit_core_type_numbered*)loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_alias"{(*emit_constructor_arguments:*)| Ppat_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_alias" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_loc (*emit_core_type_numbered*)loc1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_constant"{(*emit_constructor_arguments:*)| Ppat_constant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_constant" [((*P4*)process_constant (*emit_core_type_numbered*)constant0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_interval"{(*emit_constructor_arguments:*)| Ppat_interval((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_interval" [((*P4*)process_constant (*emit_core_type_numbered*)constant0);((*P4*)process_constant (*emit_core_type_numbered*)constant1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_tuple"{(*emit_constructor_arguments:*)| Ppat_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_construct"{(*emit_constructor_arguments:*)| Ppat_construct((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_construct" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_variant"{(*emit_constructor_arguments:*)| Ppat_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_variant" [((*P4*)process_label (*emit_core_type_numbered*)label0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_record"{(*emit_constructor_arguments:*)| Ppat_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)closed_flag1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_record" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_closed_flag (*emit_core_type_numbered*)closed_flag1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_array"{(*emit_constructor_arguments:*)| Ppat_array((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_array" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_or"{(*emit_constructor_arguments:*)| Ppat_or((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_or" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_pattern (*emit_core_type_numbered*)pattern1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_constraint"{(*emit_constructor_arguments:*)| Ppat_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_constraint" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_type"{(*emit_constructor_arguments:*)| Ppat_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_type" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_lazy"{(*emit_constructor_arguments:*)| Ppat_lazy((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_lazy" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_unpack"{(*emit_constructor_arguments:*)| Ppat_unpack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_unpack" [((*P4*)process_loc (*emit_core_type_numbered*)loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_exception"{(*emit_constructor_arguments:*)| Ppat_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_exception" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_extension"{(*emit_constructor_arguments:*)| Ppat_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ppat_open"{(*emit_constructor_arguments:*)| Ppat_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern1) -> ((*P5*)process_generic_type "pattern_desc" "Ppat_open" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_pattern (*emit_core_type_numbered*)pattern1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "pattern_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_expression (x:expression):string = match x with {pexp_desc(* expression_desc*);pexp_loc(* location*);pexp_loc_stack(* location_stack*);pexp_attributes(* attributes*)} ->((*P2*)process_type_decl_expression_desc pexp_desc)^((*P2*)process_type_decl_location pexp_loc)^((*P2*)process_type_decl_location_stack pexp_loc_stack)^((*P2*)process_type_decl_attributes pexp_attributes) 
DEBUG2Erec: let process_type_decl_expression_desc (x:expression_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_ident"{(*emit_constructor_arguments:*)| Pexp_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_constant"{(*emit_constructor_arguments:*)| Pexp_constant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constant0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_constant" [((*P4*)process_constant (*emit_core_type_numbered*)constant0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_let"{(*emit_constructor_arguments:*)| Pexp_let((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_let" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_function"{(*emit_constructor_arguments:*)| Pexp_function((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_function" [((*P4*)process_cases (*emit_core_type_numbered*)cases0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_fun"{(*emit_constructor_arguments:*)| Pexp_fun((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression3) -> ((*P5*)process_generic_type "expression_desc" "Pexp_fun" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_pattern (*emit_core_type_numbered*)pattern2);((*P4*)process_expression (*emit_core_type_numbered*)expression3)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_apply"{(*emit_constructor_arguments:*)| Pexp_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_apply" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_match"{(*emit_constructor_arguments:*)| Pexp_match((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_match" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_cases (*emit_core_type_numbered*)cases1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_try"{(*emit_constructor_arguments:*)| Pexp_try((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)cases1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_try" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_cases (*emit_core_type_numbered*)cases1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_tuple"{(*emit_constructor_arguments:*)| Pexp_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_construct"{(*emit_constructor_arguments:*)| Pexp_construct((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_construct" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_variant"{(*emit_constructor_arguments:*)| Pexp_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_variant" [((*P4*)process_label (*emit_core_type_numbered*)label0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_record"{(*emit_constructor_arguments:*)| Pexp_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_record" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_field"{(*emit_constructor_arguments:*)| Pexp_field((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_field" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_setfield"{(*emit_constructor_arguments:*)| Pexp_setfield((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_setfield" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_array"{(*emit_constructor_arguments:*)| Pexp_array((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_array" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_ifthenelse"{(*emit_constructor_arguments:*)| Pexp_ifthenelse((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_ifthenelse" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_sequence"{(*emit_constructor_arguments:*)| Pexp_sequence((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_sequence" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_while"{(*emit_constructor_arguments:*)| Pexp_while((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_while" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_for"{(*emit_constructor_arguments:*)| Pexp_for((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)direction_flag3,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression4) -> ((*P5*)process_generic_type "expression_desc" "Pexp_for" [((*P4*)process_pattern (*emit_core_type_numbered*)pattern0);((*P4*)process_expression (*emit_core_type_numbered*)expression1);((*P4*)process_expression (*emit_core_type_numbered*)expression2);((*P4*)process_direction_flag (*emit_core_type_numbered*)direction_flag3);((*P4*)process_expression (*emit_core_type_numbered*)expression4)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_constraint"{(*emit_constructor_arguments:*)| Pexp_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_constraint" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_coerce"{(*emit_constructor_arguments:*)| Pexp_coerce((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_coerce" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_core_type (*emit_core_type_numbered*)core_type2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_send"{(*emit_constructor_arguments:*)| Pexp_send((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_send" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_loc (*emit_core_type_numbered*)loc1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_new"{(*emit_constructor_arguments:*)| Pexp_new((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_new" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_setinstvar"{(*emit_constructor_arguments:*)| Pexp_setinstvar((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_setinstvar" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_override"{(*emit_constructor_arguments:*)| Pexp_override((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_override" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_letmodule"{(*emit_constructor_arguments:*)| Pexp_letmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression2) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letmodule" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1);((*P4*)process_expression (*emit_core_type_numbered*)expression2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_letexception"{(*emit_constructor_arguments:*)| Pexp_letexception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension_constructor0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letexception" [((*P4*)process_extension_constructor (*emit_core_type_numbered*)extension_constructor0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_assert"{(*emit_constructor_arguments:*)| Pexp_assert((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_assert" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_lazy"{(*emit_constructor_arguments:*)| Pexp_lazy((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_lazy" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_poly"{(*emit_constructor_arguments:*)| Pexp_poly((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_poly" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_object"{(*emit_constructor_arguments:*)| Pexp_object((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_structure0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_object" [((*P4*)process_class_structure (*emit_core_type_numbered*)class_structure0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_newtype"{(*emit_constructor_arguments:*)| Pexp_newtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_newtype" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_pack"{(*emit_constructor_arguments:*)| Pexp_pack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_pack" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_open"{(*emit_constructor_arguments:*)| Pexp_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_declaration0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "expression_desc" "Pexp_open" [((*P4*)process_open_declaration (*emit_core_type_numbered*)open_declaration0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_letop"{(*emit_constructor_arguments:*)| Pexp_letop((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)letop0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_letop" [((*P4*)process_letop (*emit_core_type_numbered*)letop0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_extension"{(*emit_constructor_arguments:*)| Pexp_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "expression_desc" "Pexp_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pexp_unreachable"{(*emit_constructor_arguments:*)| Pexp_unreachable((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "expression_desc" "Pexp_unreachable" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "expression_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_case (x:case):string = match x with {pc_lhs(* pattern*);pc_guard(* option*);pc_rhs(* expression*)} ->((*P2*)process_type_decl_pattern pc_lhs)^((*P2*)process_type_decl_option pc_guard)^((*P2*)process_type_decl_expression pc_rhs) 
DEBUG2Erec: let process_type_decl_letop (x:letop):string = match x with {let_(* binding_op*);ands(* list*);body(* expression*)} ->((*P2*)process_type_decl_binding_op let_)^((*P2*)process_type_decl_list ands)^((*P2*)process_type_decl_expression body) 
DEBUG2Erec: let process_type_decl_binding_op (x:binding_op):string = match x with {pbop_op(* loc*);pbop_pat(* pattern*);pbop_exp(* expression*);pbop_loc(* location*)} ->((*P2*)process_type_decl_loc pbop_op)^((*P2*)process_type_decl_pattern pbop_pat)^((*P2*)process_type_decl_expression pbop_exp)^((*P2*)process_type_decl_location pbop_loc) 
DEBUG2Erec: let process_type_decl_value_description (x:value_description):string = match x with {pval_name(* loc*);pval_type(* core_type*);pval_prim(* list*);pval_attributes(* attributes*);pval_loc(* location*)} ->((*P2*)process_type_decl_loc pval_name)^((*P2*)process_type_decl_core_type pval_type)^((*P2*)process_type_decl_list pval_prim)^((*P2*)process_type_decl_attributes pval_attributes)^((*P2*)process_type_decl_location pval_loc) 
DEBUG2Erec: let process_type_decl_type_declaration (x:type_declaration):string = match x with {ptype_name(* loc*);ptype_params(* list*);ptype_cstrs(* list*);ptype_kind(* type_kind*);ptype_private(* private_flag*);ptype_manifest(* option*);ptype_attributes(* attributes*);ptype_loc(* location*)} ->((*P2*)process_type_decl_loc ptype_name)^((*P2*)process_type_decl_list ptype_params)^((*P2*)process_type_decl_list ptype_cstrs)^((*P2*)process_type_decl_type_kind ptype_kind)^((*P2*)process_type_decl_private_flag ptype_private)^((*P2*)process_type_decl_option ptype_manifest)^((*P2*)process_type_decl_attributes ptype_attributes)^((*P2*)process_type_decl_location ptype_loc) 
DEBUG2Erec: let process_type_decl_type_kind (x:type_kind):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptype_abstract"{(*emit_constructor_arguments:*)| Ptype_abstract((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "type_kind" "Ptype_abstract" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptype_variant"{(*emit_constructor_arguments:*)| Ptype_variant((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "type_kind" "Ptype_variant" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptype_record"{(*emit_constructor_arguments:*)| Ptype_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "type_kind" "Ptype_record" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptype_open"{(*emit_constructor_arguments:*)| Ptype_open((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "type_kind" "Ptype_open" [])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "type_kind"))} ->SKIP 
DEBUG2Erec: let process_type_decl_label_declaration (x:label_declaration):string = match x with {pld_name(* loc*);pld_mutable(* mutable_flag*);pld_type(* core_type*);pld_loc(* location*);pld_attributes(* attributes*)} ->((*P2*)process_type_decl_loc pld_name)^((*P2*)process_type_decl_mutable_flag pld_mutable)^((*P2*)process_type_decl_core_type pld_type)^((*P2*)process_type_decl_location pld_loc)^((*P2*)process_type_decl_attributes pld_attributes) 
DEBUG2Erec: let process_type_decl_constructor_declaration (x:constructor_declaration):string = match x with {pcd_name(* loc*);pcd_vars(* list*);pcd_args(* constructor_arguments*);pcd_res(* option*);pcd_loc(* location*);pcd_attributes(* attributes*)} ->((*P2*)process_type_decl_loc pcd_name)^((*P2*)process_type_decl_list pcd_vars)^((*P2*)process_type_decl_constructor_arguments pcd_args)^((*P2*)process_type_decl_option pcd_res)^((*P2*)process_type_decl_location pcd_loc)^((*P2*)process_type_decl_attributes pcd_attributes) 
DEBUG2Erec: let process_type_decl_constructor_arguments (x:constructor_arguments):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcstr_tuple"{(*emit_constructor_arguments:*)| Pcstr_tuple((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "constructor_arguments" "Pcstr_tuple" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcstr_record"{(*emit_constructor_arguments:*)| Pcstr_record((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "constructor_arguments" "Pcstr_record" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "constructor_arguments"))} ->SKIP 
DEBUG2Erec: let process_type_decl_type_extension (x:type_extension):string = match x with {ptyext_path(* longident_loc*);ptyext_params(* list*);ptyext_constructors(* list*);ptyext_private(* private_flag*);ptyext_loc(* location*);ptyext_attributes(* attributes*)} ->((*P2*)process_type_decl_longident_loc ptyext_path)^((*P2*)process_type_decl_list ptyext_params)^((*P2*)process_type_decl_list ptyext_constructors)^((*P2*)process_type_decl_private_flag ptyext_private)^((*P2*)process_type_decl_location ptyext_loc)^((*P2*)process_type_decl_attributes ptyext_attributes) 
DEBUG2Erec: let process_type_decl_extension_constructor (x:extension_constructor):string = match x with {pext_name(* loc*);pext_kind(* extension_constructor_kind*);pext_loc(* location*);pext_attributes(* attributes*)} ->((*P2*)process_type_decl_loc pext_name)^((*P2*)process_type_decl_extension_constructor_kind pext_kind)^((*P2*)process_type_decl_location pext_loc)^((*P2*)process_type_decl_attributes pext_attributes) 
DEBUG2Erec: let process_type_decl_type_exception (x:type_exception):string = match x with {ptyexn_constructor(* extension_constructor*);ptyexn_loc(* location*);ptyexn_attributes(* attributes*)} ->((*P2*)process_type_decl_extension_constructor ptyexn_constructor)^((*P2*)process_type_decl_location ptyexn_loc)^((*P2*)process_type_decl_attributes ptyexn_attributes) 
DEBUG2Erec: let process_type_decl_extension_constructor_kind (x:extension_constructor_kind):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pext_decl"{(*emit_constructor_arguments:*)| Pext_decl((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)constructor_arguments1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "extension_constructor_kind" "Pext_decl" [((*P4*)process_list (*emit_core_type_numbered*)list0);((*P4*)process_constructor_arguments (*emit_core_type_numbered*)constructor_arguments1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pext_rebind"{(*emit_constructor_arguments:*)| Pext_rebind((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "extension_constructor_kind" "Pext_rebind" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "extension_constructor_kind"))} ->SKIP 
DEBUG2Erec: let process_type_decl_class_type (x:class_type):string = match x with {pcty_desc(* class_type_desc*);pcty_loc(* location*);pcty_attributes(* attributes*)} ->((*P2*)process_type_decl_class_type_desc pcty_desc)^((*P2*)process_type_decl_location pcty_loc)^((*P2*)process_type_decl_attributes pcty_attributes) 
DEBUG2Erec: let process_type_decl_class_type_desc (x:class_type_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcty_constr"{(*emit_constructor_arguments:*)| Pcty_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcty_signature"{(*emit_constructor_arguments:*)| Pcty_signature((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_signature0) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_signature" [((*P4*)process_class_signature (*emit_core_type_numbered*)class_signature0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcty_arrow"{(*emit_constructor_arguments:*)| Pcty_arrow((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type2) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_arrow" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_core_type (*emit_core_type_numbered*)core_type1);((*P4*)process_class_type (*emit_core_type_numbered*)class_type2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcty_extension"{(*emit_constructor_arguments:*)| Pcty_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcty_open"{(*emit_constructor_arguments:*)| Pcty_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type1) -> ((*P5*)process_generic_type "class_type_desc" "Pcty_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0);((*P4*)process_class_type (*emit_core_type_numbered*)class_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "class_type_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_class_signature (x:class_signature):string = match x with {pcsig_self(* core_type*);pcsig_fields(* list*)} ->((*P2*)process_type_decl_core_type pcsig_self)^((*P2*)process_type_decl_list pcsig_fields) 
DEBUG2Erec: let process_type_decl_class_type_field (x:class_type_field):string = match x with {pctf_desc(* class_type_field_desc*);pctf_loc(* location*);pctf_attributes(* attributes*)} ->((*P2*)process_type_decl_class_type_field_desc pctf_desc)^((*P2*)process_type_decl_location pctf_loc)^((*P2*)process_type_decl_attributes pctf_attributes) 
DEBUG2Erec: let process_type_decl_class_type_field_desc (x:class_type_field_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pctf_inherit"{(*emit_constructor_arguments:*)| Pctf_inherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_inherit" [((*P4*)process_class_type (*emit_core_type_numbered*)class_type0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pctf_val"{(*emit_constructor_arguments:*)| Pctf_val((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_val" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pctf_method"{(*emit_constructor_arguments:*)| Pctf_method((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_method" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)virtual_flag,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pctf_constraint"{(*emit_constructor_arguments:*)| Pctf_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_constraint" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pctf_attribute"{(*emit_constructor_arguments:*)| Pctf_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pctf_extension"{(*emit_constructor_arguments:*)| Pctf_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_type_field_desc" "Pctf_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "class_type_field_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_class_infos (x:class_infos):string = match x with {pci_virt(* virtual_flag*);pci_params(* list*);pci_name(* loc*);pci_expr(* FIXME*);pci_loc(* location*);pci_attributes(* attributes*)} ->((*P2*)process_type_decl_virtual_flag pci_virt)^((*P2*)process_type_decl_list pci_params)^((*P2*)process_type_decl_loc pci_name)^((*P2*)process_type_decl_FIXME pci_expr)^((*P2*)process_type_decl_location pci_loc)^((*P2*)process_type_decl_attributes pci_attributes) 
DEBUG2Erec: let process_type_decl_class_description (x:class_description):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_class_type_declaration (x:class_type_declaration):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_class_expr (x:class_expr):string = match x with {pcl_desc(* class_expr_desc*);pcl_loc(* location*);pcl_attributes(* attributes*)} ->((*P2*)process_type_decl_class_expr_desc pcl_desc)^((*P2*)process_type_decl_location pcl_loc)^((*P2*)process_type_decl_attributes pcl_attributes) 
DEBUG2Erec: let process_type_decl_class_expr_desc (x:class_expr_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcl_constr"{(*emit_constructor_arguments:*)| Pcl_constr((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_constr" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcl_structure"{(*emit_constructor_arguments:*)| Pcl_structure((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_structure0) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_structure" [((*P4*)process_class_structure (*emit_core_type_numbered*)class_structure0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcl_fun"{(*emit_constructor_arguments:*)| Pcl_fun((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)arg_label0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)pattern2,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr3) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_fun" [((*P4*)process_arg_label (*emit_core_type_numbered*)arg_label0);((*P4*)process_option (*emit_core_type_numbered*)option1);((*P4*)process_pattern (*emit_core_type_numbered*)pattern2);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr3)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcl_apply"{(*emit_constructor_arguments:*)| Pcl_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_apply" [((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcl_let"{(*emit_constructor_arguments:*)| Pcl_let((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr2) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_let" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcl_constraint"{(*emit_constructor_arguments:*)| Pcl_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_type1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_constraint" [((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr0);((*P4*)process_class_type (*emit_core_type_numbered*)class_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcl_extension"{(*emit_constructor_arguments:*)| Pcl_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcl_open"{(*emit_constructor_arguments:*)| Pcl_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr1) -> ((*P5*)process_generic_type "class_expr_desc" "Pcl_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "class_expr_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_class_structure (x:class_structure):string = match x with {pcstr_self(* pattern*);pcstr_fields(* list*)} ->((*P2*)process_type_decl_pattern pcstr_self)^((*P2*)process_type_decl_list pcstr_fields) 
DEBUG2Erec: let process_type_decl_class_field (x:class_field):string = match x with {pcf_desc(* class_field_desc*);pcf_loc(* location*);pcf_attributes(* attributes*)} ->((*P2*)process_type_decl_class_field_desc pcf_desc)^((*P2*)process_type_decl_location pcf_loc)^((*P2*)process_type_decl_attributes pcf_attributes) 
DEBUG2Erec: let process_type_decl_class_field_desc (x:class_field_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcf_inherit"{(*emit_constructor_arguments:*)| Pcf_inherit((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)override_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)class_expr1,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option2) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_inherit" [((*P4*)process_override_flag (*emit_core_type_numbered*)override_flag0);((*P4*)process_class_expr (*emit_core_type_numbered*)class_expr1);((*P4*)process_option (*emit_core_type_numbered*)option2)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcf_val"{(*emit_constructor_arguments:*)| Pcf_val((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_val" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)mutable_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcf_method"{(*emit_constructor_arguments:*)| Pcf_method((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_method" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)loc,(*emit_core_type_list*)private_flag,(*emit_core_type_list*)class_field_kind,(*emit_core_type_list*))0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcf_constraint"{(*emit_constructor_arguments:*)| Pcf_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_constraint" [((*P4*)process_(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*)) (*emit_core_type_numbered*)(ptyp_tuple (*emit_core_type_list*)core_type,(*emit_core_type_list*)core_type,(*emit_core_type_list*))0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcf_initializer"{(*emit_constructor_arguments:*)| Pcf_initializer((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_initializer" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcf_attribute"{(*emit_constructor_arguments:*)| Pcf_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pcf_extension"{(*emit_constructor_arguments:*)| Pcf_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "class_field_desc" "Pcf_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "class_field_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_class_field_kind (x:class_field_kind):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Cfk_virtual"{(*emit_constructor_arguments:*)| Cfk_virtual((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)core_type0) -> ((*P5*)process_generic_type "class_field_kind" "Cfk_virtual" [((*P4*)process_core_type (*emit_core_type_numbered*)core_type0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Cfk_concrete"{(*emit_constructor_arguments:*)| Cfk_concrete((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)override_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression1) -> ((*P5*)process_generic_type "class_field_kind" "Cfk_concrete" [((*P4*)process_override_flag (*emit_core_type_numbered*)override_flag0);((*P4*)process_expression (*emit_core_type_numbered*)expression1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "class_field_kind"))} ->SKIP 
DEBUG2Erec: let process_type_decl_class_declaration (x:class_declaration):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_module_type (x:module_type):string = match x with {pmty_desc(* module_type_desc*);pmty_loc(* location*);pmty_attributes(* attributes*)} ->((*P2*)process_type_decl_module_type_desc pmty_desc)^((*P2*)process_type_decl_location pmty_loc)^((*P2*)process_type_decl_attributes pmty_attributes) 
DEBUG2Erec: let process_type_decl_module_type_desc (x:module_type_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmty_ident"{(*emit_constructor_arguments:*)| Pmty_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmty_signature"{(*emit_constructor_arguments:*)| Pmty_signature((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)signature0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_signature" [((*P4*)process_signature (*emit_core_type_numbered*)signature0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmty_functor"{(*emit_constructor_arguments:*)| Pmty_functor((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)functor_parameter0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_functor" [((*P4*)process_functor_parameter (*emit_core_type_numbered*)functor_parameter0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmty_with"{(*emit_constructor_arguments:*)| Pmty_with((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_with" [((*P4*)process_module_type (*emit_core_type_numbered*)module_type0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmty_typeof"{(*emit_constructor_arguments:*)| Pmty_typeof((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_typeof" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmty_extension"{(*emit_constructor_arguments:*)| Pmty_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmty_alias"{(*emit_constructor_arguments:*)| Pmty_alias((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_type_desc" "Pmty_alias" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "module_type_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_functor_parameter (x:functor_parameter):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Unit"{(*emit_constructor_arguments:*)| Unit((*emit_constructor_arguments_from_core_type_list*)) -> ((*P5*)process_generic_type "functor_parameter" "Unit" [])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Named"{(*emit_constructor_arguments:*)| Named((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "functor_parameter" "Named" [((*P4*)process_loc (*emit_core_type_numbered*)loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "functor_parameter"))} ->SKIP 
DEBUG2Erec: let process_type_decl_signature (x:signature):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_signature_item (x:signature_item):string = match x with {psig_desc(* signature_item_desc*);psig_loc(* location*)} ->((*P2*)process_type_decl_signature_item_desc psig_desc)^((*P2*)process_type_decl_location psig_loc) 
DEBUG2Erec: let process_type_decl_signature_item_desc (x:signature_item_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_value"{(*emit_constructor_arguments:*)| Psig_value((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)value_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_value" [((*P4*)process_value_description (*emit_core_type_numbered*)value_description0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_type"{(*emit_constructor_arguments:*)| Psig_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_type" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_typesubst"{(*emit_constructor_arguments:*)| Psig_typesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_typesubst" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_typext"{(*emit_constructor_arguments:*)| Psig_typext((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_extension0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_typext" [((*P4*)process_type_extension (*emit_core_type_numbered*)type_extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_exception"{(*emit_constructor_arguments:*)| Psig_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_exception0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_exception" [((*P4*)process_type_exception (*emit_core_type_numbered*)type_exception0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_module"{(*emit_constructor_arguments:*)| Psig_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_module" [((*P4*)process_module_declaration (*emit_core_type_numbered*)module_declaration0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_modsubst"{(*emit_constructor_arguments:*)| Psig_modsubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_substitution0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modsubst" [((*P4*)process_module_substitution (*emit_core_type_numbered*)module_substitution0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_recmodule"{(*emit_constructor_arguments:*)| Psig_recmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_recmodule" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_modtype"{(*emit_constructor_arguments:*)| Psig_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modtype" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_modtypesubst"{(*emit_constructor_arguments:*)| Psig_modtypesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_modtypesubst" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_open"{(*emit_constructor_arguments:*)| Psig_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_open" [((*P4*)process_open_description (*emit_core_type_numbered*)open_description0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_include"{(*emit_constructor_arguments:*)| Psig_include((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)include_description0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_include" [((*P4*)process_include_description (*emit_core_type_numbered*)include_description0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_class"{(*emit_constructor_arguments:*)| Psig_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_class" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_class_type"{(*emit_constructor_arguments:*)| Psig_class_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_class_type" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_attribute"{(*emit_constructor_arguments:*)| Psig_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Psig_extension"{(*emit_constructor_arguments:*)| Psig_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "signature_item_desc" "Psig_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "signature_item_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_module_declaration (x:module_declaration):string = match x with {pmd_name(* loc*);pmd_type(* module_type*);pmd_attributes(* attributes*);pmd_loc(* location*)} ->((*P2*)process_type_decl_loc pmd_name)^((*P2*)process_type_decl_module_type pmd_type)^((*P2*)process_type_decl_attributes pmd_attributes)^((*P2*)process_type_decl_location pmd_loc) 
DEBUG2Erec: let process_type_decl_module_substitution (x:module_substitution):string = match x with {pms_name(* loc*);pms_manifest(* longident_loc*);pms_attributes(* attributes*);pms_loc(* location*)} ->((*P2*)process_type_decl_loc pms_name)^((*P2*)process_type_decl_longident_loc pms_manifest)^((*P2*)process_type_decl_attributes pms_attributes)^((*P2*)process_type_decl_location pms_loc) 
DEBUG2Erec: let process_type_decl_module_type_declaration (x:module_type_declaration):string = match x with {pmtd_name(* loc*);pmtd_type(* option*);pmtd_attributes(* attributes*);pmtd_loc(* location*)} ->((*P2*)process_type_decl_loc pmtd_name)^((*P2*)process_type_decl_option pmtd_type)^((*P2*)process_type_decl_attributes pmtd_attributes)^((*P2*)process_type_decl_location pmtd_loc) 
DEBUG2Erec: let process_type_decl_open_infos (x:open_infos):string = match x with {popen_expr(* FIXME*);popen_override(* override_flag*);popen_loc(* location*);popen_attributes(* attributes*)} ->((*P2*)process_type_decl_FIXME popen_expr)^((*P2*)process_type_decl_override_flag popen_override)^((*P2*)process_type_decl_location popen_loc)^((*P2*)process_type_decl_attributes popen_attributes) 
DEBUG2Erec: let process_type_decl_open_description (x:open_description):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_open_declaration (x:open_declaration):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_include_infos (x:include_infos):string = match x with {pincl_mod(* FIXME*);pincl_loc(* location*);pincl_attributes(* attributes*)} ->((*P2*)process_type_decl_FIXME pincl_mod)^((*P2*)process_type_decl_location pincl_loc)^((*P2*)process_type_decl_attributes pincl_attributes) 
DEBUG2Erec: let process_type_decl_include_description (x:include_description):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_include_declaration (x:include_declaration):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_with_constraint (x:with_constraint):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pwith_type"{(*emit_constructor_arguments:*)| Pwith_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_declaration1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_type" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_type_declaration (*emit_core_type_numbered*)type_declaration1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pwith_module"{(*emit_constructor_arguments:*)| Pwith_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_module" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pwith_modtype"{(*emit_constructor_arguments:*)| Pwith_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modtype" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pwith_modtypesubst"{(*emit_constructor_arguments:*)| Pwith_modtypesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modtypesubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pwith_typesubst"{(*emit_constructor_arguments:*)| Pwith_typesubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_declaration1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_typesubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_type_declaration (*emit_core_type_numbered*)type_declaration1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pwith_modsubst"{(*emit_constructor_arguments:*)| Pwith_modsubst((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc1) -> ((*P5*)process_generic_type "with_constraint" "Pwith_modsubst" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0);((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "with_constraint"))} ->SKIP 
DEBUG2Erec: let process_type_decl_module_expr (x:module_expr):string = match x with {pmod_desc(* module_expr_desc*);pmod_loc(* location*);pmod_attributes(* attributes*)} ->((*P2*)process_type_decl_module_expr_desc pmod_desc)^((*P2*)process_type_decl_location pmod_loc)^((*P2*)process_type_decl_attributes pmod_attributes) 
DEBUG2Erec: let process_type_decl_module_expr_desc (x:module_expr_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmod_ident"{(*emit_constructor_arguments:*)| Pmod_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident_loc0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_ident" [((*P4*)process_longident_loc (*emit_core_type_numbered*)longident_loc0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmod_structure"{(*emit_constructor_arguments:*)| Pmod_structure((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_structure" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmod_functor"{(*emit_constructor_arguments:*)| Pmod_functor((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)functor_parameter0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_functor" [((*P4*)process_functor_parameter (*emit_core_type_numbered*)functor_parameter0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmod_apply"{(*emit_constructor_arguments:*)| Pmod_apply((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_apply" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0);((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmod_constraint"{(*emit_constructor_arguments:*)| Pmod_constraint((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_expr0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type1) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_constraint" [((*P4*)process_module_expr (*emit_core_type_numbered*)module_expr0);((*P4*)process_module_type (*emit_core_type_numbered*)module_type1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmod_unpack"{(*emit_constructor_arguments:*)| Pmod_unpack((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_unpack" [((*P4*)process_expression (*emit_core_type_numbered*)expression0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pmod_extension"{(*emit_constructor_arguments:*)| Pmod_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0) -> ((*P5*)process_generic_type "module_expr_desc" "Pmod_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "module_expr_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_structure (x:structure):string = match x with {(terminal_ptype_abstract)} ->SKIP 
DEBUG2Erec: let process_type_decl_structure_item (x:structure_item):string = match x with {pstr_desc(* structure_item_desc*);pstr_loc(* location*)} ->((*P2*)process_type_decl_structure_item_desc pstr_desc)^((*P2*)process_type_decl_location pstr_loc) 
DEBUG2Erec: let process_type_decl_structure_item_desc (x:structure_item_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_eval"{(*emit_constructor_arguments:*)| Pstr_eval((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)expression0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_eval" [((*P4*)process_expression (*emit_core_type_numbered*)expression0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_value"{(*emit_constructor_arguments:*)| Pstr_value((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_value" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_primitive"{(*emit_constructor_arguments:*)| Pstr_primitive((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)value_description0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_primitive" [((*P4*)process_value_description (*emit_core_type_numbered*)value_description0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_type"{(*emit_constructor_arguments:*)| Pstr_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)rec_flag0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_type" [((*P4*)process_rec_flag (*emit_core_type_numbered*)rec_flag0);((*P4*)process_list (*emit_core_type_numbered*)list1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_typext"{(*emit_constructor_arguments:*)| Pstr_typext((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_extension0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_typext" [((*P4*)process_type_extension (*emit_core_type_numbered*)type_extension0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_exception"{(*emit_constructor_arguments:*)| Pstr_exception((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)type_exception0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_exception" [((*P4*)process_type_exception (*emit_core_type_numbered*)type_exception0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_module"{(*emit_constructor_arguments:*)| Pstr_module((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_binding0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_module" [((*P4*)process_module_binding (*emit_core_type_numbered*)module_binding0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_recmodule"{(*emit_constructor_arguments:*)| Pstr_recmodule((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_recmodule" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_modtype"{(*emit_constructor_arguments:*)| Pstr_modtype((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)module_type_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_modtype" [((*P4*)process_module_type_declaration (*emit_core_type_numbered*)module_type_declaration0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_open"{(*emit_constructor_arguments:*)| Pstr_open((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)open_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_open" [((*P4*)process_open_declaration (*emit_core_type_numbered*)open_declaration0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_class"{(*emit_constructor_arguments:*)| Pstr_class((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_class" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_class_type"{(*emit_constructor_arguments:*)| Pstr_class_type((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)list0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_class_type" [((*P4*)process_list (*emit_core_type_numbered*)list0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_include"{(*emit_constructor_arguments:*)| Pstr_include((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)include_declaration0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_include" [((*P4*)process_include_declaration (*emit_core_type_numbered*)include_declaration0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_attribute"{(*emit_constructor_arguments:*)| Pstr_attribute((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attribute0) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_attribute" [((*P4*)process_attribute (*emit_core_type_numbered*)attribute0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pstr_extension"{(*emit_constructor_arguments:*)| Pstr_extension((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)extension0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)attributes1) -> ((*P5*)process_generic_type "structure_item_desc" "Pstr_extension" [((*P4*)process_extension (*emit_core_type_numbered*)extension0);((*P4*)process_attributes (*emit_core_type_numbered*)attributes1)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "structure_item_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_value_binding (x:value_binding):string = match x with {pvb_pat(* pattern*);pvb_expr(* expression*);pvb_attributes(* attributes*);pvb_loc(* location*)} ->((*P2*)process_type_decl_pattern pvb_pat)^((*P2*)process_type_decl_expression pvb_expr)^((*P2*)process_type_decl_attributes pvb_attributes)^((*P2*)process_type_decl_location pvb_loc) 
DEBUG2Erec: let process_type_decl_module_binding (x:module_binding):string = match x with {pmb_name(* loc*);pmb_expr(* module_expr*);pmb_attributes(* attributes*);pmb_loc(* location*)} ->((*P2*)process_type_decl_loc pmb_name)^((*P2*)process_type_decl_module_expr pmb_expr)^((*P2*)process_type_decl_attributes pmb_attributes)^((*P2*)process_type_decl_location pmb_loc) 
DEBUG2Erec: let process_type_decl_toplevel_phrase (x:toplevel_phrase):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptop_def"{(*emit_constructor_arguments:*)| Ptop_def((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)structure0) -> ((*P5*)process_generic_type "toplevel_phrase" "Ptop_def" [((*P4*)process_structure (*emit_core_type_numbered*)structure0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Ptop_dir"{(*emit_constructor_arguments:*)| Ptop_dir((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)toplevel_directive0) -> ((*P5*)process_generic_type "toplevel_phrase" "Ptop_dir" [((*P4*)process_toplevel_directive (*emit_core_type_numbered*)toplevel_directive0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "toplevel_phrase"))} ->SKIP 
DEBUG2Erec: let process_type_decl_toplevel_directive (x:toplevel_directive):string = match x with {pdir_name(* loc*);pdir_arg(* option*);pdir_loc(* location*)} ->((*P2*)process_type_decl_loc pdir_name)^((*P2*)process_type_decl_option pdir_arg)^((*P2*)process_type_decl_location pdir_loc) 
DEBUG2Erec: let process_type_decl_directive_argument (x:directive_argument):string = match x with {pdira_desc(* directive_argument_desc*);pdira_loc(* location*)} ->((*P2*)process_type_decl_directive_argument_desc pdira_desc)^((*P2*)process_type_decl_location pdira_loc) 
DEBUG2Erec: let process_type_decl_directive_argument_desc (x:directive_argument_desc):string = match x with {(ptype_variant 
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pdir_string"{(*emit_constructor_arguments:*)| Pdir_string((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_string" [((*P4*)process_string (*emit_core_type_numbered*)string0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pdir_int"{(*emit_constructor_arguments:*)| Pdir_int((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)string0,(*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)option1) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_int" [((*P4*)process_string (*emit_core_type_numbered*)string0);((*P4*)process_option (*emit_core_type_numbered*)option1)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pdir_ident"{(*emit_constructor_arguments:*)| Pdir_ident((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)longident0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_ident" [((*P4*)process_longident (*emit_core_type_numbered*)longident0)])}
DEBUG:(emit_type_variant_constructor_declaration_list constructor:"Pdir_bool"{(*emit_constructor_arguments:*)| Pdir_bool((*emit_constructor_arguments_from_core_type_list*)(*emit_core_type_numbered*)bool0) -> ((*P5*)process_generic_type "directive_argument_desc" "Pdir_bool" [((*P4*)process_bool (*emit_core_type_numbered*)bool0)])}
DEBUG:(emit_type_variant_constructor_declaration_list ( variant_2 "directive_argument_desc"))} ->SKIP 
DEBUG2Erec: let process_type_decl_cases (x:cases):string = match x with {(terminal_ptype_abstract)} ->SKIP )

DBG12C: let process_directive_argument_desc__Pdir_string x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12B:let (*P64*)process_types_directive_argument_desc__Pdir_string(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*))):string = (process_types ("directive_argument_desc","Pdir_string") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pdir_string ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)) -> (process_types_directive_argument_desc__Pdir_string((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pdir_string" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_directive_argument_desc__Pdir_int x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_directive_argument_desc__Pdir_int(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("directive_argument_desc","Pdir_int") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pdir_int ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_directive_argument_desc__Pdir_int((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'char' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pdir_int" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(string "test/test2.ml" )(int 1067)(int 41761)(int 41786)(string "test/test2.ml" )(int 1067)(int 41761)(int 41790)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_directive_argument_desc__Pdir_ident x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident x : (*emit_core_type2*)(*emit_core_type_desc1*)longident= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident x : (*emit_core_type2*)(*emit_core_type_desc1*)longident= x
DBG12B:let (*P64*)process_types_directive_argument_desc__Pdir_ident(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident*(*decl_imp_core_type_list2*))):string = (process_types ("directive_argument_desc","Pdir_ident") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pdir_ident ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident0,(*emit_core_type_list2*)) -> (process_types_directive_argument_desc__Pdir_ident((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident (*emit_core_type1*)(*emit_core_type_desc1*)longident0)))
DBG1:Ptyp_constr1 'longident' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pdir_ident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident");(process_core_type_list[] )])(Ptyp_constr:"longident|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_directive_argument_desc__Pdir_bool x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)bool x : (*emit_core_type2*)(*emit_core_type_desc1*)bool= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)bool x : (*emit_core_type2*)(*emit_core_type_desc1*)bool= x
DBG12B:let (*P64*)process_types_directive_argument_desc__Pdir_bool(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)bool0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)bool*(*decl_imp_core_type_list2*))):string = (process_types ("directive_argument_desc","Pdir_bool") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)bool0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pdir_bool ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)bool0,(*emit_core_type_list2*)) -> (process_types_directive_argument_desc__Pdir_bool((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)bool (*emit_core_type1*)(*emit_core_type_desc1*)bool0)))
DBG1:Ptyp_constr1 'bool' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pdir_bool" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "bool");(process_core_type_list[] )])(Ptyp_constr:"bool|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'directive_argument_desc' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'directive_argument' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "directive_argument");(process_core_type_list[] )])(Ptyp_constr:"directive_argument|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG12C: let process_toplevel_phrase__Ptop_def x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)structure x : (*emit_core_type2*)(*emit_core_type_desc1*)structure= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)structure x : (*emit_core_type2*)(*emit_core_type_desc1*)structure= x
DBG12B:let (*P64*)process_types_toplevel_phrase__Ptop_def(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)structure0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)structure*(*decl_imp_core_type_list2*))):string = (process_types ("toplevel_phrase","Ptop_def") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)structure0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptop_def ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)structure0,(*emit_core_type_list2*)) -> (process_types_toplevel_phrase__Ptop_def((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)structure (*emit_core_type1*)(*emit_core_type_desc1*)structure0)))
DBG1:Ptyp_constr1 'structure' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptop_def" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "structure");(process_core_type_list[] )])(Ptyp_constr:"structure|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_toplevel_phrase__Ptop_dir x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)toplevel_directive x : (*emit_core_type2*)(*emit_core_type_desc1*)toplevel_directive= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)toplevel_directive x : (*emit_core_type2*)(*emit_core_type_desc1*)toplevel_directive= x
DBG12B:let (*P64*)process_types_toplevel_phrase__Ptop_dir(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)toplevel_directive0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)toplevel_directive*(*decl_imp_core_type_list2*))):string = (process_types ("toplevel_phrase","Ptop_dir") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)toplevel_directive0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptop_dir ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)toplevel_directive0,(*emit_core_type_list2*)) -> (process_types_toplevel_phrase__Ptop_dir((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)toplevel_directive (*emit_core_type1*)(*emit_core_type_desc1*)toplevel_directive0)))
DBG1:Ptyp_constr1 'toplevel_directive' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptop_dir" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "toplevel_directive");(process_core_type_list[] )])(Ptyp_constr:"toplevel_directive|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'module_expr' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 1040)(int 41025)(int 41038)(string "test/test2.ml" )(int 1040)(int 41025)(int 41044)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG12C: let process_structure_item_desc__Pstr_eval x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes x : (*emit_core_type2*)(*emit_core_type_desc1*)attributes= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes x : (*emit_core_type2*)(*emit_core_type_desc1*)attributes= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_eval(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)attributes1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)attributes*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_eval") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)attributes1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_eval ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)attributes1,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_eval((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes (*emit_core_type1*)(*emit_core_type_desc1*)attributes1)))
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_eval" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_value x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_value(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_value") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_value ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_value((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag (*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'value_binding' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'rec_flag' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_value" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(string "test/test2.ml" )(int 1003)(int 39424)(int 39453)(string "test/test2.ml" )(int 1003)(int 39424)(int 39466)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_primitive x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)value_description x : (*emit_core_type2*)(*emit_core_type_desc1*)value_description= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)value_description x : (*emit_core_type2*)(*emit_core_type_desc1*)value_description= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_primitive(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)value_description0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)value_description*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_primitive") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)value_description0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_primitive ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)value_description0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_primitive((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)value_description (*emit_core_type1*)(*emit_core_type_desc1*)value_description0)))
DBG1:Ptyp_constr1 'value_description' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_primitive" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_description");(process_core_type_list[] )])(Ptyp_constr:"value_description|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_type x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_type(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_type") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_type ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_type((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag (*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'type_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'rec_flag' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 1013)(int 39904)(int 39932)(string "test/test2.ml" )(int 1013)(int 39904)(int 39948)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_typext x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_extension x : (*emit_core_type2*)(*emit_core_type_desc1*)type_extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_extension x : (*emit_core_type2*)(*emit_core_type_desc1*)type_extension= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_typext(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)type_extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)type_extension*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_typext") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)type_extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_typext ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)type_extension0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_typext((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)type_extension (*emit_core_type1*)(*emit_core_type_desc1*)type_extension0)))
DBG1:Ptyp_constr1 'type_extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_typext" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_extension");(process_core_type_list[] )])(Ptyp_constr:"type_extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_exception x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_exception x : (*emit_core_type2*)(*emit_core_type_desc1*)type_exception= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_exception x : (*emit_core_type2*)(*emit_core_type_desc1*)type_exception= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_exception(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)type_exception0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)type_exception*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_exception") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)type_exception0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_exception ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)type_exception0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_exception((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)type_exception (*emit_core_type1*)(*emit_core_type_desc1*)type_exception0)))
DBG1:Ptyp_constr1 'type_exception' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_exception" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_exception");(process_core_type_list[] )])(Ptyp_constr:"type_exception|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_module x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_binding x : (*emit_core_type2*)(*emit_core_type_desc1*)module_binding= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_binding x : (*emit_core_type2*)(*emit_core_type_desc1*)module_binding= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_module(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_binding0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_binding*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_module") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_binding0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_module ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_binding0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_module((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_binding (*emit_core_type1*)(*emit_core_type_desc1*)module_binding0)))
DBG1:Ptyp_constr1 'module_binding' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_module" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_binding");(process_core_type_list[] )])(Ptyp_constr:"module_binding|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_recmodule x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_recmodule(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_recmodule") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_recmodule ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_recmodule((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'module_binding' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_binding");(process_core_type_list[] )])(Ptyp_constr:"module_binding|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_recmodule" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_binding");(process_core_type_list[] )])(string "test/test2.ml" )(int 1020)(int 40224)(int 40246)(string "test/test2.ml" )(int 1020)(int 40224)(int 40260)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_binding");(process_core_type_list[] )])(Ptyp_constr:"module_binding|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_modtype x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_modtype(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_modtype") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_modtype ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_modtype((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration (*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0)))
DBG1:Ptyp_constr1 'module_type_declaration' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_modtype" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_open x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)open_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)open_declaration= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_open(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)open_declaration0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)open_declaration*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_open") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)open_declaration0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_open ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)open_declaration0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_open((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)open_declaration (*emit_core_type1*)(*emit_core_type_desc1*)open_declaration0)))
DBG1:Ptyp_constr1 'open_declaration' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_declaration");(process_core_type_list[] )])(Ptyp_constr:"open_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_class x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_class(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_class") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_class ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_class((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'class_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_class" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 1024)(int 40446)(int 40464)(string "test/test2.ml" )(int 1024)(int 40446)(int 40481)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_class_type x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_class_type(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_class_type") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_class_type ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_class_type((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'class_type_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_class_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 1026)(int 40538)(int 40561)(string "test/test2.ml" )(int 1026)(int 40538)(int 40583)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_include x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)include_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)include_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)include_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)include_declaration= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_include(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)include_declaration0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)include_declaration*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_include") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)include_declaration0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_include ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)include_declaration0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_include((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)include_declaration (*emit_core_type1*)(*emit_core_type_desc1*)include_declaration0)))
DBG1:Ptyp_constr1 'include_declaration' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_include" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "include_declaration");(process_core_type_list[] )])(Ptyp_constr:"include_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_attribute x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute x : (*emit_core_type2*)(*emit_core_type_desc1*)attribute= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute x : (*emit_core_type2*)(*emit_core_type_desc1*)attribute= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_attribute(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)attribute0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)attribute*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_attribute") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)attribute0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_attribute ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)attribute0,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_attribute((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute (*emit_core_type1*)(*emit_core_type_desc1*)attribute0)))
DBG1:Ptyp_constr1 'attribute' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_attribute" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attribute");(process_core_type_list[] )])(Ptyp_constr:"attribute|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_structure_item_desc__Pstr_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes x : (*emit_core_type2*)(*emit_core_type_desc1*)attributes= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes x : (*emit_core_type2*)(*emit_core_type_desc1*)attributes= x
DBG12B:let (*P64*)process_types_structure_item_desc__Pstr_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)attributes1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)attributes*(*decl_imp_core_type_list2*))):string = (process_types ("structure_item_desc","Pstr_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)attributes1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pstr_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)attributes1,(*emit_core_type_list2*)) -> (process_types_structure_item_desc__Pstr_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes (*emit_core_type1*)(*emit_core_type_desc1*)attributes1)))
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pstr_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'structure_item_desc' my_process_core_type_list:DBG12C: let process_module_expr_desc__Pmod_ident x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_module_expr_desc__Pmod_ident(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("module_expr_desc","Pmod_ident") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmod_ident ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)) -> (process_types_module_expr_desc__Pmod_ident((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmod_ident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_expr_desc__Pmod_structure x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)structure x : (*emit_core_type2*)(*emit_core_type_desc1*)structure= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)structure x : (*emit_core_type2*)(*emit_core_type_desc1*)structure= x
DBG12B:let (*P64*)process_types_module_expr_desc__Pmod_structure(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)structure0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)structure*(*decl_imp_core_type_list2*))):string = (process_types ("module_expr_desc","Pmod_structure") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)structure0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmod_structure ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)structure0,(*emit_core_type_list2*)) -> (process_types_module_expr_desc__Pmod_structure((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)structure (*emit_core_type1*)(*emit_core_type_desc1*)structure0)))
DBG1:Ptyp_constr1 'structure' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmod_structure" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "structure");(process_core_type_list[] )])(Ptyp_constr:"structure|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_expr_desc__Pmod_functor x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter x : (*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter x : (*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12B:let (*P64*)process_types_module_expr_desc__Pmod_functor(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)functor_parameter0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_expr*(*decl_imp_core_type_list2*))):string = (process_types ("module_expr_desc","Pmod_functor") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)functor_parameter0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmod_functor ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)functor_parameter0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1,(*emit_core_type_list2*)) -> (process_types_module_expr_desc__Pmod_functor((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter (*emit_core_type1*)(*emit_core_type_desc1*)functor_parameter0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr (*emit_core_type1*)(*emit_core_type_desc1*)module_expr1)))
DBG1:Ptyp_constr1 'module_expr' my_process_core_type_list:DBG1:Ptyp_constr1 'functor_parameter' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmod_functor" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "functor_parameter");(process_core_type_list[] )])(Ptyp_constr:"functor_parameter|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_expr_desc__Pmod_apply x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12B:let (*P64*)process_types_module_expr_desc__Pmod_apply(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_expr*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_expr*(*decl_imp_core_type_list2*))):string = (process_types ("module_expr_desc","Pmod_apply") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmod_apply ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1,(*emit_core_type_list2*)) -> (process_types_module_expr_desc__Pmod_apply((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr (*emit_core_type1*)(*emit_core_type_desc1*)module_expr0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr (*emit_core_type1*)(*emit_core_type_desc1*)module_expr1)))
DBG1:Ptyp_constr1 'module_expr' my_process_core_type_list:DBG1:Ptyp_constr1 'module_expr' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmod_apply" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_expr_desc__Pmod_constraint x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12B:let (*P64*)process_types_module_expr_desc__Pmod_constraint(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_expr*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type*(*decl_imp_core_type_list2*))):string = (process_types ("module_expr_desc","Pmod_constraint") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmod_constraint ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*emit_core_type_list2*)) -> (process_types_module_expr_desc__Pmod_constraint((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr (*emit_core_type1*)(*emit_core_type_desc1*)module_expr0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type (*emit_core_type1*)(*emit_core_type_desc1*)module_type1)))
DBG1:Ptyp_constr1 'module_type' my_process_core_type_list:DBG1:Ptyp_constr1 'module_expr' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmod_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_expr_desc__Pmod_unpack x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_module_expr_desc__Pmod_unpack(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("module_expr_desc","Pmod_unpack") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmod_unpack ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)) -> (process_types_module_expr_desc__Pmod_unpack((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmod_unpack" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_expr_desc__Pmod_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_module_expr_desc__Pmod_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("module_expr_desc","Pmod_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmod_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_module_expr_desc__Pmod_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmod_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'module_expr_desc' my_process_core_type_list:DBG12C: let process_with_constraint__Pwith_type x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)type_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)type_declaration= x
DBG12B:let (*P64*)process_types_with_constraint__Pwith_type(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)type_declaration1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)type_declaration*(*decl_imp_core_type_list2*))):string = (process_types ("with_constraint","Pwith_type") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)type_declaration1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pwith_type ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)type_declaration1,(*emit_core_type_list2*)) -> (process_types_with_constraint__Pwith_type((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)type_declaration (*emit_core_type1*)(*emit_core_type_desc1*)type_declaration1)))
DBG1:Ptyp_constr1 'type_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pwith_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_with_constraint__Pwith_module x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_with_constraint__Pwith_module(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("with_constraint","Pwith_module") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pwith_module ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1,(*emit_core_type_list2*)) -> (process_types_with_constraint__Pwith_module((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pwith_module" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_with_constraint__Pwith_modtype x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12B:let (*P64*)process_types_with_constraint__Pwith_modtype(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type*(*decl_imp_core_type_list2*))):string = (process_types ("with_constraint","Pwith_modtype") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pwith_modtype ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*emit_core_type_list2*)) -> (process_types_with_constraint__Pwith_modtype((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type (*emit_core_type1*)(*emit_core_type_desc1*)module_type1)))
DBG1:Ptyp_constr1 'module_type' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pwith_modtype" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_with_constraint__Pwith_modtypesubst x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12B:let (*P64*)process_types_with_constraint__Pwith_modtypesubst(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type*(*decl_imp_core_type_list2*))):string = (process_types ("with_constraint","Pwith_modtypesubst") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pwith_modtypesubst ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*emit_core_type_list2*)) -> (process_types_with_constraint__Pwith_modtypesubst((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type (*emit_core_type1*)(*emit_core_type_desc1*)module_type1)))
DBG1:Ptyp_constr1 'module_type' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pwith_modtypesubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_with_constraint__Pwith_typesubst x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)type_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)type_declaration= x
DBG12B:let (*P64*)process_types_with_constraint__Pwith_typesubst(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)type_declaration1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)type_declaration*(*decl_imp_core_type_list2*))):string = (process_types ("with_constraint","Pwith_typesubst") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)type_declaration1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pwith_typesubst ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)type_declaration1,(*emit_core_type_list2*)) -> (process_types_with_constraint__Pwith_typesubst((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)type_declaration (*emit_core_type1*)(*emit_core_type_desc1*)type_declaration1)))
DBG1:Ptyp_constr1 'type_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pwith_typesubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_with_constraint__Pwith_modsubst x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_with_constraint__Pwith_modsubst(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("with_constraint","Pwith_modsubst") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pwith_modsubst ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1,(*emit_core_type_list2*)) -> (process_types_with_constraint__Pwith_modsubst((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pwith_modsubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'override_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'module_type' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'module_type' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 894)(int 35650)(int 35663)(string "test/test2.ml" )(int 894)(int 35650)(int 35669)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG12C: let process_signature_item_desc__Psig_value x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)value_description x : (*emit_core_type2*)(*emit_core_type_desc1*)value_description= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)value_description x : (*emit_core_type2*)(*emit_core_type_desc1*)value_description= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_value(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)value_description0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)value_description*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_value") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)value_description0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_value ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)value_description0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_value((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)value_description (*emit_core_type1*)(*emit_core_type_desc1*)value_description0)))
DBG1:Ptyp_constr1 'value_description' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_value" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_description");(process_core_type_list[] )])(Ptyp_constr:"value_description|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_type x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_type(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_type") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_type ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_type((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag (*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'type_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'rec_flag' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 871)(int 34415)(int 34443)(string "test/test2.ml" )(int 871)(int 34415)(int 34459)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_typesubst x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_typesubst(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_typesubst") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_typesubst ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_typesubst((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'type_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_typesubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 873)(int 34516)(int 34538)(string "test/test2.ml" )(int 873)(int 34516)(int 34554)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_typext x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_extension x : (*emit_core_type2*)(*emit_core_type_desc1*)type_extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_extension x : (*emit_core_type2*)(*emit_core_type_desc1*)type_extension= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_typext(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)type_extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)type_extension*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_typext") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)type_extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_typext ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)type_extension0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_typext((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)type_extension (*emit_core_type1*)(*emit_core_type_desc1*)type_extension0)))
DBG1:Ptyp_constr1 'type_extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_typext" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_extension");(process_core_type_list[] )])(Ptyp_constr:"type_extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_exception x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_exception x : (*emit_core_type2*)(*emit_core_type_desc1*)type_exception= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)type_exception x : (*emit_core_type2*)(*emit_core_type_desc1*)type_exception= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_exception(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)type_exception0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)type_exception*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_exception") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)type_exception0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_exception ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)type_exception0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_exception((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)type_exception (*emit_core_type1*)(*emit_core_type_desc1*)type_exception0)))
DBG1:Ptyp_constr1 'type_exception' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_exception" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_exception");(process_core_type_list[] )])(Ptyp_constr:"type_exception|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_module x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)module_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)module_declaration= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_module(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_declaration0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_declaration*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_module") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_declaration0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_module ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_declaration0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_module((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_declaration (*emit_core_type1*)(*emit_core_type_desc1*)module_declaration0)))
DBG1:Ptyp_constr1 'module_declaration' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_module" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_modsubst x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_substitution x : (*emit_core_type2*)(*emit_core_type_desc1*)module_substitution= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_substitution x : (*emit_core_type2*)(*emit_core_type_desc1*)module_substitution= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_modsubst(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_substitution0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_substitution*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_modsubst") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_substitution0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_modsubst ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_substitution0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_modsubst((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_substitution (*emit_core_type1*)(*emit_core_type_desc1*)module_substitution0)))
DBG1:Ptyp_constr1 'module_substitution' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_modsubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_substitution");(process_core_type_list[] )])(Ptyp_constr:"module_substitution|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_recmodule x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_recmodule(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_recmodule") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_recmodule ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_recmodule((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'module_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_recmodule" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 879)(int 34881)(int 34903)(string "test/test2.ml" )(int 879)(int 34881)(int 34921)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_modtype x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_modtype(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_modtype") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_modtype ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_modtype((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration (*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0)))
DBG1:Ptyp_constr1 'module_type_declaration' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_modtype" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_modtypesubst x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_modtypesubst(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_modtypesubst") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_modtypesubst ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_modtypesubst((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type_declaration (*emit_core_type1*)(*emit_core_type_desc1*)module_type_declaration0)))
DBG1:Ptyp_constr1 'module_type_declaration' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_modtypesubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_open x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description x : (*emit_core_type2*)(*emit_core_type_desc1*)open_description= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description x : (*emit_core_type2*)(*emit_core_type_desc1*)open_description= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_open(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)open_description0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)open_description*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_open") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)open_description0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_open ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)open_description0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_open((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description (*emit_core_type1*)(*emit_core_type_desc1*)open_description0)))
DBG1:Ptyp_constr1 'open_description' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_description");(process_core_type_list[] )])(Ptyp_constr:"open_description|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_include x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)include_description x : (*emit_core_type2*)(*emit_core_type_desc1*)include_description= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)include_description x : (*emit_core_type2*)(*emit_core_type_desc1*)include_description= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_include(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)include_description0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)include_description*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_include") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)include_description0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_include ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)include_description0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_include((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)include_description (*emit_core_type1*)(*emit_core_type_desc1*)include_description0)))
DBG1:Ptyp_constr1 'include_description' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_include" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "include_description");(process_core_type_list[] )])(Ptyp_constr:"include_description|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_class x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_class(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_class") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_class ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_class((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'class_description' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_description");(process_core_type_list[] )])(Ptyp_constr:"class_description|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_class" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_description");(process_core_type_list[] )])(string "test/test2.ml" )(int 886)(int 35274)(int 35292)(string "test/test2.ml" )(int 886)(int 35274)(int 35309)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_description");(process_core_type_list[] )])(Ptyp_constr:"class_description|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_class_type x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_class_type(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_class_type") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_class_type ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_class_type((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'class_type_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_class_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 888)(int 35366)(int 35389)(string "test/test2.ml" )(int 888)(int 35366)(int 35411)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_attribute x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute x : (*emit_core_type2*)(*emit_core_type_desc1*)attribute= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute x : (*emit_core_type2*)(*emit_core_type_desc1*)attribute= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_attribute(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)attribute0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)attribute*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_attribute") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)attribute0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_attribute ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)attribute0,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_attribute((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute (*emit_core_type1*)(*emit_core_type_desc1*)attribute0)))
DBG1:Ptyp_constr1 'attribute' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_attribute" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attribute");(process_core_type_list[] )])(Ptyp_constr:"attribute|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_signature_item_desc__Psig_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes x : (*emit_core_type2*)(*emit_core_type_desc1*)attributes= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes x : (*emit_core_type2*)(*emit_core_type_desc1*)attributes= x
DBG12B:let (*P64*)process_types_signature_item_desc__Psig_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)attributes1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)attributes*(*decl_imp_core_type_list2*))):string = (process_types ("signature_item_desc","Psig_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)attributes1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Psig_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)attributes1,(*emit_core_type_list2*)) -> (process_types_signature_item_desc__Psig_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)attributes (*emit_core_type1*)(*emit_core_type_desc1*)attributes1)))
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Psig_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'signature_item_desc' my_process_core_type_list:DBG12C: let process_functor_parameter__Unit x :string =match x with 
DBG12B:let (*P64*)process_types_functor_parameter__Unit(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("functor_parameter","Unit") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Unit ( (*emit_core_type_list2*)) -> (process_types_functor_parameter__Unit())
DBG1:constructor_declaration_new: (constructor "Unit" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_functor_parameter__Named x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12B:let (*P64*)process_types_functor_parameter__Named(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type*(*decl_imp_core_type_list2*))):string = (process_types ("functor_parameter","Named") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Named ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*emit_core_type_list2*)) -> (process_types_functor_parameter__Named((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type (*emit_core_type1*)(*emit_core_type_desc1*)module_type1)))
DBG1:Ptyp_constr1 'module_type' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 854)(int 33920)(int 33933)(string "test/test2.ml" )(int 854)(int 33920)(int 33939)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Named" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 854)(int 33920)(int 33933)(string "test/test2.ml" )(int 854)(int 33920)(int 33939)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 854)(int 33920)(int 33933)(string "test/test2.ml" )(int 854)(int 33920)(int 33946)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 854)(int 33920)(int 33933)(string "test/test2.ml" )(int 854)(int 33920)(int 33939)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_type_desc__Pmty_ident x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_module_type_desc__Pmty_ident(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("module_type_desc","Pmty_ident") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmty_ident ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)) -> (process_types_module_type_desc__Pmty_ident((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmty_ident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_type_desc__Pmty_signature x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)signature x : (*emit_core_type2*)(*emit_core_type_desc1*)signature= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)signature x : (*emit_core_type2*)(*emit_core_type_desc1*)signature= x
DBG12B:let (*P64*)process_types_module_type_desc__Pmty_signature(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)signature0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)signature*(*decl_imp_core_type_list2*))):string = (process_types ("module_type_desc","Pmty_signature") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)signature0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmty_signature ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)signature0,(*emit_core_type_list2*)) -> (process_types_module_type_desc__Pmty_signature((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)signature (*emit_core_type1*)(*emit_core_type_desc1*)signature0)))
DBG1:Ptyp_constr1 'signature' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmty_signature" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "signature");(process_core_type_list[] )])(Ptyp_constr:"signature|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_type_desc__Pmty_functor x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter x : (*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter x : (*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12B:let (*P64*)process_types_module_type_desc__Pmty_functor(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)functor_parameter0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type*(*decl_imp_core_type_list2*))):string = (process_types ("module_type_desc","Pmty_functor") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)functor_parameter0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmty_functor ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)functor_parameter0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type1,(*emit_core_type_list2*)) -> (process_types_module_type_desc__Pmty_functor((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)functor_parameter (*emit_core_type1*)(*emit_core_type_desc1*)functor_parameter0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type (*emit_core_type1*)(*emit_core_type_desc1*)module_type1)))
DBG1:Ptyp_constr1 'module_type' my_process_core_type_list:DBG1:Ptyp_constr1 'functor_parameter' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmty_functor" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "functor_parameter");(process_core_type_list[] )])(Ptyp_constr:"functor_parameter|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_type_desc__Pmty_with x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type x : (*emit_core_type2*)(*emit_core_type_desc1*)module_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_module_type_desc__Pmty_with(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_type0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_type*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("module_type_desc","Pmty_with") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_type0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmty_with ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_type0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_module_type_desc__Pmty_with((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_type (*emit_core_type1*)(*emit_core_type_desc1*)module_type0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'with_constraint' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "with_constraint");(process_core_type_list[] )])(Ptyp_constr:"with_constraint|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'module_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmty_with" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "with_constraint");(process_core_type_list[] )])(string "test/test2.ml" )(int 847)(int 33607)(int 33638)(string "test/test2.ml" )(int 847)(int 33607)(int 33653)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "with_constraint");(process_core_type_list[] )])(Ptyp_constr:"with_constraint|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_type_desc__Pmty_typeof x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12B:let (*P64*)process_types_module_type_desc__Pmty_typeof(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_expr*(*decl_imp_core_type_list2*))):string = (process_types ("module_type_desc","Pmty_typeof") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmty_typeof ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0,(*emit_core_type_list2*)) -> (process_types_module_type_desc__Pmty_typeof((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr (*emit_core_type1*)(*emit_core_type_desc1*)module_expr0)))
DBG1:Ptyp_constr1 'module_expr' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmty_typeof" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_type_desc__Pmty_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_module_type_desc__Pmty_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("module_type_desc","Pmty_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmty_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_module_type_desc__Pmty_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmty_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_module_type_desc__Pmty_alias x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_module_type_desc__Pmty_alias(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("module_type_desc","Pmty_alias") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pmty_alias ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)) -> (process_types_module_type_desc__Pmty_alias((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pmty_alias" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'module_type_desc' my_process_core_type_list:DBG12C: let process_class_field_kind__Cfk_virtual x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_class_field_kind__Cfk_virtual(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_kind","Cfk_virtual") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Cfk_virtual ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*emit_core_type_list2*)) -> (process_types_class_field_kind__Cfk_virtual((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Cfk_virtual" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_field_kind__Cfk_concrete x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)override_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)override_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)override_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)override_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_class_field_kind__Cfk_concrete(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)override_flag0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)override_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_kind","Cfk_concrete") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)override_flag0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Cfk_concrete ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)override_flag0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)) -> (process_types_class_field_kind__Cfk_concrete((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)override_flag (*emit_core_type1*)(*emit_core_type_desc1*)override_flag0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'override_flag' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Cfk_concrete" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "override_flag");(process_core_type_list[] )])(Ptyp_constr:"override_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_field_desc__Pcf_inherit x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)override_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)override_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)override_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)override_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_class_field_desc__Pcf_inherit(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)override_flag0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)override_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_expr*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_desc","Pcf_inherit") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)override_flag0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcf_inherit ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)override_flag0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_expr1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*emit_core_type_list2*)) -> (process_types_class_field_desc__Pcf_inherit((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)override_flag (*emit_core_type1*)(*emit_core_type_desc1*)override_flag0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr (*emit_core_type1*)(*emit_core_type_desc1*)class_expr1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option2)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 791)(int 30957)(int 31005)(string "test/test2.ml" )(int 791)(int 30957)(int 31011)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_expr' my_process_core_type_list:DBG1:Ptyp_constr1 'override_flag' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcf_inherit" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "override_flag");(process_core_type_list[] )])(Ptyp_constr:"override_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 791)(int 30957)(int 31005)(string "test/test2.ml" )(int 791)(int 30957)(int 31011)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 791)(int 30957)(int 31005)(string "test/test2.ml" )(int 791)(int 30957)(int 31015)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 791)(int 30957)(int 31005)(string "test/test2.ml" )(int 791)(int 30957)(int 31011)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_field_desc__Pcf_val x :string =match x with 
DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG12B:let (*P64*)process_types_class_field_desc__Pcf_val(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_desc","Pcf_val") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcf_val ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:0,(*emit_core_type_list2*)) -> (process_types_class_field_desc__Pcf_val((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list: (*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:0)))
DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcf_val" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31580)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31583)(string "test/test2.ml" )(int 802)(int 31555)(int 31595)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31598)(string "test/test2.ml" )(int 802)(int 31555)(int 31614)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_field_desc__Pcf_method x :string =match x with 
DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG12B:let (*P64*)process_types_class_field_desc__Pcf_method(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_desc","Pcf_method") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcf_method ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:0,(*emit_core_type_list2*)) -> (process_types_class_field_desc__Pcf_method((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list: (*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:0)))
DBG1:Ptyp_constr1 'class_field_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcf_method" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32442)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32445)(string "test/test2.ml" )(int 817)(int 32414)(int 32457)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32460)(string "test/test2.ml" )(int 817)(int 32414)(int 32476)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_field_desc__Pcf_constraint x :string =match x with 
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG12B:let (*P64*)process_types_class_field_desc__Pcf_constraint(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_desc","Pcf_constraint") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcf_constraint ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0,(*emit_core_type_list2*)) -> (process_types_class_field_desc__Pcf_constraint((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: (*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcf_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 822)(int 32681)(int 32704)(string "test/test2.ml" )(int 822)(int 32681)(int 32713)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 822)(int 32681)(int 32716)(string "test/test2.ml" )(int 822)(int 32681)(int 32725)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_field_desc__Pcf_initializer x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_class_field_desc__Pcf_initializer(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_desc","Pcf_initializer") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcf_initializer ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)) -> (process_types_class_field_desc__Pcf_initializer((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcf_initializer" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_field_desc__Pcf_attribute x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute x : (*emit_core_type2*)(*emit_core_type_desc1*)attribute= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute x : (*emit_core_type2*)(*emit_core_type_desc1*)attribute= x
DBG12B:let (*P64*)process_types_class_field_desc__Pcf_attribute(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)attribute0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)attribute*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_desc","Pcf_attribute") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)attribute0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcf_attribute ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)attribute0,(*emit_core_type_list2*)) -> (process_types_class_field_desc__Pcf_attribute((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute (*emit_core_type1*)(*emit_core_type_desc1*)attribute0)))
DBG1:Ptyp_constr1 'attribute' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcf_attribute" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attribute");(process_core_type_list[] )])(Ptyp_constr:"attribute|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_field_desc__Pcf_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_class_field_desc__Pcf_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("class_field_desc","Pcf_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcf_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_class_field_desc__Pcf_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcf_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'class_field_desc' my_process_core_type_list:DBG1:Ptyp_constr1 'class_field' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field");(process_core_type_list[] )])(Ptyp_constr:"class_field|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG12C: let process_class_expr_desc__Pcl_constr x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_class_expr_desc__Pcl_constr(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("class_expr_desc","Pcl_constr") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcl_constr ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_class_expr_desc__Pcl_constr((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcl_constr" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 742)(int 28774)(int 28808)(string "test/test2.ml" )(int 742)(int 28774)(int 28817)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_expr_desc__Pcl_structure x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_structure x : (*emit_core_type2*)(*emit_core_type_desc1*)class_structure= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_structure x : (*emit_core_type2*)(*emit_core_type_desc1*)class_structure= x
DBG12B:let (*P64*)process_types_class_expr_desc__Pcl_structure(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_structure0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_structure*(*decl_imp_core_type_list2*))):string = (process_types ("class_expr_desc","Pcl_structure") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_structure0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcl_structure ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_structure0,(*emit_core_type_list2*)) -> (process_types_class_expr_desc__Pcl_structure((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_structure (*emit_core_type1*)(*emit_core_type_desc1*)class_structure0)))
DBG1:Ptyp_constr1 'class_structure' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcl_structure" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_structure");(process_core_type_list[] )])(Ptyp_constr:"class_structure|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_expr_desc__Pcl_fun x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label x : (*emit_core_type2*)(*emit_core_type_desc1*)arg_label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label x : (*emit_core_type2*)(*emit_core_type_desc1*)arg_label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12B:let (*P64*)process_types_class_expr_desc__Pcl_fun(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern2,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr3,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)arg_label*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_expr*(*decl_imp_core_type_list2*))):string = (process_types ("class_expr_desc","Pcl_fun") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern2")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr3")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcl_fun ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern2,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_expr3,(*emit_core_type_list2*)) -> (process_types_class_expr_desc__Pcl_fun((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label (*emit_core_type1*)(*emit_core_type_desc1*)arg_label0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern2),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr (*emit_core_type1*)(*emit_core_type_desc1*)class_expr3)))
DBG1:Ptyp_constr1 'class_expr' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'arg_label' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcl_fun" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 745)(int 28928)(int 28955)(string "test/test2.ml" )(int 745)(int 28928)(int 28965)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_expr_desc__Pcl_apply x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_class_expr_desc__Pcl_apply(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_expr*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("class_expr_desc","Pcl_apply") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcl_apply ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_expr0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_class_expr_desc__Pcl_apply((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr (*emit_core_type1*)(*emit_core_type_desc1*)class_expr0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'arg_label' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29588)(string "test/test2.ml" )(int 757)(int 29557)(int 29597)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29600)(string "test/test2.ml" )(int 757)(int 29557)(int 29610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'class_expr' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcl_apply" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29588)(string "test/test2.ml" )(int 757)(int 29557)(int 29597)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29600)(string "test/test2.ml" )(int 757)(int 29557)(int 29610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 757)(int 29557)(int 29588)(string "test/test2.ml" )(int 757)(int 29557)(int 29610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29588)(string "test/test2.ml" )(int 757)(int 29557)(int 29597)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29600)(string "test/test2.ml" )(int 757)(int 29557)(int 29610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_expr_desc__Pcl_let x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12B:let (*P64*)process_types_class_expr_desc__Pcl_let(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_expr*(*decl_imp_core_type_list2*))):string = (process_types ("class_expr_desc","Pcl_let") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcl_let ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_expr2,(*emit_core_type_list2*)) -> (process_types_class_expr_desc__Pcl_let((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag (*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr (*emit_core_type1*)(*emit_core_type_desc1*)class_expr2)))
DBG1:Ptyp_constr1 'class_expr' my_process_core_type_list:DBG1:Ptyp_constr1 'value_binding' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'rec_flag' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcl_let" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(string "test/test2.ml" )(int 763)(int 29840)(int 29866)(string "test/test2.ml" )(int 763)(int 29840)(int 29879)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_expr_desc__Pcl_constraint x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type x : (*emit_core_type2*)(*emit_core_type_desc1*)class_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type x : (*emit_core_type2*)(*emit_core_type_desc1*)class_type= x
DBG12B:let (*P64*)process_types_class_expr_desc__Pcl_constraint(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_expr*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_type*(*decl_imp_core_type_list2*))):string = (process_types ("class_expr_desc","Pcl_constraint") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcl_constraint ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_expr0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_type1,(*emit_core_type_list2*)) -> (process_types_class_expr_desc__Pcl_constraint((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr (*emit_core_type1*)(*emit_core_type_desc1*)class_expr0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type (*emit_core_type1*)(*emit_core_type_desc1*)class_type1)))
DBG1:Ptyp_constr1 'class_type' my_process_core_type_list:DBG1:Ptyp_constr1 'class_expr' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcl_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type");(process_core_type_list[] )])(Ptyp_constr:"class_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_expr_desc__Pcl_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_class_expr_desc__Pcl_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("class_expr_desc","Pcl_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcl_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_class_expr_desc__Pcl_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcl_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_expr_desc__Pcl_open x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description x : (*emit_core_type2*)(*emit_core_type_desc1*)open_description= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description x : (*emit_core_type2*)(*emit_core_type_desc1*)open_description= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)class_expr= x
DBG12B:let (*P64*)process_types_class_expr_desc__Pcl_open(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)open_description0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)open_description*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_expr*(*decl_imp_core_type_list2*))):string = (process_types ("class_expr_desc","Pcl_open") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)open_description0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_expr1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcl_open ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)open_description0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_expr1,(*emit_core_type_list2*)) -> (process_types_class_expr_desc__Pcl_open((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description (*emit_core_type1*)(*emit_core_type_desc1*)open_description0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_expr (*emit_core_type1*)(*emit_core_type_desc1*)class_expr1)))
DBG1:Ptyp_constr1 'class_expr' my_process_core_type_list:DBG1:Ptyp_constr1 'open_description' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcl_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_description");(process_core_type_list[] )])(Ptyp_constr:"open_description|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'class_expr_desc' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'injectivity' my_process_core_type_list:DBG1:Ptyp_constr1 'variance' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28031)(string "test/test2.ml" )(int 716)(int 28015)(int 28040)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28044)(string "test/test2.ml" )(int 716)(int 28015)(int 28052)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28055)(string "test/test2.ml" )(int 716)(int 28015)(int 28066)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 716)(int 28015)(int 28044)(string "test/test2.ml" )(int 716)(int 28015)(int 28066)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28044)(string "test/test2.ml" )(int 716)(int 28015)(int 28052)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28055)(string "test/test2.ml" )(int 716)(int 28015)(int 28066)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(Ptyp_constr:"variance|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(Ptyp_constr:"injectivity|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG12C: let process_class_type_field_desc__Pctf_inherit x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type x : (*emit_core_type2*)(*emit_core_type_desc1*)class_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type x : (*emit_core_type2*)(*emit_core_type_desc1*)class_type= x
DBG12B:let (*P64*)process_types_class_type_field_desc__Pctf_inherit(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_type0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_type*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_field_desc","Pctf_inherit") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_type0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pctf_inherit ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_type0,(*emit_core_type_list2*)) -> (process_types_class_type_field_desc__Pctf_inherit((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type (*emit_core_type1*)(*emit_core_type_desc1*)class_type0)))
DBG1:Ptyp_constr1 'class_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pctf_inherit" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type");(process_core_type_list[] )])(Ptyp_constr:"class_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_field_desc__Pctf_val x :string =match x with 
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG12B:let (*P64*)process_types_class_type_field_desc__Pctf_val(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_field_desc","Pctf_val") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pctf_val ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0,(*emit_core_type_list2*)) -> (process_types_class_type_field_desc__Pctf_val((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: (*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pctf_val" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27517)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27520)(string "test/test2.ml" )(int 704)(int 27491)(int 27532)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27535)(string "test/test2.ml" )(int 704)(int 27491)(int 27547)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27550)(string "test/test2.ml" )(int 704)(int 27491)(int 27559)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_field_desc__Pctf_method x :string =match x with 
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG12B:let (*P64*)process_types_class_type_field_desc__Pctf_method(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_field_desc","Pctf_method") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pctf_method ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0,(*emit_core_type_list2*)) -> (process_types_class_type_field_desc__Pctf_method((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: (*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'virtual_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pctf_method" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27614)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27617)(string "test/test2.ml" )(int 706)(int 27585)(int 27629)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27632)(string "test/test2.ml" )(int 706)(int 27585)(int 27644)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27647)(string "test/test2.ml" )(int 706)(int 27585)(int 27656)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_field_desc__Pctf_constraint x :string =match x with 
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: x : (*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:= x
DBG12B:let (*P64*)process_types_class_type_field_desc__Pctf_constraint(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_field_desc","Pctf_constraint") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pctf_constraint ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0,(*emit_core_type_list2*)) -> (process_types_class_type_field_desc__Pctf_constraint((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list: (*emit_core_type1*)(*emit_core_type_desc1*)Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pctf_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 710)(int 27758)(int 27782)(string "test/test2.ml" )(int 710)(int 27758)(int 27791)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 710)(int 27758)(int 27794)(string "test/test2.ml" )(int 710)(int 27758)(int 27803)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_field_desc__Pctf_attribute x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute x : (*emit_core_type2*)(*emit_core_type_desc1*)attribute= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute x : (*emit_core_type2*)(*emit_core_type_desc1*)attribute= x
DBG12B:let (*P64*)process_types_class_type_field_desc__Pctf_attribute(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)attribute0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)attribute*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_field_desc","Pctf_attribute") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)attribute0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pctf_attribute ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)attribute0,(*emit_core_type_list2*)) -> (process_types_class_type_field_desc__Pctf_attribute((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)attribute (*emit_core_type1*)(*emit_core_type_desc1*)attribute0)))
DBG1:Ptyp_constr1 'attribute' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pctf_attribute" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attribute");(process_core_type_list[] )])(Ptyp_constr:"attribute|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_field_desc__Pctf_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_class_type_field_desc__Pctf_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_field_desc","Pctf_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pctf_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_class_type_field_desc__Pctf_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pctf_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'class_type_field_desc' my_process_core_type_list:DBG1:Ptyp_constr1 'class_type_field' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_field");(process_core_type_list[] )])(Ptyp_constr:"class_type_field|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG12C: let process_class_type_desc__Pcty_constr x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_class_type_desc__Pcty_constr(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_desc","Pcty_constr") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcty_constr ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_class_type_desc__Pcty_constr((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcty_constr" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 671)(int 26199)(int 26234)(string "test/test2.ml" )(int 671)(int 26199)(int 26243)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_desc__Pcty_signature x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_signature x : (*emit_core_type2*)(*emit_core_type_desc1*)class_signature= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_signature x : (*emit_core_type2*)(*emit_core_type_desc1*)class_signature= x
DBG12B:let (*P64*)process_types_class_type_desc__Pcty_signature(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_signature0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_signature*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_desc","Pcty_signature") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_signature0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcty_signature ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_signature0,(*emit_core_type_list2*)) -> (process_types_class_type_desc__Pcty_signature((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_signature (*emit_core_type1*)(*emit_core_type_desc1*)class_signature0)))
DBG1:Ptyp_constr1 'class_signature' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcty_signature" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_signature");(process_core_type_list[] )])(Ptyp_constr:"class_signature|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_desc__Pcty_arrow x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label x : (*emit_core_type2*)(*emit_core_type_desc1*)arg_label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type x : (*emit_core_type2*)(*emit_core_type_desc1*)class_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label x : (*emit_core_type2*)(*emit_core_type_desc1*)arg_label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type x : (*emit_core_type2*)(*emit_core_type_desc1*)class_type= x
DBG12B:let (*P64*)process_types_class_type_desc__Pcty_arrow(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_type2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)arg_label*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_type*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_desc","Pcty_arrow") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_type2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcty_arrow ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_type2,(*emit_core_type_list2*)) -> (process_types_class_type_desc__Pcty_arrow((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label (*emit_core_type1*)(*emit_core_type_desc1*)arg_label0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type (*emit_core_type1*)(*emit_core_type_desc1*)class_type2)))
DBG1:Ptyp_constr1 'class_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'arg_label' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcty_arrow" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type");(process_core_type_list[] )])(Ptyp_constr:"class_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_desc__Pcty_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_class_type_desc__Pcty_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_desc","Pcty_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcty_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_class_type_desc__Pcty_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcty_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_class_type_desc__Pcty_open x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description x : (*emit_core_type2*)(*emit_core_type_desc1*)open_description= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type x : (*emit_core_type2*)(*emit_core_type_desc1*)class_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description x : (*emit_core_type2*)(*emit_core_type_desc1*)open_description= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type x : (*emit_core_type2*)(*emit_core_type_desc1*)class_type= x
DBG12B:let (*P64*)process_types_class_type_desc__Pcty_open(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)open_description0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)open_description*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_type*(*decl_imp_core_type_list2*))):string = (process_types ("class_type_desc","Pcty_open") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)open_description0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcty_open ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)open_description0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_type1,(*emit_core_type_list2*)) -> (process_types_class_type_desc__Pcty_open((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)open_description (*emit_core_type1*)(*emit_core_type_desc1*)open_description0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_type (*emit_core_type1*)(*emit_core_type_desc1*)class_type1)))
DBG1:Ptyp_constr1 'class_type' my_process_core_type_list:DBG1:Ptyp_constr1 'open_description' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcty_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_description");(process_core_type_list[] )])(Ptyp_constr:"open_description|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type");(process_core_type_list[] )])(Ptyp_constr:"class_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'class_type_desc' my_process_core_type_list:DBG12C: let process_extension_constructor_kind__Pext_decl x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constructor_arguments x : (*emit_core_type2*)(*emit_core_type_desc1*)constructor_arguments= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constructor_arguments x : (*emit_core_type2*)(*emit_core_type_desc1*)constructor_arguments= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_extension_constructor_kind__Pext_decl(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)constructor_arguments1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)constructor_arguments*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("extension_constructor_kind","Pext_decl") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)constructor_arguments1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pext_decl ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)constructor_arguments1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*emit_core_type_list2*)) -> (process_types_extension_constructor_kind__Pext_decl((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)constructor_arguments (*emit_core_type1*)(*emit_core_type_desc1*)constructor_arguments1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option2)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'constructor_arguments' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24815)(string "test/test2.ml" )(int 624)(int 24798)(int 24821)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pext_decl" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24815)(string "test/test2.ml" )(int 624)(int 24798)(int 24821)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24815)(string "test/test2.ml" )(int 624)(int 24798)(int 24825)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24815)(string "test/test2.ml" )(int 624)(int 24798)(int 24821)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constructor_arguments");(process_core_type_list[] )])(Ptyp_constr:"constructor_arguments|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24857)(string "test/test2.ml" )(int 624)(int 24798)(int 24866)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_extension_constructor_kind__Pext_rebind x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_extension_constructor_kind__Pext_rebind(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("extension_constructor_kind","Pext_rebind") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pext_rebind ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)) -> (process_types_extension_constructor_kind__Pext_rebind((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pext_rebind" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'extension_constructor' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'extension_constructor_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'extension_constructor' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension_constructor");(process_core_type_list[] )])(Ptyp_constr:"extension_constructor|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'injectivity' my_process_core_type_list:DBG1:Ptyp_constr1 'variance' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23931)(string "test/test2.ml" )(int 600)(int 23912)(int 23940)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23944)(string "test/test2.ml" )(int 600)(int 23912)(int 23952)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23955)(string "test/test2.ml" )(int 600)(int 23912)(int 23966)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 600)(int 23912)(int 23944)(string "test/test2.ml" )(int 600)(int 23912)(int 23966)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23944)(string "test/test2.ml" )(int 600)(int 23912)(int 23952)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23955)(string "test/test2.ml" )(int 600)(int 23912)(int 23966)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(Ptyp_constr:"variance|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(Ptyp_constr:"injectivity|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG12C: let process_constructor_arguments__Pcstr_tuple x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_constructor_arguments__Pcstr_tuple(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("constructor_arguments","Pcstr_tuple") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcstr_tuple ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_constructor_arguments__Pcstr_tuple((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcstr_tuple" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 584)(int 23175)(int 23194)(string "test/test2.ml" )(int 584)(int 23175)(int 23203)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_constructor_arguments__Pcstr_record x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_constructor_arguments__Pcstr_record(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("constructor_arguments","Pcstr_record") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pcstr_record ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_constructor_arguments__Pcstr_record((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'label_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(Ptyp_constr:"label_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pcstr_record" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 585)(int 23209)(int 23229)(string "test/test2.ml" )(int 585)(int 23209)(int 23246)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(Ptyp_constr:"label_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'constructor_arguments' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 576)(int 22924)(int 22937)(string "test/test2.ml" )(int 576)(int 22924)(int 22943)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'mutable_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG12C: let process_type_kind__Ptype_abstract x :string =match x with 
DBG12B:let (*P64*)process_types_type_kind__Ptype_abstract(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("type_kind","Ptype_abstract") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptype_abstract ( (*emit_core_type_list2*)) -> (process_types_type_kind__Ptype_abstract())
DBG1:constructor_declaration_new: (constructor "Ptype_abstract" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_type_kind__Ptype_variant x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_type_kind__Ptype_variant(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("type_kind","Ptype_variant") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptype_variant ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_type_kind__Ptype_variant((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'constructor_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constructor_declaration");(process_core_type_list[] )])(Ptyp_constr:"constructor_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptype_variant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constructor_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 556)(int 22109)(int 22130)(string "test/test2.ml" )(int 556)(int 22109)(int 22153)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constructor_declaration");(process_core_type_list[] )])(Ptyp_constr:"constructor_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_type_kind__Ptype_record x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_type_kind__Ptype_record(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("type_kind","Ptype_record") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptype_record ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_type_kind__Ptype_record((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'label_declaration' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(Ptyp_constr:"label_declaration|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptype_record" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 557)(int 22159)(int 22179)(string "test/test2.ml" )(int 557)(int 22159)(int 22196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(Ptyp_constr:"label_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_type_kind__Ptype_open x :string =match x with 
DBG12B:let (*P64*)process_types_type_kind__Ptype_open(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("type_kind","Ptype_open") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptype_open ( (*emit_core_type_list2*)) -> (process_types_type_kind__Ptype_open())
DBG1:constructor_declaration_new: (constructor "Ptype_open" {Pcstr_tuple:my_process_core_type_list:})
DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'private_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'type_kind' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20644)(string "test/test2.ml" )(int 527)(int 20627)(int 20653)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20656)(string "test/test2.ml" )(int 527)(int 20627)(int 20665)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20668)(string "test/test2.ml" )(int 527)(int 20627)(int 20676)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'injectivity' my_process_core_type_list:DBG1:Ptyp_constr1 'variance' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20553)(string "test/test2.ml" )(int 525)(int 20535)(int 20562)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20566)(string "test/test2.ml" )(int 525)(int 20535)(int 20574)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20577)(string "test/test2.ml" )(int 525)(int 20535)(int 20588)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 525)(int 20535)(int 20566)(string "test/test2.ml" )(int 525)(int 20535)(int 20588)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20566)(string "test/test2.ml" )(int 525)(int 20535)(int 20574)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20577)(string "test/test2.ml" )(int 525)(int 20535)(int 20588)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(Ptyp_constr:"variance|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(Ptyp_constr:"injectivity|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'binding_op' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "binding_op");(process_core_type_list[] )])(Ptyp_constr:"binding_op|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'binding_op' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG12C: let process_expression_desc__Pexp_ident x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_ident(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_ident") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_ident ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_ident((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_ident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_constant x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constant x : (*emit_core_type2*)(*emit_core_type_desc1*)constant= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constant x : (*emit_core_type2*)(*emit_core_type_desc1*)constant= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_constant(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)constant0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)constant*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_constant") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)constant0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_constant ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)constant0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_constant((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)constant (*emit_core_type1*)(*emit_core_type_desc1*)constant0)))
DBG1:Ptyp_constr1 'constant' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_constant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constant");(process_core_type_list[] )])(Ptyp_constr:"constant|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_let x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)rec_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_let(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_let") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_let ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression2,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_let((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)rec_flag (*emit_core_type1*)(*emit_core_type_desc1*)rec_flag0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression2)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'value_binding' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'rec_flag' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_let" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(string "test/test2.ml" )(int 363)(int 13988)(int 14015)(string "test/test2.ml" )(int 363)(int 13988)(int 14028)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_function x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)cases x : (*emit_core_type2*)(*emit_core_type_desc1*)cases= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)cases x : (*emit_core_type2*)(*emit_core_type_desc1*)cases= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_function(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)cases0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)cases*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_function") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)cases0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_function ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)cases0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_function((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)cases (*emit_core_type1*)(*emit_core_type_desc1*)cases0)))
DBG1:Ptyp_constr1 'cases' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_function" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "cases");(process_core_type_list[] )])(Ptyp_constr:"cases|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_fun x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label x : (*emit_core_type2*)(*emit_core_type_desc1*)arg_label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label x : (*emit_core_type2*)(*emit_core_type_desc1*)arg_label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_fun(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern2,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression3,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)arg_label*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_fun") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern2")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression3")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_fun ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern2,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression3,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_fun((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label (*emit_core_type1*)(*emit_core_type_desc1*)arg_label0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern2),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression3)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'arg_label' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_fun" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 371)(int 14452)(int 14480)(string "test/test2.ml" )(int 371)(int 14452)(int 14490)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_apply x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_apply(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_apply") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_apply ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_apply((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'arg_label' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15452)(string "test/test2.ml" )(int 392)(int 15420)(int 15461)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15464)(string "test/test2.ml" )(int 392)(int 15420)(int 15474)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_apply" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15452)(string "test/test2.ml" )(int 392)(int 15420)(int 15461)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15464)(string "test/test2.ml" )(int 392)(int 15420)(int 15474)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 392)(int 15420)(int 15452)(string "test/test2.ml" )(int 392)(int 15420)(int 15474)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15452)(string "test/test2.ml" )(int 392)(int 15420)(int 15461)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15464)(string "test/test2.ml" )(int 392)(int 15420)(int 15474)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_match x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)cases x : (*emit_core_type2*)(*emit_core_type_desc1*)cases= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)cases x : (*emit_core_type2*)(*emit_core_type_desc1*)cases= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_match(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)cases1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)cases*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_match") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)cases1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_match ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)cases1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_match((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)cases (*emit_core_type1*)(*emit_core_type_desc1*)cases1)))
DBG1:Ptyp_constr1 'cases' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_match" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "cases");(process_core_type_list[] )])(Ptyp_constr:"cases|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_try x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)cases x : (*emit_core_type2*)(*emit_core_type_desc1*)cases= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)cases x : (*emit_core_type2*)(*emit_core_type_desc1*)cases= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_try(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)cases1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)cases*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_try") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)cases1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_try ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)cases1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_try((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)cases (*emit_core_type1*)(*emit_core_type_desc1*)cases1)))
DBG1:Ptyp_constr1 'cases' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_try" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "cases");(process_core_type_list[] )])(Ptyp_constr:"cases|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_tuple x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_tuple(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_tuple") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_tuple ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_tuple((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_tuple" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 406)(int 16048)(int 16066)(string "test/test2.ml" )(int 406)(int 16048)(int 16076)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_construct x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_construct(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_construct") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_construct ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_construct((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_construct" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 410)(int 16154)(int 16192)(string "test/test2.ml" )(int 410)(int 16154)(int 16202)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_variant x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)label x : (*emit_core_type2*)(*emit_core_type_desc1*)label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)label x : (*emit_core_type2*)(*emit_core_type_desc1*)label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_variant(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)label0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)label*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_variant") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)label0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_variant ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)label0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_variant((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)label (*emit_core_type1*)(*emit_core_type_desc1*)label0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_variant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 416)(int 16418)(int 16446)(string "test/test2.ml" )(int 416)(int 16418)(int 16456)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_record x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_record(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_record") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_record ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_record((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16613)(string "test/test2.ml" )(int 421)(int 16593)(int 16626)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16629)(string "test/test2.ml" )(int 421)(int 16593)(int 16639)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_record" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16613)(string "test/test2.ml" )(int 421)(int 16593)(int 16626)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16629)(string "test/test2.ml" )(int 421)(int 16593)(int 16639)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 421)(int 16593)(int 16613)(string "test/test2.ml" )(int 421)(int 16593)(int 16639)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16613)(string "test/test2.ml" )(int 421)(int 16593)(int 16626)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16629)(string "test/test2.ml" )(int 421)(int 16593)(int 16639)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16648)(string "test/test2.ml" )(int 421)(int 16593)(int 16658)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_field x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_field(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_field") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_field ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_field((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_field" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_setfield x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_setfield(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_setfield") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_setfield ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression2,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_setfield((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression2)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_setfield" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_array x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_array(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_array") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_array ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_array((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_array" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 431)(int 17043)(int 17061)(string "test/test2.ml" )(int 431)(int 17043)(int 17071)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_ifthenelse x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_ifthenelse(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_ifthenelse") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_ifthenelse ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_ifthenelse((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option2)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_ifthenelse" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 432)(int 17107)(int 17156)(string "test/test2.ml" )(int 432)(int 17107)(int 17166)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_sequence x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_sequence(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_sequence") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_sequence ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_sequence((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_sequence" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_while x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_while(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_while") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_while ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_while((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_while" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_for x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)direction_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)direction_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)direction_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)direction_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_for(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression2,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)direction_flag3,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression4,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)direction_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_for") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression2")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)direction_flag3")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression4")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_for ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression2,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)direction_flag3,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression4,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_for((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression2),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)direction_flag (*emit_core_type1*)(*emit_core_type_desc1*)direction_flag3),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression4)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'direction_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_for" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "direction_flag");(process_core_type_list[] )])(Ptyp_constr:"direction_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_constraint x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_constraint(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_constraint") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_constraint ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_constraint((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_coerce x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_coerce(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_coerce") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_coerce ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type2,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_coerce((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type2)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_coerce" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 444)(int 17790)(int 17822)(string "test/test2.ml" )(int 444)(int 17790)(int 17831)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_send x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_send(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_send") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_send ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_send((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc1)))
DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_send" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 449)(int 18002)(int 18032)(string "test/test2.ml" )(int 449)(int 18002)(int 18037)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_new x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_new(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_new") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_new ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_new((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_new" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_setinstvar x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_setinstvar(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_setinstvar") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_setinstvar ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_setinstvar((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_setinstvar" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 451)(int 18106)(int 18129)(string "test/test2.ml" )(int 451)(int 18106)(int 18134)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_override x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_override(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_override") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_override ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_override((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18200)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18203)(string "test/test2.ml" )(int 452)(int 18169)(int 18213)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_override" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18200)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18203)(string "test/test2.ml" )(int 452)(int 18169)(int 18213)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18213)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18200)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18203)(string "test/test2.ml" )(int 452)(int 18169)(int 18213)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_letmodule x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_letmodule(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_expr*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_letmodule") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_letmodule ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_expr1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression2,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_letmodule((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr (*emit_core_type1*)(*emit_core_type_desc1*)module_expr1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression2)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'module_expr' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 454)(int 18263)(int 18285)(string "test/test2.ml" )(int 454)(int 18263)(int 18291)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_letmodule" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 454)(int 18263)(int 18285)(string "test/test2.ml" )(int 454)(int 18263)(int 18291)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 454)(int 18263)(int 18285)(string "test/test2.ml" )(int 454)(int 18263)(int 18298)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 454)(int 18263)(int 18285)(string "test/test2.ml" )(int 454)(int 18263)(int 18291)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_letexception x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension_constructor x : (*emit_core_type2*)(*emit_core_type_desc1*)extension_constructor= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension_constructor x : (*emit_core_type2*)(*emit_core_type_desc1*)extension_constructor= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_letexception(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension_constructor0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension_constructor*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_letexception") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension_constructor0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_letexception ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension_constructor0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_letexception((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension_constructor (*emit_core_type1*)(*emit_core_type_desc1*)extension_constructor0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'extension_constructor' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_letexception" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension_constructor");(process_core_type_list[] )])(Ptyp_constr:"extension_constructor|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_assert x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_assert(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_assert") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_assert ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_assert((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_assert" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_lazy x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_lazy(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_lazy") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_lazy ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_lazy((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_lazy" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_poly x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_poly(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_poly") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_poly ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_poly((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_poly" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 463)(int 18645)(int 18675)(string "test/test2.ml" )(int 463)(int 18645)(int 18684)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_object x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_structure x : (*emit_core_type2*)(*emit_core_type_desc1*)class_structure= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)class_structure x : (*emit_core_type2*)(*emit_core_type_desc1*)class_structure= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_object(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)class_structure0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)class_structure*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_object") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)class_structure0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_object ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)class_structure0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_object((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)class_structure (*emit_core_type1*)(*emit_core_type_desc1*)class_structure0)))
DBG1:Ptyp_constr1 'class_structure' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_object" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_structure");(process_core_type_list[] )])(Ptyp_constr:"class_structure|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_newtype x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_newtype(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_newtype") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_newtype ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_newtype((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_newtype" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 470)(int 18937)(int 18957)(string "test/test2.ml" )(int 470)(int 18937)(int 18963)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_pack x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr x : (*emit_core_type2*)(*emit_core_type_desc1*)module_expr= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_pack(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)module_expr*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_pack") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_pack ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)module_expr0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_pack((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)module_expr (*emit_core_type1*)(*emit_core_type_desc1*)module_expr0)))
DBG1:Ptyp_constr1 'module_expr' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_pack" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_open x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)open_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)open_declaration x : (*emit_core_type2*)(*emit_core_type_desc1*)open_declaration= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)expression x : (*emit_core_type2*)(*emit_core_type_desc1*)expression= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_open(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)open_declaration0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)open_declaration*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)expression*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_open") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)open_declaration0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)expression1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_open ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)open_declaration0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)expression1,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_open((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)open_declaration (*emit_core_type1*)(*emit_core_type_desc1*)open_declaration0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)expression (*emit_core_type1*)(*emit_core_type_desc1*)expression1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'open_declaration' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_declaration");(process_core_type_list[] )])(Ptyp_constr:"open_declaration|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_letop x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)letop x : (*emit_core_type2*)(*emit_core_type_desc1*)letop= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)letop x : (*emit_core_type2*)(*emit_core_type_desc1*)letop= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_letop(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)letop0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)letop*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_letop") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)letop0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_letop ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)letop0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_letop((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)letop (*emit_core_type1*)(*emit_core_type_desc1*)letop0)))
DBG1:Ptyp_constr1 'letop' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_letop" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "letop");(process_core_type_list[] )])(Ptyp_constr:"letop|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_expression_desc__Pexp_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pexp_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_expression_desc__Pexp_unreachable x :string =match x with 
DBG12B:let (*P64*)process_types_expression_desc__Pexp_unreachable(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("expression_desc","Pexp_unreachable") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pexp_unreachable ( (*emit_core_type_list2*)) -> (process_types_expression_desc__Pexp_unreachable())
DBG1:constructor_declaration_new: (constructor "Pexp_unreachable" {Pcstr_tuple:my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location_stack' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'expression_desc' my_process_core_type_list:DBG12C: let process_pattern_desc__Ppat_any x :string =match x with 
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_any(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_any") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_any ( (*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_any())
DBG1:constructor_declaration_new: (constructor "Ppat_any" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_var x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_var(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_var") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_var ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_var((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc0)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_var" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 296)(int 11247)(int 11263)(string "test/test2.ml" )(int 296)(int 11247)(int 11269)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_alias x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_alias(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_alias") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_alias ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc1,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_alias((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc1)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_alias" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 297)(int 11313)(int 11341)(string "test/test2.ml" )(int 297)(int 11313)(int 11347)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_constant x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constant x : (*emit_core_type2*)(*emit_core_type_desc1*)constant= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constant x : (*emit_core_type2*)(*emit_core_type_desc1*)constant= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_constant(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)constant0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)constant*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_constant") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)constant0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_constant ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)constant0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_constant((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)constant (*emit_core_type1*)(*emit_core_type_desc1*)constant0)))
DBG1:Ptyp_constr1 'constant' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_constant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constant");(process_core_type_list[] )])(Ptyp_constr:"constant|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_interval x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constant x : (*emit_core_type2*)(*emit_core_type_desc1*)constant= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constant x : (*emit_core_type2*)(*emit_core_type_desc1*)constant= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constant x : (*emit_core_type2*)(*emit_core_type_desc1*)constant= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)constant x : (*emit_core_type2*)(*emit_core_type_desc1*)constant= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_interval(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)constant0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)constant1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)constant*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)constant*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_interval") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)constant0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)constant1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_interval ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)constant0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)constant1,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_interval((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)constant (*emit_core_type1*)(*emit_core_type_desc1*)constant0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)constant (*emit_core_type1*)(*emit_core_type_desc1*)constant1)))
DBG1:Ptyp_constr1 'constant' my_process_core_type_list:DBG1:Ptyp_constr1 'constant' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_interval" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constant");(process_core_type_list[] )])(Ptyp_constr:"constant|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constant");(process_core_type_list[] )])(Ptyp_constr:"constant|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_tuple x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_tuple(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_tuple") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_tuple ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_tuple((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_tuple" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 306)(int 11697)(int 11715)(string "test/test2.ml" )(int 306)(int 11697)(int 11722)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_construct x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_construct(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_construct") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_construct ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_construct((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11847)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11852)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11855)(string "test/test2.ml" )(int 310)(int 11798)(int 11862)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11847)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_construct" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11847)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11852)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11855)(string "test/test2.ml" )(int 310)(int 11798)(int 11862)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11862)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11847)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11852)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11855)(string "test/test2.ml" )(int 310)(int 11798)(int 11862)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11847)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_variant x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)label x : (*emit_core_type2*)(*emit_core_type_desc1*)label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)label x : (*emit_core_type2*)(*emit_core_type_desc1*)label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_variant(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)label0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)label*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_variant") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)label0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_variant ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)label0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_variant((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)label (*emit_core_type1*)(*emit_core_type_desc1*)label0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_variant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 318)(int 12176)(int 12204)(string "test/test2.ml" )(int 318)(int 12176)(int 12211)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_record x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)closed_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)closed_flag= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_record(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_record") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_record ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_record((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag (*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1)))
DBG1:Ptyp_constr1 'closed_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12370)(string "test/test2.ml" )(int 323)(int 12350)(int 12383)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12386)(string "test/test2.ml" )(int 323)(int 12350)(int 12393)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_record" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12370)(string "test/test2.ml" )(int 323)(int 12350)(int 12383)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12386)(string "test/test2.ml" )(int 323)(int 12350)(int 12393)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 323)(int 12350)(int 12370)(string "test/test2.ml" )(int 323)(int 12350)(int 12393)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12370)(string "test/test2.ml" )(int 323)(int 12350)(int 12383)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12386)(string "test/test2.ml" )(int 323)(int 12350)(int 12393)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "closed_flag");(process_core_type_list[] )])(Ptyp_constr:"closed_flag|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_array x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_array(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_array") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_array ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_array((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_array" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 332)(int 12729)(int 12747)(string "test/test2.ml" )(int 332)(int 12729)(int 12754)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_or x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_or(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_or") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_or ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern1,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_or((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern1)))
DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_or" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_constraint x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_constraint(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_constraint") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_constraint ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_constraint((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_type x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_type(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_type") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_type ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_type((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0)))
DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_lazy x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_lazy(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_lazy") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_lazy ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_lazy((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern0)))
DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_lazy" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_unpack x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_unpack(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_unpack") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_unpack ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_unpack((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc0)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 337)(int 13033)(int 13052)(string "test/test2.ml" )(int 337)(int 13033)(int 13058)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_unpack" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 337)(int 13033)(int 13052)(string "test/test2.ml" )(int 337)(int 13033)(int 13058)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 337)(int 13033)(int 13052)(string "test/test2.ml" )(int 337)(int 13033)(int 13065)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 337)(int 13033)(int 13052)(string "test/test2.ml" )(int 337)(int 13033)(int 13058)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_exception x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_exception(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_exception") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_exception ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_exception((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern0)))
DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_exception" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_pattern_desc__Ppat_open x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12B:let (*P64*)process_types_pattern_desc__Ppat_open(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*))):string = (process_types ("pattern_desc","Ppat_open") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ppat_open ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern1,(*emit_core_type_list2*)) -> (process_types_pattern_desc__Ppat_open((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern1)))
DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ppat_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location_stack' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'pattern_desc' my_process_core_type_list:DBG12C: let process_object_field_desc__Otag x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_object_field_desc__Otag(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("object_field_desc","Otag") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Otag ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*emit_core_type_list2*)) -> (process_types_object_field_desc__Otag((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Otag" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 282)(int 10894)(int 10906)(string "test/test2.ml" )(int 282)(int 10894)(int 10911)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_object_field_desc__Oinherit x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_object_field_desc__Oinherit(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("object_field_desc","Oinherit") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Oinherit ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*emit_core_type_list2*)) -> (process_types_object_field_desc__Oinherit((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Oinherit" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'object_field_desc' my_process_core_type_list:DBG12C: let process_row_field_desc__Rtag x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)bool x : (*emit_core_type2*)(*emit_core_type_desc1*)bool= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)loc x : (*emit_core_type2*)(*emit_core_type_desc1*)loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)bool x : (*emit_core_type2*)(*emit_core_type_desc1*)bool= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_row_field_desc__Rtag(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)bool1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)bool*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("row_field_desc","Rtag") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)bool1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Rtag ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)bool1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list2,(*emit_core_type_list2*)) -> (process_types_row_field_desc__Rtag((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)loc (*emit_core_type1*)(*emit_core_type_desc1*)loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)bool (*emit_core_type1*)(*emit_core_type_desc1*)bool1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list2)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'bool' my_process_core_type_list:DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Rtag" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 261)(int 10078)(int 10090)(string "test/test2.ml" )(int 261)(int 10078)(int 10095)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "bool");(process_core_type_list[] )])(Ptyp_constr:"bool|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 261)(int 10078)(int 10109)(string "test/test2.ml" )(int 261)(int 10078)(int 10118)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_row_field_desc__Rinherit x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_row_field_desc__Rinherit(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("row_field_desc","Rinherit") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Rinherit ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*emit_core_type_list2*)) -> (process_types_row_field_desc__Rinherit((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Rinherit" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'row_field_desc' my_process_core_type_list:DBG12C: let process_core_type_desc__Ptyp_any x :string =match x with 
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_any(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_any") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_any ( (*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_any())
DBG1:constructor_declaration_new: (constructor "Ptyp_any" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_var x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_var(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_var") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_var ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_var((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_var" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_arrow x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label x : (*emit_core_type2*)(*emit_core_type_desc1*)arg_label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label x : (*emit_core_type2*)(*emit_core_type_desc1*)arg_label= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_arrow(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)arg_label*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_arrow") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_arrow ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)arg_label0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type2,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_arrow((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)arg_label (*emit_core_type1*)(*emit_core_type_desc1*)arg_label0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type2)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'arg_label' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_arrow" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_tuple x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_tuple(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_tuple") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_tuple ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_tuple((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_tuple" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 178)(int 6848)(int 6866)(string "test/test2.ml" )(int 178)(int 6848)(int 6875)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_constr x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_constr(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_constr") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_constr ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_constr((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_constr" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 183)(int 7011)(int 7046)(string "test/test2.ml" )(int 183)(int 7011)(int 7055)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_object x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)closed_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)closed_flag= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_object(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_object") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_object ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_object((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag (*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1)))
DBG1:Ptyp_constr1 'closed_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'object_field' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "object_field");(process_core_type_list[] )])(Ptyp_constr:"object_field|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_object" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "object_field");(process_core_type_list[] )])(string "test/test2.ml" )(int 189)(int 7253)(int 7272)(string "test/test2.ml" )(int 189)(int 7253)(int 7284)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "object_field");(process_core_type_list[] )])(Ptyp_constr:"object_field|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "closed_flag");(process_core_type_list[] )])(Ptyp_constr:"closed_flag|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_class x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc x : (*emit_core_type2*)(*emit_core_type_desc1*)longident_loc= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_class(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_class") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_class ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list1,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_class((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident_loc (*emit_core_type1*)(*emit_core_type_desc1*)longident_loc0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'longident_loc' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_class" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 196)(int 7587)(int 7621)(string "test/test2.ml" )(int 196)(int 7587)(int 7630)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_alias x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_alias(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_alias") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_alias ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string1,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_alias((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string1)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_alias" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_variant x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)closed_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag x : (*emit_core_type2*)(*emit_core_type_desc1*)closed_flag= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_variant(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_variant") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_variant ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_variant((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)closed_flag (*emit_core_type1*)(*emit_core_type_desc1*)closed_flag1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option2)))
DBG1:Ptyp_constr1 'label' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7938)(string "test/test2.ml" )(int 203)(int 7887)(int 7943)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'closed_flag' my_process_core_type_list:DBG1:Ptyp_constr1 'row_field' my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "row_field");(process_core_type_list[] )])(Ptyp_constr:"row_field|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_variant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "row_field");(process_core_type_list[] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7907)(string "test/test2.ml" )(int 203)(int 7887)(int 7916)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "row_field");(process_core_type_list[] )])(Ptyp_constr:"row_field|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "closed_flag");(process_core_type_list[] )])(Ptyp_constr:"closed_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7938)(string "test/test2.ml" )(int 203)(int 7887)(int 7943)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7938)(string "test/test2.ml" )(int 203)(int 7887)(int 7948)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7938)(string "test/test2.ml" )(int 203)(int 7887)(int 7943)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_poly x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)list x : (*emit_core_type2*)(*emit_core_type_desc1*)list= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_poly(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)list*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_poly") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)list0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_poly ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)list0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type1,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_poly((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)list (*emit_core_type1*)(*emit_core_type_desc1*)list0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type1)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'list' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 215)(int 8538)(int 8555)(string "test/test2.ml" )(int 215)(int 8538)(int 8561)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_poly" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 215)(int 8538)(int 8555)(string "test/test2.ml" )(int 215)(int 8538)(int 8561)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 215)(int 8538)(int 8555)(string "test/test2.ml" )(int 215)(int 8538)(int 8565)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 215)(int 8538)(int 8555)(string "test/test2.ml" )(int 215)(int 8538)(int 8561)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_package x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)package_type x : (*emit_core_type2*)(*emit_core_type_desc1*)package_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)package_type x : (*emit_core_type2*)(*emit_core_type_desc1*)package_type= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_package(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)package_type0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)package_type*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_package") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)package_type0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_package ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)package_type0,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_package((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)package_type (*emit_core_type1*)(*emit_core_type_desc1*)package_type0)))
DBG1:Ptyp_constr1 'package_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_package" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "package_type");(process_core_type_list[] )])(Ptyp_constr:"package_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_core_type_desc__Ptyp_extension x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)extension x : (*emit_core_type2*)(*emit_core_type_desc1*)extension= x
DBG12B:let (*P64*)process_types_core_type_desc__Ptyp_extension(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)extension*(*decl_imp_core_type_list2*))):string = (process_types ("core_type_desc","Ptyp_extension") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)extension0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ptyp_extension ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)extension0,(*emit_core_type_list2*)) -> (process_types_core_type_desc__Ptyp_extension((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)extension (*emit_core_type1*)(*emit_core_type_desc1*)extension0)))
DBG1:Ptyp_constr1 'extension' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ptyp_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'attributes' my_process_core_type_list:DBG1:Ptyp_constr1 'location_stack' my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'core_type_desc' my_process_core_type_list:DBG12C: let process_payload__PStr x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)structure x : (*emit_core_type2*)(*emit_core_type_desc1*)structure= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)structure x : (*emit_core_type2*)(*emit_core_type_desc1*)structure= x
DBG12B:let (*P64*)process_types_payload__PStr(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)structure0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)structure*(*decl_imp_core_type_list2*))):string = (process_types ("payload","PStr") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)structure0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| PStr ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)structure0,(*emit_core_type_list2*)) -> (process_types_payload__PStr((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)structure (*emit_core_type1*)(*emit_core_type_desc1*)structure0)))
DBG1:Ptyp_constr1 'structure' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "PStr" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "structure");(process_core_type_list[] )])(Ptyp_constr:"structure|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_payload__PSig x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)signature x : (*emit_core_type2*)(*emit_core_type_desc1*)signature= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)signature x : (*emit_core_type2*)(*emit_core_type_desc1*)signature= x
DBG12B:let (*P64*)process_types_payload__PSig(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)signature0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)signature*(*decl_imp_core_type_list2*))):string = (process_types ("payload","PSig") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)signature0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| PSig ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)signature0,(*emit_core_type_list2*)) -> (process_types_payload__PSig((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)signature (*emit_core_type1*)(*emit_core_type_desc1*)signature0)))
DBG1:Ptyp_constr1 'signature' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "PSig" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "signature");(process_core_type_list[] )])(Ptyp_constr:"signature|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_payload__PTyp x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type x : (*emit_core_type2*)(*emit_core_type_desc1*)core_type= x
DBG12B:let (*P64*)process_types_payload__PTyp(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)core_type*(*decl_imp_core_type_list2*))):string = (process_types ("payload","PTyp") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)core_type0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| PTyp ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)core_type0,(*emit_core_type_list2*)) -> (process_types_payload__PTyp((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)core_type (*emit_core_type1*)(*emit_core_type_desc1*)core_type0)))
DBG1:Ptyp_constr1 'core_type' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "PTyp" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_payload__PPat x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern x : (*emit_core_type2*)(*emit_core_type_desc1*)pattern= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_payload__PPat(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)pattern*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("payload","PPat") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)pattern0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| PPat ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)pattern0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_payload__PPat((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)pattern (*emit_core_type1*)(*emit_core_type_desc1*)pattern0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'expression' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'pattern' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "PPat" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 154)(int 5973)(int 5995)(string "test/test2.ml" )(int 154)(int 5973)(int 6005)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'payload' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'loc' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG12C: let process_constant__Pconst_integer x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_constant__Pconst_integer(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("constant","Pconst_integer") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pconst_integer ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_constant__Pconst_integer((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'char' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pconst_integer" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(string "test/test2.ml" )(int 114)(int 4513)(int 4544)(string "test/test2.ml" )(int 114)(int 4513)(int 4548)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_constant__Pconst_char x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)char x : (*emit_core_type2*)(*emit_core_type_desc1*)char= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)char x : (*emit_core_type2*)(*emit_core_type_desc1*)char= x
DBG12B:let (*P64*)process_types_constant__Pconst_char(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)char0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)char*(*decl_imp_core_type_list2*))):string = (process_types ("constant","Pconst_char") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)char0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pconst_char ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)char0,(*emit_core_type_list2*)) -> (process_types_constant__Pconst_char((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)char (*emit_core_type1*)(*emit_core_type_desc1*)char0)))
DBG1:Ptyp_constr1 'char' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pconst_char" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_constant__Pconst_string x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)location x : (*emit_core_type2*)(*emit_core_type_desc1*)location= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)location x : (*emit_core_type2*)(*emit_core_type_desc1*)location= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_constant__Pconst_string(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)location1,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)location*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("constant","Pconst_string") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)location1")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option2")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pconst_string ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)location1,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option2,(*emit_core_type_list2*)) -> (process_types_constant__Pconst_string((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)location (*emit_core_type1*)(*emit_core_type_desc1*)location1),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option2)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pconst_string" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 120)(int 4818)(int 4859)(string "test/test2.ml" )(int 120)(int 4818)(int 4865)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_constant__Pconst_float x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)option x : (*emit_core_type2*)(*emit_core_type_desc1*)option= x
DBG12B:let (*P64*)process_types_constant__Pconst_float(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)option*(*decl_imp_core_type_list2*))):string = (process_types ("constant","Pconst_float") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)option1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Pconst_float ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)option1,(*emit_core_type_list2*)) -> (process_types_constant__Pconst_float((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)option (*emit_core_type1*)(*emit_core_type_desc1*)option1)))
DBG1:Ptyp_constr1 'char' my_process_core_type_list:DBG1:Ptyp_constr1 'option' ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Pconst_float" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(string "test/test2.ml" )(int 125)(int 5048)(int 5077)(string "test/test2.ml" )(int 125)(int 5048)(int 5081)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_injectivity__Injective x :string =match x with 
DBG12B:let (*P64*)process_types_injectivity__Injective(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("injectivity","Injective") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Injective ( (*emit_core_type_list2*)) -> (process_types_injectivity__Injective())
DBG1:constructor_declaration_new: (constructor "Injective" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_injectivity__NoInjectivity x :string =match x with 
DBG12B:let (*P64*)process_types_injectivity__NoInjectivity(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("injectivity","NoInjectivity") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| NoInjectivity ( (*emit_core_type_list2*)) -> (process_types_injectivity__NoInjectivity())
DBG1:constructor_declaration_new: (constructor "NoInjectivity" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_variance__Covariant x :string =match x with 
DBG12B:let (*P64*)process_types_variance__Covariant(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("variance","Covariant") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Covariant ( (*emit_core_type_list2*)) -> (process_types_variance__Covariant())
DBG1:constructor_declaration_new: (constructor "Covariant" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_variance__Contravariant x :string =match x with 
DBG12B:let (*P64*)process_types_variance__Contravariant(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("variance","Contravariant") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Contravariant ( (*emit_core_type_list2*)) -> (process_types_variance__Contravariant())
DBG1:constructor_declaration_new: (constructor "Contravariant" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_variance__NoVariance x :string =match x with 
DBG12B:let (*P64*)process_types_variance__NoVariance(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("variance","NoVariance") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| NoVariance ( (*emit_core_type_list2*)) -> (process_types_variance__NoVariance())
DBG1:constructor_declaration_new: (constructor "NoVariance" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_arg_label__Nolabel x :string =match x with 
DBG12B:let (*P64*)process_types_arg_label__Nolabel(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("arg_label","Nolabel") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Nolabel ( (*emit_core_type_list2*)) -> (process_types_arg_label__Nolabel())
DBG1:constructor_declaration_new: (constructor "Nolabel" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_arg_label__Labelled x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12B:let (*P64*)process_types_arg_label__Labelled(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*))):string = (process_types ("arg_label","Labelled") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Labelled ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)) -> (process_types_arg_label__Labelled((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Labelled" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_arg_label__Optional x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12B:let (*P64*)process_types_arg_label__Optional(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*))):string = (process_types ("arg_label","Optional") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Optional ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)) -> (process_types_arg_label__Optional((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Optional" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_closed_flag__Closed x :string =match x with 
DBG12B:let (*P64*)process_types_closed_flag__Closed(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("closed_flag","Closed") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Closed ( (*emit_core_type_list2*)) -> (process_types_closed_flag__Closed())
DBG1:constructor_declaration_new: (constructor "Closed" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_closed_flag__Open x :string =match x with 
DBG12B:let (*P64*)process_types_closed_flag__Open(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("closed_flag","Open") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Open ( (*emit_core_type_list2*)) -> (process_types_closed_flag__Open())
DBG1:constructor_declaration_new: (constructor "Open" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_override_flag__Override x :string =match x with 
DBG12B:let (*P64*)process_types_override_flag__Override(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("override_flag","Override") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Override ( (*emit_core_type_list2*)) -> (process_types_override_flag__Override())
DBG1:constructor_declaration_new: (constructor "Override" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_override_flag__Fresh x :string =match x with 
DBG12B:let (*P64*)process_types_override_flag__Fresh(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("override_flag","Fresh") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Fresh ( (*emit_core_type_list2*)) -> (process_types_override_flag__Fresh())
DBG1:constructor_declaration_new: (constructor "Fresh" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_virtual_flag__Virtual x :string =match x with 
DBG12B:let (*P64*)process_types_virtual_flag__Virtual(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("virtual_flag","Virtual") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Virtual ( (*emit_core_type_list2*)) -> (process_types_virtual_flag__Virtual())
DBG1:constructor_declaration_new: (constructor "Virtual" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_virtual_flag__Concrete x :string =match x with 
DBG12B:let (*P64*)process_types_virtual_flag__Concrete(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("virtual_flag","Concrete") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Concrete ( (*emit_core_type_list2*)) -> (process_types_virtual_flag__Concrete())
DBG1:constructor_declaration_new: (constructor "Concrete" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_mutable_flag__Immutable x :string =match x with 
DBG12B:let (*P64*)process_types_mutable_flag__Immutable(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("mutable_flag","Immutable") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Immutable ( (*emit_core_type_list2*)) -> (process_types_mutable_flag__Immutable())
DBG1:constructor_declaration_new: (constructor "Immutable" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_mutable_flag__Mutable x :string =match x with 
DBG12B:let (*P64*)process_types_mutable_flag__Mutable(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("mutable_flag","Mutable") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Mutable ( (*emit_core_type_list2*)) -> (process_types_mutable_flag__Mutable())
DBG1:constructor_declaration_new: (constructor "Mutable" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_private_flag__Private x :string =match x with 
DBG12B:let (*P64*)process_types_private_flag__Private(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("private_flag","Private") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Private ( (*emit_core_type_list2*)) -> (process_types_private_flag__Private())
DBG1:constructor_declaration_new: (constructor "Private" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_private_flag__Public x :string =match x with 
DBG12B:let (*P64*)process_types_private_flag__Public(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("private_flag","Public") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Public ( (*emit_core_type_list2*)) -> (process_types_private_flag__Public())
DBG1:constructor_declaration_new: (constructor "Public" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_direction_flag__Upto x :string =match x with 
DBG12B:let (*P64*)process_types_direction_flag__Upto(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("direction_flag","Upto") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Upto ( (*emit_core_type_list2*)) -> (process_types_direction_flag__Upto())
DBG1:constructor_declaration_new: (constructor "Upto" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_direction_flag__Downto x :string =match x with 
DBG12B:let (*P64*)process_types_direction_flag__Downto(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("direction_flag","Downto") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Downto ( (*emit_core_type_list2*)) -> (process_types_direction_flag__Downto())
DBG1:constructor_declaration_new: (constructor "Downto" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_rec_flag__Nonrecursive x :string =match x with 
DBG12B:let (*P64*)process_types_rec_flag__Nonrecursive(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("rec_flag","Nonrecursive") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Nonrecursive ( (*emit_core_type_list2*)) -> (process_types_rec_flag__Nonrecursive())
DBG1:constructor_declaration_new: (constructor "Nonrecursive" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_rec_flag__Recursive x :string =match x with 
DBG12B:let (*P64*)process_types_rec_flag__Recursive(((*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*))):string = (process_types ("rec_flag","Recursive") ^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Recursive ( (*emit_core_type_list2*)) -> (process_types_rec_flag__Recursive())
DBG1:constructor_declaration_new: (constructor "Recursive" {Pcstr_tuple:my_process_core_type_list:})
DBG12C: let process_longident__Lident x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12B:let (*P64*)process_types_longident__Lident(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*))):string = (process_types ("longident","Lident") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string0")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Lident ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string0,(*emit_core_type_list2*)) -> (process_types_longident__Lident((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string0)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Lident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_longident__Ldot x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident x : (*emit_core_type2*)(*emit_core_type_desc1*)longident= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident x : (*emit_core_type2*)(*emit_core_type_desc1*)longident= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)string x : (*emit_core_type2*)(*emit_core_type_desc1*)string= x
DBG12B:let (*P64*)process_types_longident__Ldot(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)string1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)string*(*decl_imp_core_type_list2*))):string = (process_types ("longident","Ldot") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)string1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Ldot ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)string1,(*emit_core_type_list2*)) -> (process_types_longident__Ldot((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident (*emit_core_type1*)(*emit_core_type_desc1*)longident0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)string (*emit_core_type1*)(*emit_core_type_desc1*)string1)))
DBG1:Ptyp_constr1 'string' my_process_core_type_list:DBG1:Ptyp_constr1 'longident' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Ldot" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident");(process_core_type_list[] )])(Ptyp_constr:"longident|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG12C: let process_longident__Lapply x :string =match x with 
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident x : (*emit_core_type2*)(*emit_core_type_desc1*)longident= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident x : (*emit_core_type2*)(*emit_core_type_desc1*)longident= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident x : (*emit_core_type2*)(*emit_core_type_desc1*)longident= x
DBG12A:decl_imp_core_type:let process_(*emit_core_type2*)(*emit_core_type_desc1*)longident x : (*emit_core_type2*)(*emit_core_type_desc1*)longident= x
DBG12B:let (*P64*)process_types_longident__Lapply(((*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident0,(*decl_imp_core_type_list*)a(*emit_core_type1*)(*emit_core_type_desc1*)longident1,(*decl_imp_core_type_list*)):((*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident*(*decl_imp_core_type_list2*)(*emit_core_type2*)(*emit_core_type_desc1*)longident*(*decl_imp_core_type_list2*))):string = (process_types ("longident","Lapply") ^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident0")^(*decl_imp_core_type_list_hats*)(core_type2 "a(*emit_core_type1*)(*emit_core_type_desc1*)longident1")^(*decl_imp_core_type_list_hats*))
DBG12C:(*emit_constructor_arguments*)| Lapply ( (*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident0,(*emit_core_type_list2*)(*emit_core_type1*)(*emit_core_type_desc1*)longident1,(*emit_core_type_list2*)) -> (process_types_longident__Lapply((*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident (*emit_core_type1*)(*emit_core_type_desc1*)longident0),(*imp_core_type1*)((*P16*)process_(*emit_core_type2*)(*emit_core_type_desc1*)longident (*emit_core_type1*)(*emit_core_type_desc1*)longident1)))
DBG1:Ptyp_constr1 'longident' my_process_core_type_list:DBG1:Ptyp_constr1 'longident' my_process_core_type_list:DBG1:constructor_declaration_new: (constructor "Lapply" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident");(process_core_type_list[] )])(Ptyp_constr:"longident|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident");(process_core_type_list[] )])(Ptyp_constr:"longident|") ->my_process_core_type_list:,my_process_core_type_list:})
DBG1:Ptyp_constr1 'location' my_process_core_type_list:DBG1:Ptyp_constr1 'bool' my_process_core_type_list:DBG1:Ptyp_constr1 'position' my_process_core_type_list:DBG1:Ptyp_constr1 'position' my_process_core_type_list:DBG1:Ptyp_constr1 'int' my_process_core_type_list:DBG1:Ptyp_constr1 'int' my_process_core_type_list:DBG1:Ptyp_constr1 'int' my_process_core_type_list:DBG1:Ptyp_constr1 'string' my_process_core_type_list:TOPstructure_item_desc:(print_structure_item_desc _attribute)
TOPstructure_item_desc2:structure_item_desc__Pstr_attribute_attributeaattribute0
TOPstructure_item_desc:(print_structure_item_desc (emit_pstr_type)print_type_decl:"position123" = ((*P21*)process_record_kind "pos_fname" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pos_lnum" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "int");(process_core_type_list[] )])(Ptyp_constr:"int|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pos_bol" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "int");(process_core_type_list[] )])(Ptyp_constr:"int|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pos_cnum" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "int");(process_core_type_list[] )])(Ptyp_constr:"int|") ->my_process_core_type_list:))/;print_type_decl:"location123" = ((*P21*)process_record_kind "loc_start" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "position");(process_core_type_list[] )])(Ptyp_constr:"position|") ->my_process_core_type_list:))/((*P21*)process_record_kind "loc_end" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "position");(process_core_type_list[] )])(Ptyp_constr:"position|") ->my_process_core_type_list:))/((*P21*)process_record_kind "loc_ghost" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "bool");(process_core_type_list[] )])(Ptyp_constr:"bool|") ->my_process_core_type_list:))/;print_type_decl:"location" = DBG1:Ptype_abstract;print_type_decl:"position" = DBG1:Ptype_abstract;print_type_decl:"location_stack" = DBG1:Ptype_abstract;print_type_decl:"loc" = ((*P21*)process_record_kind "txt" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_var" [process_string;])var-name))/((*P21*)process_record_kind "loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"longident" = (Ptype_variant (constructor "Lident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ldot" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident");(process_core_type_list[] )])(Ptyp_constr:"longident|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Lapply" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident");(process_core_type_list[] )])(Ptyp_constr:"longident|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident");(process_core_type_list[] )])(Ptyp_constr:"longident|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_longident(x:longident)=
match x with
);print_type_decl:"longident_loc" = DBG1:Ptype_abstract;print_type_decl:"rec_flag" = (Ptype_variant (constructor "Nonrecursive" {Pcstr_tuple:my_process_core_type_list:})(constructor "Recursive" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_rec_flag(x:rec_flag)=
match x with
);print_type_decl:"direction_flag" = (Ptype_variant (constructor "Upto" {Pcstr_tuple:my_process_core_type_list:})(constructor "Downto" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_direction_flag(x:direction_flag)=
match x with
);print_type_decl:"private_flag" = (Ptype_variant (constructor "Private" {Pcstr_tuple:my_process_core_type_list:})(constructor "Public" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_private_flag(x:private_flag)=
match x with
);print_type_decl:"mutable_flag" = (Ptype_variant (constructor "Immutable" {Pcstr_tuple:my_process_core_type_list:})(constructor "Mutable" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_mutable_flag(x:mutable_flag)=
match x with
);print_type_decl:"virtual_flag" = (Ptype_variant (constructor "Virtual" {Pcstr_tuple:my_process_core_type_list:})(constructor "Concrete" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_virtual_flag(x:virtual_flag)=
match x with
);print_type_decl:"override_flag" = (Ptype_variant (constructor "Override" {Pcstr_tuple:my_process_core_type_list:})(constructor "Fresh" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_override_flag(x:override_flag)=
match x with
);print_type_decl:"closed_flag" = (Ptype_variant (constructor "Closed" {Pcstr_tuple:my_process_core_type_list:})(constructor "Open" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_closed_flag(x:closed_flag)=
match x with
);print_type_decl:"label" = DBG1:Ptype_abstract;print_type_decl:"arg_label" = (Ptype_variant (constructor "Nolabel" {Pcstr_tuple:my_process_core_type_list:})(constructor "Labelled" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Optional" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_arg_label(x:arg_label)=
match x with
);print_type_decl:"variance" = (Ptype_variant (constructor "Covariant" {Pcstr_tuple:my_process_core_type_list:})(constructor "Contravariant" {Pcstr_tuple:my_process_core_type_list:})(constructor "NoVariance" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_variance(x:variance)=
match x with
);print_type_decl:"injectivity" = (Ptype_variant (constructor "Injective" {Pcstr_tuple:my_process_core_type_list:})(constructor "NoInjectivity" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_injectivity(x:injectivity)=
match x with
);print_type_decl:"constant" = (Ptype_variant (constructor "Pconst_integer" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(string "test/test2.ml" )(int 114)(int 4513)(int 4544)(string "test/test2.ml" )(int 114)(int 4513)(int 4548)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pconst_char" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pconst_string" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 120)(int 4818)(int 4859)(string "test/test2.ml" )(int 120)(int 4818)(int 4865)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pconst_float" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(string "test/test2.ml" )(int 125)(int 5048)(int 5077)(string "test/test2.ml" )(int 125)(int 5048)(int 5081)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_constant(x:constant)=
match x with
);print_type_decl:"attribute" = ((*P21*)process_record_kind "attr_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 134)(int 5332)(int 5346)(string "test/test2.ml" )(int 134)(int 5332)(int 5352)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "attr_payload" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "payload");(process_core_type_list[] )])(Ptyp_constr:"payload|") ->my_process_core_type_list:))/((*P21*)process_record_kind "attr_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"extension" = DBG1:Ptype_abstract;print_type_decl:"attributes" = DBG1:Ptype_abstract;print_type_decl:"payload" = (Ptype_variant (constructor "PStr" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "structure");(process_core_type_list[] )])(Ptyp_constr:"structure|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "PSig" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "signature");(process_core_type_list[] )])(Ptyp_constr:"signature|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "PTyp" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "PPat" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 154)(int 5973)(int 5995)(string "test/test2.ml" )(int 154)(int 5973)(int 6005)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_payload(x:payload)=
match x with
);print_type_decl:"core_type" = ((*P21*)process_record_kind "ptyp_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type_desc");(process_core_type_list[] )])(Ptyp_constr:"core_type_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptyp_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptyp_loc_stack" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location_stack");(process_core_type_list[] )])(Ptyp_constr:"location_stack|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptyp_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"core_type_desc" = (Ptype_variant (constructor "Ptyp_any" {Pcstr_tuple:my_process_core_type_list:})(constructor "Ptyp_var" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_arrow" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_tuple" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 178)(int 6848)(int 6866)(string "test/test2.ml" )(int 178)(int 6848)(int 6875)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_constr" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 183)(int 7011)(int 7046)(string "test/test2.ml" )(int 183)(int 7011)(int 7055)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_object" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "object_field");(process_core_type_list[] )])(string "test/test2.ml" )(int 189)(int 7253)(int 7272)(string "test/test2.ml" )(int 189)(int 7253)(int 7284)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "object_field");(process_core_type_list[] )])(Ptyp_constr:"object_field|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "closed_flag");(process_core_type_list[] )])(Ptyp_constr:"closed_flag|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_class" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 196)(int 7587)(int 7621)(string "test/test2.ml" )(int 196)(int 7587)(int 7630)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_alias" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_variant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "row_field");(process_core_type_list[] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7907)(string "test/test2.ml" )(int 203)(int 7887)(int 7916)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "row_field");(process_core_type_list[] )])(Ptyp_constr:"row_field|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "closed_flag");(process_core_type_list[] )])(Ptyp_constr:"closed_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7938)(string "test/test2.ml" )(int 203)(int 7887)(int 7943)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7938)(string "test/test2.ml" )(int 203)(int 7887)(int 7948)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 203)(int 7887)(int 7938)(string "test/test2.ml" )(int 203)(int 7887)(int 7943)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_poly" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 215)(int 8538)(int 8555)(string "test/test2.ml" )(int 215)(int 8538)(int 8561)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 215)(int 8538)(int 8555)(string "test/test2.ml" )(int 215)(int 8538)(int 8565)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 215)(int 8538)(int 8555)(string "test/test2.ml" )(int 215)(int 8538)(int 8561)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_package" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "package_type");(process_core_type_list[] )])(Ptyp_constr:"package_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptyp_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_core_type_desc(x:core_type_desc)=
match x with
);print_type_decl:"package_type" = DBG1:Ptype_abstract;print_type_decl:"row_field" = ((*P21*)process_record_kind "prf_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "row_field_desc");(process_core_type_list[] )])(Ptyp_constr:"row_field_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "prf_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "prf_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"row_field_desc" = (Ptype_variant (constructor "Rtag" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 261)(int 10078)(int 10090)(string "test/test2.ml" )(int 261)(int 10078)(int 10095)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "bool");(process_core_type_list[] )])(Ptyp_constr:"bool|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 261)(int 10078)(int 10109)(string "test/test2.ml" )(int 261)(int 10078)(int 10118)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Rinherit" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_row_field_desc(x:row_field_desc)=
match x with
);print_type_decl:"object_field" = ((*P21*)process_record_kind "pof_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "object_field_desc");(process_core_type_list[] )])(Ptyp_constr:"object_field_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pof_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pof_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"object_field_desc" = (Ptype_variant (constructor "Otag" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 282)(int 10894)(int 10906)(string "test/test2.ml" )(int 282)(int 10894)(int 10911)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Oinherit" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_object_field_desc(x:object_field_desc)=
match x with
);print_type_decl:"pattern" = ((*P21*)process_record_kind "ppat_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern_desc");(process_core_type_list[] )])(Ptyp_constr:"pattern_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ppat_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ppat_loc_stack" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location_stack");(process_core_type_list[] )])(Ptyp_constr:"location_stack|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ppat_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"pattern_desc" = (Ptype_variant (constructor "Ppat_any" {Pcstr_tuple:my_process_core_type_list:})(constructor "Ppat_var" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 296)(int 11247)(int 11263)(string "test/test2.ml" )(int 296)(int 11247)(int 11269)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_alias" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 297)(int 11313)(int 11341)(string "test/test2.ml" )(int 297)(int 11313)(int 11347)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_constant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constant");(process_core_type_list[] )])(Ptyp_constr:"constant|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_interval" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constant");(process_core_type_list[] )])(Ptyp_constr:"constant|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constant");(process_core_type_list[] )])(Ptyp_constr:"constant|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_tuple" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 306)(int 11697)(int 11715)(string "test/test2.ml" )(int 306)(int 11697)(int 11722)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_construct" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11847)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11852)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11855)(string "test/test2.ml" )(int 310)(int 11798)(int 11862)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11862)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11847)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11852)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11855)(string "test/test2.ml" )(int 310)(int 11798)(int 11862)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11847)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 310)(int 11798)(int 11837)(string "test/test2.ml" )(int 310)(int 11798)(int 11843)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_variant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 318)(int 12176)(int 12204)(string "test/test2.ml" )(int 318)(int 12176)(int 12211)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_record" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12370)(string "test/test2.ml" )(int 323)(int 12350)(int 12383)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12386)(string "test/test2.ml" )(int 323)(int 12350)(int 12393)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 323)(int 12350)(int 12370)(string "test/test2.ml" )(int 323)(int 12350)(int 12393)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12370)(string "test/test2.ml" )(int 323)(int 12350)(int 12383)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 323)(int 12350)(int 12386)(string "test/test2.ml" )(int 323)(int 12350)(int 12393)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "closed_flag");(process_core_type_list[] )])(Ptyp_constr:"closed_flag|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_array" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(string "test/test2.ml" )(int 332)(int 12729)(int 12747)(string "test/test2.ml" )(int 332)(int 12729)(int 12754)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_or" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_lazy" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_unpack" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 337)(int 13033)(int 13052)(string "test/test2.ml" )(int 337)(int 13033)(int 13058)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 337)(int 13033)(int 13052)(string "test/test2.ml" )(int 337)(int 13033)(int 13065)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 337)(int 13033)(int 13052)(string "test/test2.ml" )(int 337)(int 13033)(int 13058)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_exception" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ppat_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_pattern_desc(x:pattern_desc)=
match x with
);print_type_decl:"expression" = ((*P21*)process_record_kind "pexp_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression_desc");(process_core_type_list[] )])(Ptyp_constr:"expression_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pexp_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pexp_loc_stack" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location_stack");(process_core_type_list[] )])(Ptyp_constr:"location_stack|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pexp_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"expression_desc" = (Ptype_variant (constructor "Pexp_ident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_constant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constant");(process_core_type_list[] )])(Ptyp_constr:"constant|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_let" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(string "test/test2.ml" )(int 363)(int 13988)(int 14015)(string "test/test2.ml" )(int 363)(int 13988)(int 14028)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_function" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "cases");(process_core_type_list[] )])(Ptyp_constr:"cases|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_fun" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 371)(int 14452)(int 14480)(string "test/test2.ml" )(int 371)(int 14452)(int 14490)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_apply" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15452)(string "test/test2.ml" )(int 392)(int 15420)(int 15461)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15464)(string "test/test2.ml" )(int 392)(int 15420)(int 15474)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 392)(int 15420)(int 15452)(string "test/test2.ml" )(int 392)(int 15420)(int 15474)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15452)(string "test/test2.ml" )(int 392)(int 15420)(int 15461)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 392)(int 15420)(int 15464)(string "test/test2.ml" )(int 392)(int 15420)(int 15474)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_match" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "cases");(process_core_type_list[] )])(Ptyp_constr:"cases|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_try" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "cases");(process_core_type_list[] )])(Ptyp_constr:"cases|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_tuple" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 406)(int 16048)(int 16066)(string "test/test2.ml" )(int 406)(int 16048)(int 16076)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_construct" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 410)(int 16154)(int 16192)(string "test/test2.ml" )(int 410)(int 16154)(int 16202)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_variant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 416)(int 16418)(int 16446)(string "test/test2.ml" )(int 416)(int 16418)(int 16456)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_record" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16613)(string "test/test2.ml" )(int 421)(int 16593)(int 16626)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16629)(string "test/test2.ml" )(int 421)(int 16593)(int 16639)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 421)(int 16593)(int 16613)(string "test/test2.ml" )(int 421)(int 16593)(int 16639)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16613)(string "test/test2.ml" )(int 421)(int 16593)(int 16626)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16629)(string "test/test2.ml" )(int 421)(int 16593)(int 16639)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 421)(int 16593)(int 16648)(string "test/test2.ml" )(int 421)(int 16593)(int 16658)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_field" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_setfield" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_array" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 431)(int 17043)(int 17061)(string "test/test2.ml" )(int 431)(int 17043)(int 17071)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_ifthenelse" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 432)(int 17107)(int 17156)(string "test/test2.ml" )(int 432)(int 17107)(int 17166)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_sequence" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_while" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_for" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "direction_flag");(process_core_type_list[] )])(Ptyp_constr:"direction_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_coerce" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 444)(int 17790)(int 17822)(string "test/test2.ml" )(int 444)(int 17790)(int 17831)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_send" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 449)(int 18002)(int 18032)(string "test/test2.ml" )(int 449)(int 18002)(int 18037)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_new" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_setinstvar" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 451)(int 18106)(int 18129)(string "test/test2.ml" )(int 451)(int 18106)(int 18134)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_override" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18200)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18203)(string "test/test2.ml" )(int 452)(int 18169)(int 18213)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18213)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18200)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18203)(string "test/test2.ml" )(int 452)(int 18169)(int 18213)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 452)(int 18169)(int 18191)(string "test/test2.ml" )(int 452)(int 18169)(int 18196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_letmodule" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 454)(int 18263)(int 18285)(string "test/test2.ml" )(int 454)(int 18263)(int 18291)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 454)(int 18263)(int 18285)(string "test/test2.ml" )(int 454)(int 18263)(int 18298)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 454)(int 18263)(int 18285)(string "test/test2.ml" )(int 454)(int 18263)(int 18291)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_letexception" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension_constructor");(process_core_type_list[] )])(Ptyp_constr:"extension_constructor|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_assert" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_lazy" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_poly" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 463)(int 18645)(int 18675)(string "test/test2.ml" )(int 463)(int 18645)(int 18684)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_object" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_structure");(process_core_type_list[] )])(Ptyp_constr:"class_structure|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_newtype" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 470)(int 18937)(int 18957)(string "test/test2.ml" )(int 470)(int 18937)(int 18963)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_pack" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_declaration");(process_core_type_list[] )])(Ptyp_constr:"open_declaration|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_letop" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "letop");(process_core_type_list[] )])(Ptyp_constr:"letop|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pexp_unreachable" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_expression_desc(x:expression_desc)=
match x with
);print_type_decl:"case" = ((*P21*)process_record_kind "pc_lhs" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pc_guard" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 488)(int 19543)(int 19556)(string "test/test2.ml" )(int 488)(int 19543)(int 19566)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pc_rhs" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:))/;print_type_decl:"letop" = ((*P21*)process_record_kind "let_" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "binding_op");(process_core_type_list[] )])(Ptyp_constr:"binding_op|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ands" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "binding_op");(process_core_type_list[] )])(string "test/test2.ml" )(int 495)(int 19728)(int 19737)(string "test/test2.ml" )(int 495)(int 19728)(int 19747)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "binding_op");(process_core_type_list[] )])(Ptyp_constr:"binding_op|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "body" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:))/;print_type_decl:"binding_op" = ((*P21*)process_record_kind "pbop_op" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 500)(int 19820)(int 19832)(string "test/test2.ml" )(int 500)(int 19820)(int 19838)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pbop_pat" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pbop_exp" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pbop_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"value_description" = ((*P21*)process_record_kind "pval_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 509)(int 20004)(int 20018)(string "test/test2.ml" )(int 509)(int 20004)(int 20024)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pval_type" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pval_prim" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 511)(int 20055)(int 20069)(string "test/test2.ml" )(int 511)(int 20055)(int 20075)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pval_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pval_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"type_declaration" = ((*P21*)process_record_kind "ptype_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 524)(int 20508)(int 20523)(string "test/test2.ml" )(int 524)(int 20508)(int 20529)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "ptype_params" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20553)(string "test/test2.ml" )(int 525)(int 20535)(int 20562)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20566)(string "test/test2.ml" )(int 525)(int 20535)(int 20574)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20577)(string "test/test2.ml" )(int 525)(int 20535)(int 20588)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 525)(int 20535)(int 20566)(string "test/test2.ml" )(int 525)(int 20535)(int 20588)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 525)(int 20535)(int 20553)(string "test/test2.ml" )(int 525)(int 20535)(int 20589)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20553)(string "test/test2.ml" )(int 525)(int 20535)(int 20562)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20566)(string "test/test2.ml" )(int 525)(int 20535)(int 20574)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20577)(string "test/test2.ml" )(int 525)(int 20535)(int 20588)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 525)(int 20535)(int 20566)(string "test/test2.ml" )(int 525)(int 20535)(int 20588)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20566)(string "test/test2.ml" )(int 525)(int 20535)(int 20574)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 525)(int 20535)(int 20577)(string "test/test2.ml" )(int 525)(int 20535)(int 20588)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(Ptyp_constr:"variance|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(Ptyp_constr:"injectivity|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "ptype_cstrs" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20644)(string "test/test2.ml" )(int 527)(int 20627)(int 20653)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20656)(string "test/test2.ml" )(int 527)(int 20627)(int 20665)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20668)(string "test/test2.ml" )(int 527)(int 20627)(int 20676)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 527)(int 20627)(int 20644)(string "test/test2.ml" )(int 527)(int 20627)(int 20676)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20644)(string "test/test2.ml" )(int 527)(int 20627)(int 20653)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20656)(string "test/test2.ml" )(int 527)(int 20627)(int 20665)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(string "test/test2.ml" )(int 527)(int 20627)(int 20668)(string "test/test2.ml" )(int 527)(int 20627)(int 20676)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "ptype_kind" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_kind");(process_core_type_list[] )])(Ptyp_constr:"type_kind|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptype_private" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptype_manifest" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 531)(int 20830)(int 20849)(string "test/test2.ml" )(int 531)(int 20830)(int 20858)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "ptype_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptype_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"type_kind" = (Ptype_variant (constructor "Ptype_abstract" {Pcstr_tuple:my_process_core_type_list:})(constructor "Ptype_variant" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constructor_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 556)(int 22109)(int 22130)(string "test/test2.ml" )(int 556)(int 22109)(int 22153)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constructor_declaration");(process_core_type_list[] )])(Ptyp_constr:"constructor_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptype_record" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 557)(int 22159)(int 22179)(string "test/test2.ml" )(int 557)(int 22159)(int 22196)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(Ptyp_constr:"label_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptype_open" {Pcstr_tuple:my_process_core_type_list:})
DEBUG3A: let process_variant_type_kind(x:type_kind)=
match x with
);print_type_decl:"label_declaration" = ((*P21*)process_record_kind "pld_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 561)(int 22308)(int 22321)(string "test/test2.ml" )(int 561)(int 22308)(int 22327)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pld_mutable" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pld_type" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pld_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pld_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"constructor_declaration" = ((*P21*)process_record_kind "pcd_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 575)(int 22899)(int 22912)(string "test/test2.ml" )(int 575)(int 22899)(int 22918)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pcd_vars" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 576)(int 22924)(int 22937)(string "test/test2.ml" )(int 576)(int 22924)(int 22943)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 576)(int 22924)(int 22937)(string "test/test2.ml" )(int 576)(int 22924)(int 22947)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 576)(int 22924)(int 22937)(string "test/test2.ml" )(int 576)(int 22924)(int 22943)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pcd_args" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constructor_arguments");(process_core_type_list[] )])(Ptyp_constr:"constructor_arguments|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcd_res" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 578)(int 22990)(int 23002)(string "test/test2.ml" )(int 578)(int 22990)(int 23011)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pcd_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcd_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"constructor_arguments" = (Ptype_variant (constructor "Pcstr_tuple" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 584)(int 23175)(int 23194)(string "test/test2.ml" )(int 584)(int 23175)(int 23203)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcstr_record" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 585)(int 23209)(int 23229)(string "test/test2.ml" )(int 585)(int 23209)(int 23246)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label_declaration");(process_core_type_list[] )])(Ptyp_constr:"label_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_constructor_arguments(x:constructor_arguments)=
match x with
);print_type_decl:"type_extension" = ((*P21*)process_record_kind "ptyext_path" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptyext_params" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23931)(string "test/test2.ml" )(int 600)(int 23912)(int 23940)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23944)(string "test/test2.ml" )(int 600)(int 23912)(int 23952)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23955)(string "test/test2.ml" )(int 600)(int 23912)(int 23966)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 600)(int 23912)(int 23944)(string "test/test2.ml" )(int 600)(int 23912)(int 23966)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 600)(int 23912)(int 23931)(string "test/test2.ml" )(int 600)(int 23912)(int 23967)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23931)(string "test/test2.ml" )(int 600)(int 23912)(int 23940)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23944)(string "test/test2.ml" )(int 600)(int 23912)(int 23952)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23955)(string "test/test2.ml" )(int 600)(int 23912)(int 23966)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 600)(int 23912)(int 23944)(string "test/test2.ml" )(int 600)(int 23912)(int 23966)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23944)(string "test/test2.ml" )(int 600)(int 23912)(int 23952)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 600)(int 23912)(int 23955)(string "test/test2.ml" )(int 600)(int 23912)(int 23966)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(Ptyp_constr:"variance|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(Ptyp_constr:"injectivity|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "ptyext_constructors" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension_constructor");(process_core_type_list[] )])(string "test/test2.ml" )(int 601)(int 23975)(int 23999)(string "test/test2.ml" )(int 601)(int 23975)(int 24020)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension_constructor");(process_core_type_list[] )])(Ptyp_constr:"extension_constructor|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "ptyext_private" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptyext_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptyext_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"extension_constructor" = ((*P21*)process_record_kind "pext_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 610)(int 24317)(int 24331)(string "test/test2.ml" )(int 610)(int 24317)(int 24337)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pext_kind" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension_constructor_kind");(process_core_type_list[] )])(Ptyp_constr:"extension_constructor_kind|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pext_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pext_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"type_exception" = ((*P21*)process_record_kind "ptyexn_constructor" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension_constructor");(process_core_type_list[] )])(Ptyp_constr:"extension_constructor|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptyexn_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "ptyexn_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"extension_constructor_kind" = (Ptype_variant (constructor "Pext_decl" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24815)(string "test/test2.ml" )(int 624)(int 24798)(int 24821)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24815)(string "test/test2.ml" )(int 624)(int 24798)(int 24825)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24815)(string "test/test2.ml" )(int 624)(int 24798)(int 24821)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "constructor_arguments");(process_core_type_list[] )])(Ptyp_constr:"constructor_arguments|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 624)(int 24798)(int 24857)(string "test/test2.ml" )(int 624)(int 24798)(int 24866)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pext_rebind" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_extension_constructor_kind(x:extension_constructor_kind)=
match x with
);print_type_decl:"class_type" = ((*P21*)process_record_kind "pcty_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_desc");(process_core_type_list[] )])(Ptyp_constr:"class_type_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcty_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcty_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"class_type_desc" = (Ptype_variant (constructor "Pcty_constr" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 671)(int 26199)(int 26234)(string "test/test2.ml" )(int 671)(int 26199)(int 26243)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcty_signature" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_signature");(process_core_type_list[] )])(Ptyp_constr:"class_signature|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcty_arrow" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type");(process_core_type_list[] )])(Ptyp_constr:"class_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcty_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcty_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_description");(process_core_type_list[] )])(Ptyp_constr:"open_description|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type");(process_core_type_list[] )])(Ptyp_constr:"class_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_class_type_desc(x:class_type_desc)=
match x with
);print_type_decl:"class_signature" = ((*P21*)process_record_kind "pcsig_self" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcsig_fields" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_field");(process_core_type_list[] )])(string "test/test2.ml" )(int 688)(int 26943)(int 26960)(string "test/test2.ml" )(int 688)(int 26943)(int 26976)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_field");(process_core_type_list[] )])(Ptyp_constr:"class_type_field|") ->my_process_core_type_list:,my_process_core_type_list:))/;print_type_decl:"class_type_field" = ((*P21*)process_record_kind "pctf_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_field_desc");(process_core_type_list[] )])(Ptyp_constr:"class_type_field_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pctf_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pctf_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"class_type_field_desc" = (Ptype_variant (constructor "Pctf_inherit" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type");(process_core_type_list[] )])(Ptyp_constr:"class_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pctf_val" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27517)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27520)(string "test/test2.ml" )(int 704)(int 27491)(int 27532)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27535)(string "test/test2.ml" )(int 704)(int 27491)(int 27547)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27550)(string "test/test2.ml" )(int 704)(int 27491)(int 27559)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 704)(int 27491)(int 27508)(string "test/test2.ml" )(int 704)(int 27491)(int 27513)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pctf_method" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27614)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27617)(string "test/test2.ml" )(int 706)(int 27585)(int 27629)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27632)(string "test/test2.ml" )(int 706)(int 27585)(int 27644)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27647)(string "test/test2.ml" )(int 706)(int 27585)(int 27656)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 706)(int 27585)(int 27605)(string "test/test2.ml" )(int 706)(int 27585)(int 27610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pctf_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 710)(int 27758)(int 27782)(string "test/test2.ml" )(int 710)(int 27758)(int 27791)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 710)(int 27758)(int 27794)(string "test/test2.ml" )(int 710)(int 27758)(int 27803)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pctf_attribute" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attribute");(process_core_type_list[] )])(Ptyp_constr:"attribute|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pctf_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_class_type_field_desc(x:class_type_field_desc)=
match x with
);print_type_decl:"class_infos" = ((*P21*)process_record_kind "pci_virt" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "virtual_flag");(process_core_type_list[] )])(Ptyp_constr:"virtual_flag|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pci_params" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28031)(string "test/test2.ml" )(int 716)(int 28015)(int 28040)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28044)(string "test/test2.ml" )(int 716)(int 28015)(int 28052)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28055)(string "test/test2.ml" )(int 716)(int 28015)(int 28066)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 716)(int 28015)(int 28044)(string "test/test2.ml" )(int 716)(int 28015)(int 28066)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 716)(int 28015)(int 28031)(string "test/test2.ml" )(int 716)(int 28015)(int 28067)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28031)(string "test/test2.ml" )(int 716)(int 28015)(int 28040)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28044)(string "test/test2.ml" )(int 716)(int 28015)(int 28052)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28055)(string "test/test2.ml" )(int 716)(int 28015)(int 28066)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 716)(int 28015)(int 28044)(string "test/test2.ml" )(int 716)(int 28015)(int 28066)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28044)(string "test/test2.ml" )(int 716)(int 28015)(int 28052)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(string "test/test2.ml" )(int 716)(int 28015)(int 28055)(string "test/test2.ml" )(int 716)(int 28015)(int 28066)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "variance");(process_core_type_list[] )])(Ptyp_constr:"variance|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "injectivity");(process_core_type_list[] )])(Ptyp_constr:"injectivity|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pci_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 717)(int 28075)(int 28088)(string "test/test2.ml" )(int 717)(int 28075)(int 28094)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pci_expr" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_var" [process_string;])var-name))/((*P21*)process_record_kind "pci_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pci_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"class_description" = DBG1:Ptype_abstract;print_type_decl:"class_type_declaration" = DBG1:Ptype_abstract;print_type_decl:"class_expr" = ((*P21*)process_record_kind "pcl_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr_desc");(process_core_type_list[] )])(Ptyp_constr:"class_expr_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcl_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcl_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"class_expr_desc" = (Ptype_variant (constructor "Pcl_constr" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 742)(int 28774)(int 28808)(string "test/test2.ml" )(int 742)(int 28774)(int 28817)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcl_structure" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_structure");(process_core_type_list[] )])(Ptyp_constr:"class_structure|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcl_fun" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 745)(int 28928)(int 28955)(string "test/test2.ml" )(int 745)(int 28928)(int 28965)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcl_apply" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29588)(string "test/test2.ml" )(int 757)(int 29557)(int 29597)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29600)(string "test/test2.ml" )(int 757)(int 29557)(int 29610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])(string "test/test2.ml" )(int 757)(int 29557)(int 29588)(string "test/test2.ml" )(int 757)(int 29557)(int 29610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29588)(string "test/test2.ml" )(int 757)(int 29557)(int 29597)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(string "test/test2.ml" )(int 757)(int 29557)(int 29600)(string "test/test2.ml" )(int 757)(int 29557)(int 29610)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "arg_label");(process_core_type_list[] )])(Ptyp_constr:"arg_label|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcl_let" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(string "test/test2.ml" )(int 763)(int 29840)(int 29866)(string "test/test2.ml" )(int 763)(int 29840)(int 29879)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcl_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type");(process_core_type_list[] )])(Ptyp_constr:"class_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcl_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcl_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_description");(process_core_type_list[] )])(Ptyp_constr:"open_description|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_class_expr_desc(x:class_expr_desc)=
match x with
);print_type_decl:"class_structure" = ((*P21*)process_record_kind "pcstr_self" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcstr_fields" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field");(process_core_type_list[] )])(string "test/test2.ml" )(int 776)(int 30496)(int 30513)(string "test/test2.ml" )(int 776)(int 30496)(int 30524)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field");(process_core_type_list[] )])(Ptyp_constr:"class_field|") ->my_process_core_type_list:,my_process_core_type_list:))/;print_type_decl:"class_field" = ((*P21*)process_record_kind "pcf_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_desc");(process_core_type_list[] )])(Ptyp_constr:"class_field_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcf_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pcf_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"class_field_desc" = (Ptype_variant (constructor "Pcf_inherit" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "override_flag");(process_core_type_list[] )])(Ptyp_constr:"override_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_expr");(process_core_type_list[] )])(Ptyp_constr:"class_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 791)(int 30957)(int 31005)(string "test/test2.ml" )(int 791)(int 30957)(int 31011)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 791)(int 30957)(int 31005)(string "test/test2.ml" )(int 791)(int 30957)(int 31015)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 791)(int 30957)(int 31005)(string "test/test2.ml" )(int 791)(int 30957)(int 31011)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcf_val" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31580)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31583)(string "test/test2.ml" )(int 802)(int 31555)(int 31595)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31598)(string "test/test2.ml" )(int 802)(int 31555)(int 31614)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 802)(int 31555)(int 31571)(string "test/test2.ml" )(int 802)(int 31555)(int 31576)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "mutable_flag");(process_core_type_list[] )])(Ptyp_constr:"mutable_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcf_method" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32442)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32445)(string "test/test2.ml" )(int 817)(int 32414)(int 32457)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32460)(string "test/test2.ml" )(int 817)(int 32414)(int 32476)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(string "test/test2.ml" )(int 817)(int 32414)(int 32433)(string "test/test2.ml" )(int 817)(int 32414)(int 32438)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "label");(process_core_type_list[] )])(Ptyp_constr:"label|") ->my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "private_flag");(process_core_type_list[] )])(Ptyp_constr:"private_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_field_kind");(process_core_type_list[] )])(Ptyp_constr:"class_field_kind|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcf_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_tuple" [(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 822)(int 32681)(int 32704)(string "test/test2.ml" )(int 822)(int 32681)(int 32713)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 822)(int 32681)(int 32716)(string "test/test2.ml" )(int 822)(int 32681)(int 32725)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] );])Ptyp_tupleptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcf_initializer" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcf_attribute" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attribute");(process_core_type_list[] )])(Ptyp_constr:"attribute|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pcf_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_class_field_desc(x:class_field_desc)=
match x with
);print_type_decl:"class_field_kind" = (Ptype_variant (constructor "Cfk_virtual" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "core_type");(process_core_type_list[] )])(Ptyp_constr:"core_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Cfk_concrete" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "override_flag");(process_core_type_list[] )])(Ptyp_constr:"override_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_class_field_kind(x:class_field_kind)=
match x with
);print_type_decl:"class_declaration" = DBG1:Ptype_abstract;print_type_decl:"module_type" = ((*P21*)process_record_kind "pmty_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type_desc");(process_core_type_list[] )])(Ptyp_constr:"module_type_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmty_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmty_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"module_type_desc" = (Ptype_variant (constructor "Pmty_ident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmty_signature" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "signature");(process_core_type_list[] )])(Ptyp_constr:"signature|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmty_functor" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "functor_parameter");(process_core_type_list[] )])(Ptyp_constr:"functor_parameter|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmty_with" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "with_constraint");(process_core_type_list[] )])(string "test/test2.ml" )(int 847)(int 33607)(int 33638)(string "test/test2.ml" )(int 847)(int 33607)(int 33653)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "with_constraint");(process_core_type_list[] )])(Ptyp_constr:"with_constraint|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmty_typeof" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmty_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmty_alias" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_module_type_desc(x:module_type_desc)=
match x with
);print_type_decl:"functor_parameter" = (Ptype_variant (constructor "Unit" {Pcstr_tuple:my_process_core_type_list:})(constructor "Named" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 854)(int 33920)(int 33933)(string "test/test2.ml" )(int 854)(int 33920)(int 33939)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 854)(int 33920)(int 33933)(string "test/test2.ml" )(int 854)(int 33920)(int 33946)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 854)(int 33920)(int 33933)(string "test/test2.ml" )(int 854)(int 33920)(int 33939)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_functor_parameter(x:functor_parameter)=
match x with
);print_type_decl:"signature" = DBG1:Ptype_abstract;print_type_decl:"signature_item" = ((*P21*)process_record_kind "psig_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "signature_item_desc");(process_core_type_list[] )])(Ptyp_constr:"signature_item_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "psig_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"signature_item_desc" = (Ptype_variant (constructor "Psig_value" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_description");(process_core_type_list[] )])(Ptyp_constr:"value_description|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 871)(int 34415)(int 34443)(string "test/test2.ml" )(int 871)(int 34415)(int 34459)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_typesubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 873)(int 34516)(int 34538)(string "test/test2.ml" )(int 873)(int 34516)(int 34554)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_typext" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_extension");(process_core_type_list[] )])(Ptyp_constr:"type_extension|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_exception" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_exception");(process_core_type_list[] )])(Ptyp_constr:"type_exception|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_module" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_modsubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_substitution");(process_core_type_list[] )])(Ptyp_constr:"module_substitution|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_recmodule" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 879)(int 34881)(int 34903)(string "test/test2.ml" )(int 879)(int 34881)(int 34921)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_modtype" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_modtypesubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_description");(process_core_type_list[] )])(Ptyp_constr:"open_description|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_include" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "include_description");(process_core_type_list[] )])(Ptyp_constr:"include_description|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_class" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_description");(process_core_type_list[] )])(string "test/test2.ml" )(int 886)(int 35274)(int 35292)(string "test/test2.ml" )(int 886)(int 35274)(int 35309)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_description");(process_core_type_list[] )])(Ptyp_constr:"class_description|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_class_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 888)(int 35366)(int 35389)(string "test/test2.ml" )(int 888)(int 35366)(int 35411)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_attribute" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attribute");(process_core_type_list[] )])(Ptyp_constr:"attribute|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Psig_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_signature_item_desc(x:signature_item_desc)=
match x with
);print_type_decl:"module_declaration" = ((*P21*)process_record_kind "pmd_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 894)(int 35650)(int 35663)(string "test/test2.ml" )(int 894)(int 35650)(int 35669)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 894)(int 35650)(int 35663)(string "test/test2.ml" )(int 894)(int 35650)(int 35676)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 894)(int 35650)(int 35663)(string "test/test2.ml" )(int 894)(int 35650)(int 35669)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pmd_type" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmd_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmd_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"module_substitution" = ((*P21*)process_record_kind "pms_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 902)(int 35921)(int 35934)(string "test/test2.ml" )(int 902)(int 35921)(int 35940)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pms_manifest" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pms_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pms_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"module_type_declaration" = ((*P21*)process_record_kind "pmtd_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 910)(int 36200)(int 36214)(string "test/test2.ml" )(int 910)(int 36200)(int 36220)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pmtd_type" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(string "test/test2.ml" )(int 911)(int 36226)(int 36240)(string "test/test2.ml" )(int 911)(int 36226)(int 36251)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pmtd_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmtd_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"open_infos" = ((*P21*)process_record_kind "popen_expr" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_var" [process_string;])var-name))/((*P21*)process_record_kind "popen_override" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "override_flag");(process_core_type_list[] )])(Ptyp_constr:"override_flag|") ->my_process_core_type_list:))/((*P21*)process_record_kind "popen_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "popen_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"open_description" = DBG1:Ptype_abstract;print_type_decl:"open_declaration" = DBG1:Ptype_abstract;print_type_decl:"include_infos" = ((*P21*)process_record_kind "pincl_mod" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_var" [process_string;])var-name))/((*P21*)process_record_kind "pincl_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pincl_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"include_description" = DBG1:Ptype_abstract;print_type_decl:"include_declaration" = DBG1:Ptype_abstract;print_type_decl:"with_constraint" = (Ptype_variant (constructor "Pwith_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pwith_module" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pwith_modtype" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pwith_modtypesubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pwith_typesubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pwith_modsubst" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_with_constraint(x:with_constraint)=
match x with
);print_type_decl:"module_expr" = ((*P21*)process_record_kind "pmod_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr_desc");(process_core_type_list[] )])(Ptyp_constr:"module_expr_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmod_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmod_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/;print_type_decl:"module_expr_desc" = (Ptype_variant (constructor "Pmod_ident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident_loc");(process_core_type_list[] )])(Ptyp_constr:"longident_loc|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmod_structure" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "structure");(process_core_type_list[] )])(Ptyp_constr:"structure|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmod_functor" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "functor_parameter");(process_core_type_list[] )])(Ptyp_constr:"functor_parameter|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmod_apply" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmod_constraint" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type");(process_core_type_list[] )])(Ptyp_constr:"module_type|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmod_unpack" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pmod_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_module_expr_desc(x:module_expr_desc)=
match x with
);print_type_decl:"structure" = DBG1:Ptype_abstract;print_type_decl:"structure_item" = ((*P21*)process_record_kind "pstr_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "structure_item_desc");(process_core_type_list[] )])(Ptyp_constr:"structure_item_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pstr_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"structure_item_desc" = (Ptype_variant (constructor "Pstr_eval" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_value" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(string "test/test2.ml" )(int 1003)(int 39424)(int 39453)(string "test/test2.ml" )(int 1003)(int 39424)(int 39466)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_binding");(process_core_type_list[] )])(Ptyp_constr:"value_binding|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_primitive" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "value_description");(process_core_type_list[] )])(Ptyp_constr:"value_description|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "rec_flag");(process_core_type_list[] )])(Ptyp_constr:"rec_flag|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 1013)(int 39904)(int 39932)(string "test/test2.ml" )(int 1013)(int 39904)(int 39948)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_declaration");(process_core_type_list[] )])(Ptyp_constr:"type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_typext" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_extension");(process_core_type_list[] )])(Ptyp_constr:"type_extension|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_exception" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "type_exception");(process_core_type_list[] )])(Ptyp_constr:"type_exception|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_module" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_binding");(process_core_type_list[] )])(Ptyp_constr:"module_binding|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_recmodule" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_binding");(process_core_type_list[] )])(string "test/test2.ml" )(int 1020)(int 40224)(int 40246)(string "test/test2.ml" )(int 1020)(int 40224)(int 40260)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_binding");(process_core_type_list[] )])(Ptyp_constr:"module_binding|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_modtype" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"module_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_open" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "open_declaration");(process_core_type_list[] )])(Ptyp_constr:"open_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_class" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 1024)(int 40446)(int 40464)(string "test/test2.ml" )(int 1024)(int 40446)(int 40481)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_class_type" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "list");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(string "test/test2.ml" )(int 1026)(int 40538)(int 40561)(string "test/test2.ml" )(int 1026)(int 40538)(int 40583)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"list|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "class_type_declaration");(process_core_type_list[] )])(Ptyp_constr:"class_type_declaration|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_include" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "include_declaration");(process_core_type_list[] )])(Ptyp_constr:"include_declaration|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_attribute" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attribute");(process_core_type_list[] )])(Ptyp_constr:"attribute|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pstr_extension" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "extension");(process_core_type_list[] )])(Ptyp_constr:"extension|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_structure_item_desc(x:structure_item_desc)=
match x with
);print_type_decl:"value_binding" = ((*P21*)process_record_kind "pvb_pat" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "pattern");(process_core_type_list[] )])(Ptyp_constr:"pattern|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pvb_expr" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "expression");(process_core_type_list[] )])(Ptyp_constr:"expression|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pvb_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pvb_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"module_binding" = ((*P21*)process_record_kind "pmb_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 1040)(int 41025)(int 41038)(string "test/test2.ml" )(int 1040)(int 41025)(int 41044)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(string "test/test2.ml" )(int 1040)(int 41025)(int 41038)(string "test/test2.ml" )(int 1040)(int 41025)(int 41051)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 1040)(int 41025)(int 41038)(string "test/test2.ml" )(int 1040)(int 41025)(int 41044)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pmb_expr" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "module_expr");(process_core_type_list[] )])(Ptyp_constr:"module_expr|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmb_attributes" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "attributes");(process_core_type_list[] )])(Ptyp_constr:"attributes|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pmb_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"toplevel_phrase" = (Ptype_variant (constructor "Ptop_def" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "structure");(process_core_type_list[] )])(Ptyp_constr:"structure|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Ptop_dir" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "toplevel_directive");(process_core_type_list[] )])(Ptyp_constr:"toplevel_directive|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_toplevel_phrase(x:toplevel_phrase)=
match x with
);print_type_decl:"toplevel_directive" = ((*P21*)process_record_kind "pdir_name" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "loc");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(string "test/test2.ml" )(int 1055)(int 41452)(int 41466)(string "test/test2.ml" )(int 1055)(int 41452)(int 41472)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"loc|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pdir_arg" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "directive_argument");(process_core_type_list[] )])(string "test/test2.ml" )(int 1056)(int 41478)(int 41491)(string "test/test2.ml" )(int 1056)(int 41478)(int 41509)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "directive_argument");(process_core_type_list[] )])(Ptyp_constr:"directive_argument|") ->my_process_core_type_list:,my_process_core_type_list:))/((*P21*)process_record_kind "pdir_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"directive_argument" = ((*P21*)process_record_kind "pdira_desc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "directive_argument_desc");(process_core_type_list[] )])(Ptyp_constr:"directive_argument_desc|") ->my_process_core_type_list:))/((*P21*)process_record_kind "pdira_loc" (body ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "location");(process_core_type_list[] )])(Ptyp_constr:"location|") ->my_process_core_type_list:))/;print_type_decl:"directive_argument_desc" = (Ptype_variant (constructor "Pdir_string" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pdir_int" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "string");(process_core_type_list[] )])(Ptyp_constr:"string|") ->my_process_core_type_list:,ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "option");(process_core_type_list[(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(string "test/test2.ml" )(int 1067)(int 41761)(int 41786)(string "test/test2.ml" )(int 1067)(int 41761)(int 41790)(bool false)((*P70*)process_type_decl_location_stack[] )((*P59*)process_attribute[] );] )])(Ptyp_constr:"option|") ->ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "char");(process_core_type_list[] )])(Ptyp_constr:"char|") ->my_process_core_type_list:,my_process_core_type_list:,my_process_core_type_list:})(constructor "Pdir_ident" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "longident");(process_core_type_list[] )])(Ptyp_constr:"longident|") ->my_process_core_type_list:,my_process_core_type_list:})(constructor "Pdir_bool" {Pcstr_tuple:ptyp_desc:(gen_process_core_type_desc (process_generic_type "core_type_desc" "Ptyp_constr" [(ident "bool");(process_core_type_list[] )])(Ptyp_constr:"bool|") ->my_process_core_type_list:,my_process_core_type_list:})
DEBUG3A: let process_variant_directive_argument_desc(x:directive_argument_desc)=
match x with
);print_type_decl:"cases" = DBG1:Ptype_abstract;)
TOPstructure_item_desc2:structure_item_desc__Pstr_type_rec_flagarec_flag0
TOPstructure_item_desc:(print_structure_item_desc class)
TOPstructure_item_desc2:structure_item_desc__Pstr_class_listalist0
TOPstructure_item_desc:(print_structure_item_desc class)
TOPstructure_item_desc2:structure_item_desc__Pstr_class_listalist0
TOPstructure_item_desc:(print_structure_item_desc class)
TOPstructure_item_desc2:structure_item_desc__Pstr_class_listalist0
TOPstructure_item_desc:(print_structure_item_desc class)
TOPstructure_item_desc2:structure_item_desc__Pstr_class_listalist0
TOPstructure_item_desc:(print_structure_item_desc class)
TOPstructure_item_desc2:structure_item_desc__Pstr_class_listalist0
TOPstructure_item_desc:(print_structure_item_desc class)
TOPstructure_item_desc2:structure_item_desc__Pstr_class_listalist0
TOPstructure_item_desc:(print_structure_item_desc class)
TOPstructure_item_desc2:structure_item_desc__Pstr_class_listalist0
TOPstructure_item_desc:(print_structure_item_desc _attribute)
TOPstructure_item_desc2:structure_item_desc__Pstr_attribute_attributeaattribute0
TOPstructure_item_desc:(print_structure_item_desc _attribute)
TOPstructure_item_desc2:structure_item_desc__Pstr_attribute_attributeaattribute0
[@@@ocaml.text " Definition of the OCaml AST "]
type position123 = Lexing.position =
  {
  pos_fname: string ;
  pos_lnum: int ;
  pos_bol: int ;
  pos_cnum: int }
and location123 = Location.t =
  {
  loc_start: position ;
  loc_end: position ;
  loc_ghost: bool }
and location = location123
and position = position123
and location_stack = location list
and 'a loc = 'a Location.loc = {
  txt: 'a ;
  loc: location }
and longident = Longident.t =
  | Lident of string 
  | Ldot of longident * string 
  | Lapply of longident * longident 
and longident_loc = longident loc
and rec_flag = Asttypes.rec_flag =
  | Nonrecursive 
  | Recursive [@@ocaml.text
                " Auxiliary AST types used by parsetree and typedtree. "]
and direction_flag = Asttypes.direction_flag =
  | Upto 
  | Downto 
and private_flag = Asttypes.private_flag =
  | Private 
  | Public 
and mutable_flag = Asttypes.mutable_flag =
  | Immutable 
  | Mutable 
and virtual_flag = Asttypes.virtual_flag =
  | Virtual 
  | Concrete 
and override_flag = Asttypes.override_flag =
  | Override 
  | Fresh 
and closed_flag = Asttypes.closed_flag =
  | Closed 
  | Open 
and label = string
and arg_label = Asttypes.arg_label =
  | Nolabel 
  | Labelled of string [@ocaml.doc " [label:T -> ...] "]
  | Optional of string [@ocaml.doc " [?label:T -> ...] "]
and variance = Asttypes.variance =
  | Covariant 
  | Contravariant 
  | NoVariance 
and injectivity = Asttypes.injectivity =
  | Injective 
  | NoInjectivity 
and constant = Parsetree.constant =
  | Pconst_integer of string * char option
  [@ocaml.doc
    " Integer constants such as [3] [3l] [3L] [3n].\n\n          Suffixes [\\[g-z\\]\\[G-Z\\]] are accepted by the parser. Suffixes except\n          ['l'], ['L'] and ['n'] are rejected by the typechecker "]
  | Pconst_char of char [@ocaml.doc " Character such as ['c']. "]
  | Pconst_string of string * location * string option
  [@ocaml.doc
    " Constant string such as [\"constant\"] or\n          [{delim|other constant|delim}].\n\n          The location span the content of the string, without the delimiters. "]
  | Pconst_float of string * char option
  [@ocaml.doc
    " Float constant such as [3.4], [2e5] or [1.4e-4].\n\n          Suffixes [g-z][G-Z] are accepted by the parser. Suffixes are rejected\n          by the typechecker. "]
[@@ocaml.text " Abstract syntax tree produced by parsing "]
and attribute = Parsetree.attribute =
  {
  attr_name: string loc ;
  attr_payload: payload ;
  attr_loc: location }[@@ocaml.text " {1 Extension points} "][@@ocaml.doc
                                                               " Attributes such as [\\[@id ARG\\]] and [\\[@@id ARG\\]].\n\n    Metadata containers passed around within the AST. The compiler ignores\n    unknown attributes. "]
and extension = (string loc * payload)[@@ocaml.doc
                                        " Extension points such as [\\[%id ARG\\] and \\[%%id ARG\\]].\n\n    Sub-language placeholder -- rejected by the typechecker. "]
and attributes = attribute list
and payload = Parsetree.payload =
  | PStr of structure 
  | PSig of signature
  [@ocaml.doc " [: SIG] in an attribute or an extension point "]
  | PTyp of core_type
  [@ocaml.doc " [: T] in an attribute or an extension point "]
  | PPat of pattern * expression option
  [@ocaml.doc
    " [? P] or [? P when E], in an attribute or an extension point "]
and core_type = Parsetree.core_type =
  {
  ptyp_desc: core_type_desc ;
  ptyp_loc: location ;
  ptyp_loc_stack: location_stack ;
  ptyp_attributes: attributes [@ocaml.doc " [... \\[@id1\\] \\[@id2\\]] "]}
[@@ocaml.text " {1 Core language} "][@@ocaml.text " {2 Type expressions} "]
and core_type_desc = Parsetree.core_type_desc =
  | Ptyp_any [@ocaml.doc " [_] "]
  | Ptyp_var of string [@ocaml.doc " A type variable such as ['a] "]
  | Ptyp_arrow of arg_label * core_type * core_type
  [@ocaml.doc
    " [Ptyp_arrow(lbl, T1, T2)] represents:\n\n          - [T1 -> T2] when [lbl] is {{!Asttypes.arg_label.Nolabel} [Nolabel]},\n          - [~l:T1 -> T2] when [lbl] is {{!Asttypes.arg_label.Labelled}\n            [Labelled]},\n          - [?l:T1 -> T2] when [lbl] is {{!Asttypes.arg_label.Optional}\n            [Optional]}. "]
  | Ptyp_tuple of core_type list
  [@ocaml.doc
    " [Ptyp_tuple(\\[T1 ; ... ; Tn\\])] represents a product type\n          [T1 * ... * Tn].\n\n          Invariant: [n >= 2]. "]
  | Ptyp_constr of longident_loc * core_type list
  [@ocaml.doc
    " [Ptyp_constr(lident, l)] represents:\n\n          - [tconstr] when [l=\\[\\]],\n          - [T tconstr] when [l=\\[T\\]],\n          - [(T1, ..., Tn) tconstr] when [l=\\[T1 ; ... ; Tn\\]]. "]
  | Ptyp_object of object_field list * closed_flag
  [@ocaml.doc
    " [Ptyp_object(\\[ l1:T1; ...; ln:Tn \\], flag)] represents:\n\n          - [< l1:T1; ...; ln:Tn >] when [flag] is\n            {{!Asttypes.closed_flag.Closed} [Closed]},\n          - [< l1:T1; ...; ln:Tn; .. >] when [flag] is\n            {{!Asttypes.closed_flag.Open} [Open]}. "]
  | Ptyp_class of longident_loc * core_type list
  [@ocaml.doc
    " [Ptyp_class(tconstr, l)] represents:\n\n          - [#tconstr] when [l=\\[\\]],\n          - [T #tconstr] when [l=\\[T\\]],\n          - [(T1, ..., Tn) #tconstr] when [l=\\[T1 ; ... ; Tn\\]]. "]
  | Ptyp_alias of core_type * string [@ocaml.doc " [T as 'a]. "]
  | Ptyp_variant of row_field list * closed_flag * label list option
  [@ocaml.doc
    " [Ptyp_variant(\\[`A;`B\\], flag, labels)] represents:\n\n          - [\\[ `A|`B \\]] when [flag] is {{!Asttypes.closed_flag.Closed}\n            [Closed]}, and [labels] is [None],\n          - [\\[> `A|`B \\]] when [flag] is {{!Asttypes.closed_flag.Open} [Open]},\n            and [labels] is [None],\n          - [\\[< `A|`B \\]] when [flag] is {{!Asttypes.closed_flag.Closed}\n            [Closed]}, and [labels] is [Some \\[\\]],\n          - [\\[< `A|`B > `X `Y \\]] when [flag] is\n            {{!Asttypes.closed_flag.Closed} [Closed]}, and [labels] is\n            [Some \\[\"X\";\"Y\"\\]]. "]
  | Ptyp_poly of string loc list * core_type
  [@ocaml.doc
    " ['a1 ... 'an. T]\n\n          Can only appear in the following context:\n\n          - As the {!core_type} of a {{!pattern_desc.Ppat_constraint}\n            [Ppat_constraint]} node corresponding to a constraint on a\n            let-binding:\n\n          {[\n            let x : 'a1 ... 'an. T = e ...\n          ]}\n          - Under {{!class_field_kind.Cfk_virtual} [Cfk_virtual]} for methods\n            (not values).\n\n          - As the {!core_type} of a {{!class_type_field_desc.Pctf_method}\n            [Pctf_method]} node.\n\n          - As the {!core_type} of a {{!expression_desc.Pexp_poly} [Pexp_poly]}\n            node.\n\n          - As the {{!label_declaration.pld_type} [pld_type]} field of a\n            {!label_declaration}.\n\n          - As a {!core_type} of a {{!core_type_desc.Ptyp_object} [Ptyp_object]}\n            node.\n\n          - As the {{!value_description.pval_type} [pval_type]} field of a\n            {!value_description}. "]
  | Ptyp_package of package_type [@ocaml.doc " [(module S)]. "]
  | Ptyp_extension of extension [@ocaml.doc " [\\[%id\\]]. "]
and package_type = (longident_loc * (longident_loc * core_type) list)
[@@ocaml.doc
  " As {!package_type} typed values:\n\n    - [(S, \\[\\])] represents [(module S)],\n    - [(S, \\[(t1, T1) ; ... ; (tn, Tn)\\])] represents\n      [(module S with type t1 = T1 and ... and tn = Tn)]. "]
and row_field = Parsetree.row_field =
  {
  prf_desc: row_field_desc ;
  prf_loc: location ;
  prf_attributes: attributes }
and row_field_desc = Parsetree.row_field_desc =
  | Rtag of label loc * bool * core_type list
  [@ocaml.doc
    " [Rtag(`A, b, l)] represents:\n\n          - [`A] when [b] is [true] and [l] is [\\[\\]],\n          - [`A of T] when [b] is [false] and [l] is [\\[T\\]],\n          - [`A of T1 & .. & Tn] when [b] is [false] and [l] is [\\[T1;...Tn\\]],\n          - [`A of & T1 & .. & Tn] when [b] is [true] and [l] is [\\[T1;...Tn\\]].\n\n          - The [bool] field is true if the tag contains a constant (empty)\n            constructor.\n          - [&] occurs when several types are used for the same constructor (see\n            4.2 in the manual) "]
  | Rinherit of core_type [@ocaml.doc " [\\[ | t \\]] "]
and object_field = Parsetree.object_field =
  {
  pof_desc: object_field_desc ;
  pof_loc: location ;
  pof_attributes: attributes }
and object_field_desc = Parsetree.object_field_desc =
  | Otag of label loc * core_type 
  | Oinherit of core_type 
and pattern = Parsetree.pattern =
  {
  ppat_desc: pattern_desc ;
  ppat_loc: location ;
  ppat_loc_stack: location_stack ;
  ppat_attributes: attributes [@ocaml.doc " [... \\[@id1\\] \\[@id2\\]] "]}
[@@ocaml.text " {2 Patterns} "]
and pattern_desc = Parsetree.pattern_desc =
  | Ppat_any [@ocaml.doc " The pattern [_]. "]
  | Ppat_var of string loc [@ocaml.doc " A variable pattern such as [x] "]
  | Ppat_alias of pattern * string loc
  [@ocaml.doc " An alias pattern such as [P as 'a] "]
  | Ppat_constant of constant
  [@ocaml.doc
    " Patterns such as [1], ['a'], [\"true\"], [1.0], [1l], [1L], [1n] "]
  | Ppat_interval of constant * constant
  [@ocaml.doc
    " Patterns such as ['a'..'z'].\n\n          Other forms of interval are recognized by the parser but rejected by\n          the type-checker. "]
  | Ppat_tuple of pattern list
  [@ocaml.doc " Patterns [(P1, ..., Pn)].\n\n          Invariant: [n >= 2] "]
  | Ppat_construct of longident_loc * (string loc list * pattern) option
  [@ocaml.doc
    " [Ppat_construct(C, args)] represents:\n\n          - [C] when [args] is [None],\n          - [C P] when [args] is [Some (\\[\\], P)]\n          - [C (P1, ..., Pn)] when [args] is\n            [Some (\\[\\], Ppat_tuple \\[P1; ...; Pn\\])]\n          - [C (type a b) P] when [args] is [Some (\\[a; b\\], P)] "]
  | Ppat_variant of label * pattern option
  [@ocaml.doc
    " [Ppat_variant(`A, pat)] represents:\n\n          - [`A] when [pat] is [None],\n          - [`A P] when [pat] is [Some P] "]
  | Ppat_record of (longident_loc * pattern) list * closed_flag
  [@ocaml.doc
    " [Ppat_record(\\[(l1, P1) ; ... ; (ln, Pn)\\], flag)] represents:\n\n          - [{ l1=P1; ...; ln=Pn }] when [flag] is\n            {{!Asttypes.closed_flag.Closed} [Closed]}\n          - [{ l1=P1; ...; ln=Pn; _}] when [flag] is\n            {{!Asttypes.closed_flag.Open} [Open]}\n\n          Invariant: [n > 0] "]
  | Ppat_array of pattern list
  [@ocaml.doc " Pattern [\\[| P1; ...; Pn |\\]] "]
  | Ppat_or of pattern * pattern [@ocaml.doc " Pattern [P1 | P2] "]
  | Ppat_constraint of pattern * core_type
  [@ocaml.doc " Pattern [(P : T)] "]
  | Ppat_type of longident_loc [@ocaml.doc " Pattern [#tconst] "]
  | Ppat_lazy of pattern [@ocaml.doc " Pattern [lazy P] "]
  | Ppat_unpack of string option loc
  [@ocaml.doc
    " [Ppat_unpack(s)] represents:\n\n          - [(module P)] when [s] is [Some \"P\"]\n          - [(module _)] when [s] is [None]\n\n          Note: [(module P : S)] is represented as\n          [Ppat_constraint(Ppat_unpack(Some \"P\"), Ptyp_package S)] "]
  | Ppat_exception of pattern [@ocaml.doc " Pattern [exception P] "]
  | Ppat_extension of extension [@ocaml.doc " Pattern [\\[%id\\]] "]
  | Ppat_open of longident_loc * pattern [@ocaml.doc " Pattern [M.(P)] "]
and expression = Parsetree.expression =
  {
  pexp_desc: expression_desc ;
  pexp_loc: location ;
  pexp_loc_stack: location_stack ;
  pexp_attributes: attributes [@ocaml.doc " [... \\[@id1\\] \\[@id2\\]] "]}
[@@ocaml.text " {2 Value expressions} "]
and expression_desc = Parsetree.expression_desc =
  | Pexp_ident of longident_loc
  [@ocaml.doc " Identifiers such as [x] and [M.x] "]
  | Pexp_constant of constant
  [@ocaml.doc
    " Expressions constant such as [1], ['a'], [\"true\"], [1.0], [1l], [1L],\n          [1n] "]
  | Pexp_let of rec_flag * value_binding list * expression
  [@ocaml.doc
    " [Pexp_let(flag, \\[(P1,E1) ; ... ; (Pn,En)\\], E)] represents:\n\n          - [let P1 = E1 and ... and Pn = EN in E] when [flag] is\n            {{!Asttypes.rec_flag.Nonrecursive} [Nonrecursive]},\n          - [let rec P1 = E1 and ... and Pn = EN in E] when [flag] is\n            {{!Asttypes.rec_flag.Recursive} [Recursive]}. "]
  | Pexp_function of cases
  [@ocaml.doc " [function P1 -> E1 | ... | Pn -> En] "]
  | Pexp_fun of arg_label * expression option * pattern * expression
  [@ocaml.doc
    " [Pexp_fun(lbl, exp0, P, E1)] represents:\n\n          - [fun P -> E1] when [lbl] is {{!Asttypes.arg_label.Nolabel}\n            [Nolabel]} and [exp0] is [None]\n          - [fun ~l:P -> E1] when [lbl] is {{!Asttypes.arg_label.Labelled}\n            [Labelled l]} and [exp0] is [None]\n          - [fun ?l:P -> E1] when [lbl] is {{!Asttypes.arg_label.Optional}\n            [Optional l]} and [exp0] is [None]\n          - [fun ?l:(P = E0) -> E1] when [lbl] is\n            {{!Asttypes.arg_label.Optional} [Optional l]} and [exp0] is\n            [Some E0]\n\n          Notes:\n\n          - If [E0] is provided, only {{!Asttypes.arg_label.Optional}\n            [Optional]} is allowed.\n          - [fun P1 P2 .. Pn -> E1] is represented as nested\n            {{!expression_desc.Pexp_fun} [Pexp_fun]}.\n          - [let f P = E] is represented using {{!expression_desc.Pexp_fun}\n            [Pexp_fun]}. "]
  | Pexp_apply of expression * (arg_label * expression) list
  [@ocaml.doc
    " [Pexp_apply(E0, \\[(l1, E1) ; ... ; (ln, En)\\])] represents\n          [E0 ~l1:E1 ... ~ln:En]\n\n          [li] can be {{!Asttypes.arg_label.Nolabel} [Nolabel]} (non labeled\n          argument), {{!Asttypes.arg_label.Labelled} [Labelled]} (labelled\n          arguments) or {{!Asttypes.arg_label.Optional} [Optional]} (optional\n          argument).\n\n          Invariant: [n > 0] "]
  | Pexp_match of expression * cases
  [@ocaml.doc " [match E0 with P1 -> E1 | ... | Pn -> En] "]
  | Pexp_try of expression * cases
  [@ocaml.doc " [try E0 with P1 -> E1 | ... | Pn -> En] "]
  | Pexp_tuple of expression list
  [@ocaml.doc
    " Expressions [(E1, ..., En)]\n\n          Invariant: [n >= 2] "]
  | Pexp_construct of longident_loc * expression option
  [@ocaml.doc
    " [Pexp_construct(C, exp)] represents:\n\n          - [C] when [exp] is [None],\n          - [C E] when [exp] is [Some E],\n          - [C (E1, ..., En)] when [exp] is [Some (Pexp_tuple\\[E1;...;En\\])] "]
  | Pexp_variant of label * expression option
  [@ocaml.doc
    " [Pexp_variant(`A, exp)] represents\n\n          - [`A] when [exp] is [None]\n          - [`A E] when [exp] is [Some E] "]
  | Pexp_record of (longident_loc * expression) list * expression option
  [@ocaml.doc
    " [Pexp_record(\\[(l1,P1) ; ... ; (ln,Pn)\\], exp0)] represents\n\n          - [{ l1=P1; ...; ln=Pn }] when [exp0] is [None]\n          - [{ E0 with l1=P1; ...; ln=Pn }] when [exp0] is [Some E0]\n\n          Invariant: [n > 0] "]
  | Pexp_field of expression * longident_loc [@ocaml.doc " [E.l] "]
  | Pexp_setfield of expression * longident_loc * expression
  [@ocaml.doc " [E1.l <- E2] "]
  | Pexp_array of expression list [@ocaml.doc " [\\[| E1; ...; En |\\]] "]
  | Pexp_ifthenelse of expression * expression * expression option
  [@ocaml.doc " [if E1 then E2 else E3] "]
  | Pexp_sequence of expression * expression [@ocaml.doc " [E1; E2] "]
  | Pexp_while of expression * expression
  [@ocaml.doc " [while E1 do E2 done] "]
  | Pexp_for of pattern * expression * expression * direction_flag *
  expression
  [@ocaml.doc
    " [Pexp_for(i, E1, E2, direction, E3)] represents:\n\n          - [for i = E1 to E2 do E3 done] when [direction] is\n            {{!Asttypes.direction_flag.Upto} [Upto]}\n          - [for i = E1 downto E2 do E3 done] when [direction] is\n            {{!Asttypes.direction_flag.Downto} [Downto]} "]
  | Pexp_constraint of expression * core_type [@ocaml.doc " [(E : T)] "]
  | Pexp_coerce of expression * core_type option * core_type
  [@ocaml.doc
    " [Pexp_coerce(E, from, T)] represents\n\n          - [(E :> T)] when [from] is [None],\n          - [(E : T0 :> T)] when [from] is [Some T0]. "]
  | Pexp_send of expression * label loc [@ocaml.doc " [E # m] "]
  | Pexp_new of longident_loc [@ocaml.doc " [new M.c] "]
  | Pexp_setinstvar of label loc * expression [@ocaml.doc " [x <- 2] "]
  | Pexp_override of (label loc * expression) list
  [@ocaml.doc " [{< x1 = E1; ...; xn = En >}] "]
  | Pexp_letmodule of string option loc * module_expr * expression
  [@ocaml.doc " [let module M = ME in E] "]
  | Pexp_letexception of extension_constructor * expression
  [@ocaml.doc " [let exception C in E] "]
  | Pexp_assert of expression
  [@ocaml.doc
    " [assert E].\n\n          Note: [assert false] is treated in a special way by the type-checker. "]
  | Pexp_lazy of expression [@ocaml.doc " [lazy E] "]
  | Pexp_poly of expression * core_type option
  [@ocaml.doc
    " Used for method bodies.\n\n          Can only be used as the expression under\n          {{!class_field_kind.Cfk_concrete} [Cfk_concrete]} for methods (not\n          values). "]
  | Pexp_object of class_structure [@ocaml.doc " [object ... end] "]
  | Pexp_newtype of string loc * expression
  [@ocaml.doc " [fun (type t) -> E] "]
  | Pexp_pack of module_expr
  [@ocaml.doc
    " [(module ME)].\n\n          [(module ME : S)] is represented as\n          [Pexp_constraint(Pexp_pack ME, Ptyp_package S)] "]
  | Pexp_open of open_declaration * expression
  [@ocaml.doc
    " - [M.(E)]\n          - [let open M in E]\n          - [let open! M in E] "]
  | Pexp_letop of letop
  [@ocaml.doc
    " - [let* P = E0 in E1]\n          - [let* P0 = E00 and* P1 = E01 in E1] "]
  | Pexp_extension of extension [@ocaml.doc " [\\[%id\\]] "]
  | Pexp_unreachable [@ocaml.doc " [.] "]
and case = Parsetree.case =
  {
  pc_lhs: pattern ;
  pc_guard: expression option ;
  pc_rhs: expression }[@@ocaml.doc
                        " Values of type {!case} represents [(P -> E)] or [(P when E0 -> E)] "]
and letop = Parsetree.letop =
  {
  let_: binding_op ;
  ands: binding_op list ;
  body: expression }
and binding_op = Parsetree.binding_op =
  {
  pbop_op: string loc ;
  pbop_pat: pattern ;
  pbop_exp: expression ;
  pbop_loc: location }
and value_description = Parsetree.value_description =
  {
  pval_name: string loc ;
  pval_type: core_type ;
  pval_prim: string list ;
  pval_attributes: attributes [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "];
  pval_loc: location }[@@ocaml.text " {2 Value descriptions} "][@@ocaml.doc
                                                                 " Values of type {!value_description} represents:\n\n    - [val x: T], when {{!value_description.pval_prim} [pval_prim]} is [\\[\\]]\n    - [external x: T = \"s1\" ... \"sn\"] when {{!value_description.pval_prim}\n      [pval_prim]} is [\\[\"s1\";...\"sn\"\\]] "]
and type_declaration = Parsetree.type_declaration =
  {
  ptype_name: string loc ;
  ptype_params: (core_type * (variance * injectivity)) list
    [@ocaml.doc " [('a1,...'an) t] "];
  ptype_cstrs: (core_type * core_type * location) list
    [@ocaml.doc " [... constraint T1=T1'  ... constraint Tn=Tn'] "];
  ptype_kind: type_kind ;
  ptype_private: private_flag [@ocaml.doc " for [= private ...] "];
  ptype_manifest: core_type option [@ocaml.doc " represents [= T] "];
  ptype_attributes: attributes [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "];
  ptype_loc: location }[@@ocaml.text " {2 Type declarations} "][@@ocaml.doc
                                                                 " Here are type declarations and their representation, for various\n    {{!type_declaration.ptype_kind} [ptype_kind]} and\n    {{!type_declaration.ptype_manifest} [ptype_manifest]} values:\n\n    - [type t] when [type_kind] is {{!type_kind.Ptype_abstract}\n      [Ptype_abstract]}, and [manifest] is [None],\n    - [type t = T0] when [type_kind] is {{!type_kind.Ptype_abstract}\n      [Ptype_abstract]}, and [manifest] is [Some T0],\n    - [type t = C of T | ...] when [type_kind] is {{!type_kind.Ptype_variant}\n      [Ptype_variant]}, and [manifest] is [None],\n    - [type t = T0 = C of T | ...] when [type_kind] is\n      {{!type_kind.Ptype_variant} [Ptype_variant]}, and [manifest] is [Some T0],\n    - [type t = {l: T; ...}] when [type_kind] is {{!type_kind.Ptype_record}\n      [Ptype_record]}, and [manifest] is [None],\n    - [type t = T0 = {l : T; ...}] when [type_kind] is\n      {{!type_kind.Ptype_record} [Ptype_record]}, and [manifest] is [Some T0],\n    - [type t = ..] when [type_kind] is {{!type_kind.Ptype_open} [Ptype_open]},\n      and [manifest] is [None]. "]
and type_kind = Parsetree.type_kind =
  | Ptype_abstract 
  | Ptype_variant of constructor_declaration list 
  | Ptype_record of label_declaration list
  [@ocaml.doc " Invariant: non-empty list "]
  | Ptype_open 
and label_declaration = Parsetree.label_declaration =
  {
  pld_name: string loc ;
  pld_mutable: mutable_flag ;
  pld_type: core_type ;
  pld_loc: location ;
  pld_attributes: attributes [@ocaml.doc " [l : T \\[@id1\\] \\[@id2\\]] "]}
[@@ocaml.doc
  " - [{ ...; l: T; ... }] when {{!label_declaration.pld_mutable} [pld_mutable]}\n      is {{!Asttypes.mutable_flag.Immutable} [Immutable]},\n    - [{ ...; mutable l: T; ... }] when {{!label_declaration.pld_mutable}\n      [pld_mutable]} is {{!Asttypes.mutable_flag.Mutable} [Mutable]}.\n\n    Note: [T] can be a {{!core_type_desc.Ptyp_poly} [Ptyp_poly]}. "]
and constructor_declaration = Parsetree.constructor_declaration =
  {
  pcd_name: string loc ;
  pcd_vars: string loc list ;
  pcd_args: constructor_arguments ;
  pcd_res: core_type option ;
  pcd_loc: location ;
  pcd_attributes: attributes
    [@ocaml.doc " [C of ... \\[@id1\\] \\[@id2\\]] "]}
and constructor_arguments = Parsetree.constructor_arguments =
  | Pcstr_tuple of core_type list 
  | Pcstr_record of label_declaration list
  [@ocaml.doc
    " Values of type {!constructor_declaration} represents the constructor\n          arguments of:\n\n          - [C of T1 * ... * Tn] when [res = None], and\n            [args = Pcstr_tuple \\[T1; ... ; Tn\\]],\n          - [C: T0] when [res = Some T0], and [args = Pcstr_tuple \\[\\]],\n          - [C: T1 * ... * Tn -> T0] when [res = Some T0], and\n            [args = Pcstr_tuple \\[T1; ... ; Tn\\]],\n          - [C of {...}] when [res = None], and [args = Pcstr_record \\[...\\]],\n          - [C: {...} -> T0] when [res = Some T0], and\n            [args = Pcstr_record \\[...\\]]. "]
and type_extension = Parsetree.type_extension =
  {
  ptyext_path: longident_loc ;
  ptyext_params: (core_type * (variance * injectivity)) list ;
  ptyext_constructors: extension_constructor list ;
  ptyext_private: private_flag ;
  ptyext_loc: location ;
  ptyext_attributes: attributes [@ocaml.doc " ... [@@id1] [@@id2] "]}
[@@ocaml.doc
  " Definition of new extensions constructors for the extensive sum type [t]\n    ([type t += ...]). "]
and extension_constructor = Parsetree.extension_constructor =
  {
  pext_name: string loc ;
  pext_kind: extension_constructor_kind ;
  pext_loc: location ;
  pext_attributes: attributes
    [@ocaml.doc " [C of ... \\[@id1\\] \\[@id2\\]] "]}
and type_exception = Parsetree.type_exception =
  {
  ptyexn_constructor: extension_constructor ;
  ptyexn_loc: location ;
  ptyexn_attributes: attributes
    [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "]}[@@ocaml.doc
                                                     " Definition of a new exception ([exception E]). "]
and extension_constructor_kind = Parsetree.extension_constructor_kind =
  | Pext_decl of string loc list * constructor_arguments * core_type option
  [@ocaml.doc
    " [Pext_decl(existentials, c_args, t_opt)] describes a new extension\n          constructor. It can be:\n\n          {ul\n           {- [C of T1 * ... * Tn]\n              when:\n\n              - [existentials] is [\\[\\]],\n              - [c_args] is [\\[T1; ...; Tn\\]],\n              - [t_opt] is [None].\n           }\n           {- [C: T0]\n              when\n\n              - [existentials] is [\\[\\]],\n              - [c_args] is [\\[\\]],\n              - [t_opt] is [Some T0].\n           }\n           {- [C: T1 * ... * Tn -> T0]\n              when\n\n              - [existentials] is [\\[\\]],\n              - [c_args] is [\\[T1; ...; Tn\\]],\n              - [t_opt] is [Some T0].\n           }\n           {- [C: 'a... . T1 * ... * Tn -> T0]\n              when\n\n              - [existentials] is [\\['a;...\\]],\n              - [c_args] is [\\[T1; ... ; Tn\\]],\n              - [t_opt] is [Some T0].\n           }\n          } "]
  | Pext_rebind of longident_loc
  [@ocaml.doc
    " [Pext_rebind(D)] re-export the constructor [D] with the new name [C] "]
and class_type = Parsetree.class_type =
  {
  pcty_desc: class_type_desc ;
  pcty_loc: location ;
  pcty_attributes: attributes [@ocaml.doc " [... \\[@id1\\] \\[@id2\\]] "]}
[@@ocaml.text " {1 Class language} "][@@ocaml.text
                                       " {2 Type expressions for the class language} "]
and class_type_desc = Parsetree.class_type_desc =
  | Pcty_constr of longident_loc * core_type list
  [@ocaml.doc " - [c]\n          - [\\['a1, ..., 'an\\] c] "]
  | Pcty_signature of class_signature [@ocaml.doc " [object ... end] "]
  | Pcty_arrow of arg_label * core_type * class_type
  [@ocaml.doc
    " [Pcty_arrow(lbl, T, CT)] represents:\n\n          - [T -> CT] when [lbl] is {{!Asttypes.arg_label.Nolabel} [Nolabel]},\n          - [~l:T -> CT] when [lbl] is {{!Asttypes.arg_label.Labelled}\n            [Labelled l]},\n          - [?l:T -> CT] when [lbl] is {{!Asttypes.arg_label.Optional}\n            [Optional l]}. "]
  | Pcty_extension of extension [@ocaml.doc " [%id] "]
  | Pcty_open of open_description * class_type
  [@ocaml.doc " [let open M in CT] "]
and class_signature = Parsetree.class_signature =
  {
  pcsig_self: core_type ;
  pcsig_fields: class_type_field list }[@@ocaml.doc
                                         " Values of type [class_signature] represents:\n\n    - [object('selfpat) ... end]\n    - [object ... end] when {{!class_signature.pcsig_self} [pcsig_self]} is\n      {{!core_type_desc.Ptyp_any} [Ptyp_any]} "]
and class_type_field = Parsetree.class_type_field =
  {
  pctf_desc: class_type_field_desc ;
  pctf_loc: location ;
  pctf_attributes: attributes [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "]}
and class_type_field_desc = Parsetree.class_type_field_desc =
  | Pctf_inherit of class_type [@ocaml.doc " [inherit CT] "]
  | Pctf_val of (label loc * mutable_flag * virtual_flag * core_type)
  [@ocaml.doc " [val x: T] "]
  | Pctf_method of (label loc * private_flag * virtual_flag * core_type)
  [@ocaml.doc
    " [method x: T]\n\n          Note: [T] can be a {{!core_type_desc.Ptyp_poly} [Ptyp_poly]}. "]
  | Pctf_constraint of (core_type * core_type)
  [@ocaml.doc " [constraint T1 = T2] "]
  | Pctf_attribute of attribute [@ocaml.doc " [\\[@@@id\\]] "]
  | Pctf_extension of extension [@ocaml.doc " [\\[%%id\\]] "]
and 'a class_infos = 'a Parsetree.class_infos =
  {
  pci_virt: virtual_flag ;
  pci_params: (core_type * (variance * injectivity)) list ;
  pci_name: string loc ;
  pci_expr: 'a ;
  pci_loc: location ;
  pci_attributes: attributes [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "]}
[@@ocaml.doc
  " Values of type [class_expr class_infos] represents:\n\n    - [class c = ...]\n    - [class \\['a1,...,'an\\] c = ...]\n    - [class virtual c = ...]\n\n    They are also used for \"class type\" declaration. "]
and class_description = class_type class_infos
and class_type_declaration = class_type class_infos
and class_expr = Parsetree.class_expr =
  {
  pcl_desc: class_expr_desc ;
  pcl_loc: location ;
  pcl_attributes: attributes [@ocaml.doc " [... \\[@id1\\] \\[@id2\\]] "]}
[@@ocaml.text " {2 Value expressions for the class language} "]
and class_expr_desc = Parsetree.class_expr_desc =
  | Pcl_constr of longident_loc * core_type list
  [@ocaml.doc " [c] and [\\['a1, ..., 'an\\] c] "]
  | Pcl_structure of class_structure [@ocaml.doc " [object ... end] "]
  | Pcl_fun of arg_label * expression option * pattern * class_expr
  [@ocaml.doc
    " [Pcl_fun(lbl, exp0, P, CE)] represents:\n\n          - [fun P -> CE] when [lbl] is {{!Asttypes.arg_label.Nolabel}\n            [Nolabel]} and [exp0] is [None],\n          - [fun ~l:P -> CE] when [lbl] is {{!Asttypes.arg_label.Labelled}\n            [Labelled l]} and [exp0] is [None],\n          - [fun ?l:P -> CE] when [lbl] is {{!Asttypes.arg_label.Optional}\n            [Optional l]} and [exp0] is [None],\n          - [fun ?l:(P = E0) -> CE] when [lbl] is\n            {{!Asttypes.arg_label.Optional} [Optional l]} and [exp0] is\n            [Some E0]. "]
  | Pcl_apply of class_expr * (arg_label * expression) list
  [@ocaml.doc
    " [Pcl_apply(CE, \\[(l1,E1) ; ... ; (ln,En)\\])] represents\n          [CE ~l1:E1 ... ~ln:En]. [li] can be empty (non labeled argument) or\n          start with [?] (optional argument).\n\n          Invariant: [n > 0] "]
  | Pcl_let of rec_flag * value_binding list * class_expr
  [@ocaml.doc
    " [Pcl_let(rec, \\[(P1, E1); ... ; (Pn, En)\\], CE)] represents:\n\n          - [let P1 = E1 and ... and Pn = EN in CE] when [rec] is\n            {{!Asttypes.rec_flag.Nonrecursive} [Nonrecursive]},\n          - [let rec P1 = E1 and ... and Pn = EN in CE] when [rec] is\n            {{!Asttypes.rec_flag.Recursive} [Recursive]}. "]
  | Pcl_constraint of class_expr * class_type [@ocaml.doc " [(CE : CT)] "]
  | Pcl_extension of extension [@ocaml.doc " [\\[%id\\]] "]
  | Pcl_open of open_description * class_expr
  [@ocaml.doc " [let open M in CE] "]
and class_structure = Parsetree.class_structure =
  {
  pcstr_self: pattern ;
  pcstr_fields: class_field list }[@@ocaml.doc
                                    " Values of type {!class_structure} represents:\n\n    - [object(selfpat) ... end]\n    - [object ... end] when {{!class_structure.pcstr_self} [pcstr_self]} is\n      {{!pattern_desc.Ppat_any} [Ppat_any]} "]
and class_field = Parsetree.class_field =
  {
  pcf_desc: class_field_desc ;
  pcf_loc: location ;
  pcf_attributes: attributes [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "]}
and class_field_desc = Parsetree.class_field_desc =
  | Pcf_inherit of override_flag * class_expr * string loc option
  [@ocaml.doc
    " [Pcf_inherit(flag, CE, s)] represents:\n\n          - [inherit CE] when [flag] is {{!Asttypes.override_flag.Fresh}\n            [Fresh]} and [s] is [None],\n          - [inherit CE as x] when [flag] is {{!Asttypes.override_flag.Fresh}\n            [Fresh]} and [s] is [Some x],\n          - [inherit! CE] when [flag] is {{!Asttypes.override_flag.Override}\n            [Override]} and [s] is [None],\n          - [inherit! CE as x] when [flag] is\n            {{!Asttypes.override_flag.Override} [Override]} and [s] is [Some x] "]
  | Pcf_val of (label loc * mutable_flag * class_field_kind)
  [@ocaml.doc
    " [Pcf_val(x,flag, kind)] represents:\n\n          - [val x = E] when [flag] is {{!Asttypes.mutable_flag.Immutable}\n            [Immutable]} and [kind] is {{!class_field_kind.Cfk_concrete}\n            [Cfk_concrete(Fresh, E)]}\n          - [val virtual x: T] when [flag] is\n            {{!Asttypes.mutable_flag.Immutable} [Immutable]} and [kind] is\n            {{!class_field_kind.Cfk_virtual} [Cfk_virtual(T)]}\n          - [val mutable x = E] when [flag] is {{!Asttypes.mutable_flag.Mutable}\n            [Mutable]} and [kind] is {{!class_field_kind.Cfk_concrete}\n            [Cfk_concrete(Fresh, E)]}\n          - [val mutable virtual x: T] when [flag] is\n            {{!Asttypes.mutable_flag.Mutable} [Mutable]} and [kind] is\n            {{!class_field_kind.Cfk_virtual} [Cfk_virtual(T)]} "]
  | Pcf_method of (label loc * private_flag * class_field_kind)
  [@ocaml.doc
    " - [method x = E] ([E] can be a {{!expression_desc.Pexp_poly}\n            [Pexp_poly]})\n          - [method virtual x: T] ([T] can be a {{!core_type_desc.Ptyp_poly}\n            [Ptyp_poly]}) "]
  | Pcf_constraint of (core_type * core_type)
  [@ocaml.doc " [constraint T1 = T2] "]
  | Pcf_initializer of expression [@ocaml.doc " [initializer E] "]
  | Pcf_attribute of attribute [@ocaml.doc " [\\[@@@id\\]] "]
  | Pcf_extension of extension [@ocaml.doc " [\\[%%id\\]] "]
and class_field_kind = Parsetree.class_field_kind =
  | Cfk_virtual of core_type 
  | Cfk_concrete of override_flag * expression 
and class_declaration = class_expr class_infos
and module_type = Parsetree.module_type =
  {
  pmty_desc: module_type_desc ;
  pmty_loc: location ;
  pmty_attributes: attributes [@ocaml.doc " [... \\[@id1\\] \\[@id2\\]] "]}
[@@ocaml.text " {1 Module language} "][@@ocaml.text
                                        " {2 Type expressions for the module language} "]
and module_type_desc = Parsetree.module_type_desc =
  | Pmty_ident of longident_loc
  [@ocaml.doc " [Pmty_ident(S)] represents [S] "]
  | Pmty_signature of signature [@ocaml.doc " [sig ... end] "]
  | Pmty_functor of functor_parameter * module_type
  [@ocaml.doc " [functor(X : MT1) -> MT2] "]
  | Pmty_with of module_type * with_constraint list
  [@ocaml.doc " [MT with ...] "]
  | Pmty_typeof of module_expr [@ocaml.doc " [module type of ME] "]
  | Pmty_extension of extension [@ocaml.doc " [\\[%id\\]] "]
  | Pmty_alias of longident_loc [@ocaml.doc " [(module M)] "]
and functor_parameter = Parsetree.functor_parameter =
  | Unit [@ocaml.doc " [()] "]
  | Named of string option loc * module_type
  [@ocaml.doc
    " [Named(name, MT)] represents:\n\n          - [(X : MT)] when [name] is [Some X],\n          - [(_ : MT)] when [name] is [None] "]
and signature = signature_item list
and signature_item = Parsetree.signature_item =
  {
  psig_desc: signature_item_desc ;
  psig_loc: location }
and signature_item_desc = Parsetree.signature_item_desc =
  | Psig_value of value_description
  [@ocaml.doc
    " - [val x: T]\n          - [external x: T = \"s1\" ... \"sn\"] "]
  | Psig_type of rec_flag * type_declaration list
  [@ocaml.doc " [type t1 = ... and ... and tn  = ...] "]
  | Psig_typesubst of type_declaration list
  [@ocaml.doc " [type t1 := ... and ... and tn := ...] "]
  | Psig_typext of type_extension [@ocaml.doc " [type t1 += ...] "]
  | Psig_exception of type_exception [@ocaml.doc " [exception C of T] "]
  | Psig_module of module_declaration
  [@ocaml.doc " [module X = M] and [module X : MT] "]
  | Psig_modsubst of module_substitution [@ocaml.doc " [module X := M] "]
  | Psig_recmodule of module_declaration list
  [@ocaml.doc " [module rec X1 : MT1 and ... and Xn : MTn] "]
  | Psig_modtype of module_type_declaration
  [@ocaml.doc " [module type S = MT] and [module type S] "]
  | Psig_modtypesubst of module_type_declaration
  [@ocaml.doc " [module type S :=  ...] "]
  | Psig_open of open_description [@ocaml.doc " [open X] "]
  | Psig_include of include_description [@ocaml.doc " [include MT] "]
  | Psig_class of class_description list
  [@ocaml.doc " [class c1 : ... and ... and cn : ...] "]
  | Psig_class_type of class_type_declaration list
  [@ocaml.doc " [class type ct1 = ... and ... and ctn = ...] "]
  | Psig_attribute of attribute [@ocaml.doc " [\\[@@@id\\]] "]
  | Psig_extension of extension * attributes [@ocaml.doc " [\\[%%id\\]] "]
and module_declaration = Parsetree.module_declaration =
  {
  pmd_name: string option loc ;
  pmd_type: module_type ;
  pmd_attributes: attributes [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "];
  pmd_loc: location }[@@ocaml.doc
                       " Values of type [module_declaration] represents [S : MT] "]
and module_substitution = Parsetree.module_substitution =
  {
  pms_name: string loc ;
  pms_manifest: longident_loc ;
  pms_attributes: attributes [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "];
  pms_loc: location }[@@ocaml.doc
                       " Values of type [module_substitution] represents [S := M] "]
and module_type_declaration = Parsetree.module_type_declaration =
  {
  pmtd_name: string loc ;
  pmtd_type: module_type option ;
  pmtd_attributes: attributes [@ocaml.doc " [... \\[@@id1\\] \\[@@id2\\]] "];
  pmtd_loc: location }[@@ocaml.doc
                        " Values of type [module_type_declaration] represents:\n\n    - [S = MT],\n    - [S] for abstract module type declaration, when\n      {{!module_type_declaration.pmtd_type} [pmtd_type]} is [None]. "]
and 'a open_infos = 'a Parsetree.open_infos =
  {
  popen_expr: 'a ;
  popen_override: override_flag ;
  popen_loc: location ;
  popen_attributes: attributes }[@@ocaml.doc
                                  " Values of type ['a open_infos] represents:\n\n    - [open! X] when {{!open_infos.popen_override} [popen_override]} is\n      {{!Asttypes.override_flag.Override} [Override]} (silences the \"used\n      identifier shadowing\" warning)\n    - [open  X] when {{!open_infos.popen_override} [popen_override]} is\n      {{!Asttypes.override_flag.Fresh} [Fresh]} "]
and open_description = longident_loc open_infos[@@ocaml.doc
                                                 " Values of type [open_description] represents:\n\n    - [open M.N]\n    - [open M(N).O] "]
and open_declaration = module_expr open_infos[@@ocaml.doc
                                               " Values of type [open_declaration] represents:\n\n    - [open M.N]\n    - [open M(N).O]\n    - [open struct ... end] "]
and 'a include_infos = 'a Parsetree.include_infos =
  {
  pincl_mod: 'a ;
  pincl_loc: location ;
  pincl_attributes: attributes }
and include_description = module_type include_infos[@@ocaml.doc
                                                     " Values of type [include_description] represents [include MT] "]
and include_declaration = module_expr include_infos[@@ocaml.doc
                                                     " Values of type [include_declaration] represents [include ME] "]
and with_constraint = Parsetree.with_constraint =
  | Pwith_type of longident_loc * type_declaration
  [@ocaml.doc
    " [with type X.t = ...]\n\n          Note: the last component of the longident must match the name of the\n          type_declaration. "]
  | Pwith_module of longident_loc * longident_loc
  [@ocaml.doc " [with module X.Y = Z] "]
  | Pwith_modtype of longident_loc * module_type
  [@ocaml.doc " [with module type X.Y = Z] "]
  | Pwith_modtypesubst of longident_loc * module_type
  [@ocaml.doc " [with module type X.Y := sig end] "]
  | Pwith_typesubst of longident_loc * type_declaration
  [@ocaml.doc " [with type X.t := ..., same format as \\[Pwith_type\\]] "]
  | Pwith_modsubst of longident_loc * longident_loc
  [@ocaml.doc " [with module X.Y := Z] "]
and module_expr = Parsetree.module_expr =
  {
  pmod_desc: module_expr_desc ;
  pmod_loc: location ;
  pmod_attributes: attributes [@ocaml.doc " [... \\[@id1\\] \\[@id2\\]] "]}
[@@ocaml.text " {2 Value expressions for the module language} "]
and module_expr_desc = Parsetree.module_expr_desc =
  | Pmod_ident of longident_loc [@ocaml.doc " [X] "]
  | Pmod_structure of structure [@ocaml.doc " [struct ... end] "]
  | Pmod_functor of functor_parameter * module_expr
  [@ocaml.doc " [functor(X : MT1) -> ME] "]
  | Pmod_apply of module_expr * module_expr [@ocaml.doc " [ME1(ME2)] "]
  | Pmod_constraint of module_expr * module_type
  [@ocaml.doc " [(ME : MT)] "]
  | Pmod_unpack of expression [@ocaml.doc " [(val E)] "]
  | Pmod_extension of extension [@ocaml.doc " [\\[%id\\]] "]
and structure = structure_item list
and structure_item = Parsetree.structure_item =
  {
  pstr_desc: structure_item_desc ;
  pstr_loc: location }
and structure_item_desc = Parsetree.structure_item_desc =
  | Pstr_eval of expression * attributes [@ocaml.doc " [E] "]
  | Pstr_value of rec_flag * value_binding list
  [@ocaml.doc
    " [Pstr_value(rec, \\[(P1, E1 ; ... ; (Pn, En))\\])] represents:\n\n          - [let P1 = E1 and ... and Pn = EN] when [rec] is\n            {{!Asttypes.rec_flag.Nonrecursive} [Nonrecursive]},\n          - [let rec P1 = E1 and ... and Pn = EN ] when [rec] is\n            {{!Asttypes.rec_flag.Recursive} [Recursive]}. "]
  | Pstr_primitive of value_description
  [@ocaml.doc
    " - [val x: T]\n          - [external x: T = \"s1\" ... \"sn\" ]"]
  | Pstr_type of rec_flag * type_declaration list
  [@ocaml.doc " [type t1 = ... and ... and tn = ...] "]
  | Pstr_typext of type_extension [@ocaml.doc " [type t1 += ...] "]
  | Pstr_exception of type_exception
  [@ocaml.doc " - [exception C of T]\n          - [exception C = M.X] "]
  | Pstr_module of module_binding [@ocaml.doc " [module X = ME] "]
  | Pstr_recmodule of module_binding list
  [@ocaml.doc " [module rec X1 = ME1 and ... and Xn = MEn] "]
  | Pstr_modtype of module_type_declaration
  [@ocaml.doc " [module type S = MT] "]
  | Pstr_open of open_declaration [@ocaml.doc " [open X] "]
  | Pstr_class of class_declaration list
  [@ocaml.doc " [class c1 = ... and ... and cn = ...] "]
  | Pstr_class_type of class_type_declaration list
  [@ocaml.doc " [class type ct1 = ... and ... and ctn = ...] "]
  | Pstr_include of include_declaration [@ocaml.doc " [include ME] "]
  | Pstr_attribute of attribute [@ocaml.doc " [\\[@@@id\\]] "]
  | Pstr_extension of extension * attributes [@ocaml.doc " [\\[%%id\\]] "]
and value_binding = Parsetree.value_binding =
  {
  pvb_pat: pattern ;
  pvb_expr: expression ;
  pvb_attributes: attributes ;
  pvb_loc: location }
and module_binding = Parsetree.module_binding =
  {
  pmb_name: string option loc ;
  pmb_expr: module_expr ;
  pmb_attributes: attributes ;
  pmb_loc: location }[@@ocaml.doc
                       " Values of type [module_binding] represents [module X = ME] "]
and toplevel_phrase = Parsetree.toplevel_phrase =
  | Ptop_def of structure 
  | Ptop_dir of toplevel_directive [@ocaml.doc " [#use], [#load] ... "]
[@@ocaml.text " {1 Toplevel} "][@@ocaml.text " {2 Toplevel phrases} "]
and toplevel_directive = Parsetree.toplevel_directive =
  {
  pdir_name: string loc ;
  pdir_arg: directive_argument option ;
  pdir_loc: location }
and directive_argument = Parsetree.directive_argument =
  {
  pdira_desc: directive_argument_desc ;
  pdira_loc: location }
and directive_argument_desc = Parsetree.directive_argument_desc =
  | Pdir_string of string 
  | Pdir_int of string * char option 
  | Pdir_ident of longident 
  | Pdir_bool of bool 
and cases = case list[@@deriving_inline traverse]
class virtual map =
  object (self)
    method virtual  bool : bool -> bool
    method virtual  char : char -> char
    method virtual  int : int -> int
    method virtual  list : 'a . ('a -> 'a) -> 'a list -> 'a list
    method virtual  option : 'a . ('a -> 'a) -> 'a option -> 'a option
    method virtual  string : string -> string
    method position : position -> position=
      fun { pos_fname; pos_lnum; pos_bol; pos_cnum } ->
        let pos_fname = self#string pos_fname in
        let pos_lnum = self#int pos_lnum in
        let pos_bol = self#int pos_bol in
        let pos_cnum = self#int pos_cnum in
        { pos_fname; pos_lnum; pos_bol; pos_cnum }
    method location : location -> location=
      fun { loc_start; loc_end; loc_ghost } ->
        let loc_start = self#position loc_start in
        let loc_end = self#position loc_end in
        let loc_ghost = self#bool loc_ghost in
        { loc_start; loc_end; loc_ghost }
    method location_stack : location_stack -> location_stack=
      self#list self#location
    method loc : 'a . ('a -> 'a) -> 'a loc -> 'a loc=
      fun _a ->
        fun { txt; loc } ->
          let txt = _a txt in let loc = self#location loc in { txt; loc }
    method longident : longident -> longident=
      fun x ->
        match x with
        | Lident a -> let a = self#string a in Lident a
        | Ldot (a, b) ->
            let a = self#longident a in let b = self#string b in Ldot (a, b)
        | Lapply (a, b) ->
            let a = self#longident a in
            let b = self#longident b in Lapply (a, b)
    method longident_loc : longident_loc -> longident_loc=
      self#loc self#longident
    method rec_flag : rec_flag -> rec_flag= fun x -> x
    method direction_flag : direction_flag -> direction_flag= fun x -> x
    method private_flag : private_flag -> private_flag= fun x -> x
    method mutable_flag : mutable_flag -> mutable_flag= fun x -> x
    method virtual_flag : virtual_flag -> virtual_flag= fun x -> x
    method override_flag : override_flag -> override_flag= fun x -> x
    method closed_flag : closed_flag -> closed_flag= fun x -> x
    method label : label -> label= self#string
    method arg_label : arg_label -> arg_label=
      fun x ->
        match x with
        | Nolabel -> Nolabel
        | Labelled a -> let a = self#string a in Labelled a
        | Optional a -> let a = self#string a in Optional a
    method variance : variance -> variance= fun x -> x
    method injectivity : injectivity -> injectivity= fun x -> x
    method constant : constant -> constant=
      fun x ->
        match x with
        | Pconst_integer (a, b) ->
            let a = self#string a in
            let b = self#option self#char b in Pconst_integer (a, b)
        | Pconst_char a -> let a = self#char a in Pconst_char a
        | Pconst_string (a, b, c) ->
            let a = self#string a in
            let b = self#location b in
            let c = self#option self#string c in Pconst_string (a, b, c)
        | Pconst_float (a, b) ->
            let a = self#string a in
            let b = self#option self#char b in Pconst_float (a, b)
    method attribute : attribute -> attribute=
      fun { attr_name; attr_payload; attr_loc } ->
        let attr_name = self#loc self#string attr_name in
        let attr_payload = self#payload attr_payload in
        let attr_loc = self#location attr_loc in
        { attr_name; attr_payload; attr_loc }
    method extension : extension -> extension=
      fun (a, b) ->
        let a = self#loc self#string a in let b = self#payload b in (a, b)
    method attributes : attributes -> attributes= self#list self#attribute
    method payload : payload -> payload=
      fun x ->
        match x with
        | PStr a -> let a = self#structure a in PStr a
        | PSig a -> let a = self#signature a in PSig a
        | PTyp a -> let a = self#core_type a in PTyp a
        | PPat (a, b) ->
            let a = self#pattern a in
            let b = self#option self#expression b in PPat (a, b)
    method core_type : core_type -> core_type=
      fun { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes } ->
        let ptyp_desc = self#core_type_desc ptyp_desc in
        let ptyp_loc = self#location ptyp_loc in
        let ptyp_loc_stack = self#location_stack ptyp_loc_stack in
        let ptyp_attributes = self#attributes ptyp_attributes in
        { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes }
    method core_type_desc : core_type_desc -> core_type_desc=
      fun x ->
        match x with
        | Ptyp_any -> Ptyp_any
        | Ptyp_var a -> let a = self#string a in Ptyp_var a
        | Ptyp_arrow (a, b, c) ->
            let a = self#arg_label a in
            let b = self#core_type b in
            let c = self#core_type c in Ptyp_arrow (a, b, c)
        | Ptyp_tuple a -> let a = self#list self#core_type a in Ptyp_tuple a
        | Ptyp_constr (a, b) ->
            let a = self#longident_loc a in
            let b = self#list self#core_type b in Ptyp_constr (a, b)
        | Ptyp_object (a, b) ->
            let a = self#list self#object_field a in
            let b = self#closed_flag b in Ptyp_object (a, b)
        | Ptyp_class (a, b) ->
            let a = self#longident_loc a in
            let b = self#list self#core_type b in Ptyp_class (a, b)
        | Ptyp_alias (a, b) ->
            let a = self#core_type a in
            let b = self#string b in Ptyp_alias (a, b)
        | Ptyp_variant (a, b, c) ->
            let a = self#list self#row_field a in
            let b = self#closed_flag b in
            let c = self#option (self#list self#label) c in
            Ptyp_variant (a, b, c)
        | Ptyp_poly (a, b) ->
            let a = self#list (self#loc self#string) a in
            let b = self#core_type b in Ptyp_poly (a, b)
        | Ptyp_package a -> let a = self#package_type a in Ptyp_package a
        | Ptyp_extension a -> let a = self#extension a in Ptyp_extension a
    method package_type : package_type -> package_type=
      fun (a, b) ->
        let a = self#longident_loc a in
        let b =
          self#list
            (fun (a, b) ->
               let a = self#longident_loc a in
               let b = self#core_type b in (a, b)) b in
        (a, b)
    method row_field : row_field -> row_field=
      fun { prf_desc; prf_loc; prf_attributes } ->
        let prf_desc = self#row_field_desc prf_desc in
        let prf_loc = self#location prf_loc in
        let prf_attributes = self#attributes prf_attributes in
        { prf_desc; prf_loc; prf_attributes }
    method row_field_desc : row_field_desc -> row_field_desc=
      fun x ->
        match x with
        | Rtag (a, b, c) ->
            let a = self#loc self#label a in
            let b = self#bool b in
            let c = self#list self#core_type c in Rtag (a, b, c)
        | Rinherit a -> let a = self#core_type a in Rinherit a
    method object_field : object_field -> object_field=
      fun { pof_desc; pof_loc; pof_attributes } ->
        let pof_desc = self#object_field_desc pof_desc in
        let pof_loc = self#location pof_loc in
        let pof_attributes = self#attributes pof_attributes in
        { pof_desc; pof_loc; pof_attributes }
    method object_field_desc : object_field_desc -> object_field_desc=
      fun x ->
        match x with
        | Otag (a, b) ->
            let a = self#loc self#label a in
            let b = self#core_type b in Otag (a, b)
        | Oinherit a -> let a = self#core_type a in Oinherit a
    method pattern : pattern -> pattern=
      fun { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes } ->
        let ppat_desc = self#pattern_desc ppat_desc in
        let ppat_loc = self#location ppat_loc in
        let ppat_loc_stack = self#location_stack ppat_loc_stack in
        let ppat_attributes = self#attributes ppat_attributes in
        { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes }
    method pattern_desc : pattern_desc -> pattern_desc=
      fun x ->
        match x with
        | Ppat_any -> Ppat_any
        | Ppat_var a -> let a = self#loc self#string a in Ppat_var a
        | Ppat_alias (a, b) ->
            let a = self#pattern a in
            let b = self#loc self#string b in Ppat_alias (a, b)
        | Ppat_constant a -> let a = self#constant a in Ppat_constant a
        | Ppat_interval (a, b) ->
            let a = self#constant a in
            let b = self#constant b in Ppat_interval (a, b)
        | Ppat_tuple a -> let a = self#list self#pattern a in Ppat_tuple a
        | Ppat_construct (a, b) ->
            let a = self#longident_loc a in
            let b =
              self#option
                (fun (a, b) ->
                   let a = self#list (self#loc self#string) a in
                   let b = self#pattern b in (a, b)) b in
            Ppat_construct (a, b)
        | Ppat_variant (a, b) ->
            let a = self#label a in
            let b = self#option self#pattern b in Ppat_variant (a, b)
        | Ppat_record (a, b) ->
            let a =
              self#list
                (fun (a, b) ->
                   let a = self#longident_loc a in
                   let b = self#pattern b in (a, b)) a in
            let b = self#closed_flag b in Ppat_record (a, b)
        | Ppat_array a -> let a = self#list self#pattern a in Ppat_array a
        | Ppat_or (a, b) ->
            let a = self#pattern a in
            let b = self#pattern b in Ppat_or (a, b)
        | Ppat_constraint (a, b) ->
            let a = self#pattern a in
            let b = self#core_type b in Ppat_constraint (a, b)
        | Ppat_type a -> let a = self#longident_loc a in Ppat_type a
        | Ppat_lazy a -> let a = self#pattern a in Ppat_lazy a
        | Ppat_unpack a ->
            let a = self#loc (self#option self#string) a in Ppat_unpack a
        | Ppat_exception a -> let a = self#pattern a in Ppat_exception a
        | Ppat_extension a -> let a = self#extension a in Ppat_extension a
        | Ppat_open (a, b) ->
            let a = self#longident_loc a in
            let b = self#pattern b in Ppat_open (a, b)
    method expression : expression -> expression=
      fun { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes } ->
        let pexp_desc = self#expression_desc pexp_desc in
        let pexp_loc = self#location pexp_loc in
        let pexp_loc_stack = self#location_stack pexp_loc_stack in
        let pexp_attributes = self#attributes pexp_attributes in
        { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes }
    method expression_desc : expression_desc -> expression_desc=
      fun x ->
        match x with
        | Pexp_ident a -> let a = self#longident_loc a in Pexp_ident a
        | Pexp_constant a -> let a = self#constant a in Pexp_constant a
        | Pexp_let (a, b, c) ->
            let a = self#rec_flag a in
            let b = self#list self#value_binding b in
            let c = self#expression c in Pexp_let (a, b, c)
        | Pexp_function a -> let a = self#cases a in Pexp_function a
        | Pexp_fun (a, b, c, d) ->
            let a = self#arg_label a in
            let b = self#option self#expression b in
            let c = self#pattern c in
            let d = self#expression d in Pexp_fun (a, b, c, d)
        | Pexp_apply (a, b) ->
            let a = self#expression a in
            let b =
              self#list
                (fun (a, b) ->
                   let a = self#arg_label a in
                   let b = self#expression b in (a, b)) b in
            Pexp_apply (a, b)
        | Pexp_match (a, b) ->
            let a = self#expression a in
            let b = self#cases b in Pexp_match (a, b)
        | Pexp_try (a, b) ->
            let a = self#expression a in
            let b = self#cases b in Pexp_try (a, b)
        | Pexp_tuple a -> let a = self#list self#expression a in Pexp_tuple a
        | Pexp_construct (a, b) ->
            let a = self#longident_loc a in
            let b = self#option self#expression b in Pexp_construct (a, b)
        | Pexp_variant (a, b) ->
            let a = self#label a in
            let b = self#option self#expression b in Pexp_variant (a, b)
        | Pexp_record (a, b) ->
            let a =
              self#list
                (fun (a, b) ->
                   let a = self#longident_loc a in
                   let b = self#expression b in (a, b)) a in
            let b = self#option self#expression b in Pexp_record (a, b)
        | Pexp_field (a, b) ->
            let a = self#expression a in
            let b = self#longident_loc b in Pexp_field (a, b)
        | Pexp_setfield (a, b, c) ->
            let a = self#expression a in
            let b = self#longident_loc b in
            let c = self#expression c in Pexp_setfield (a, b, c)
        | Pexp_array a -> let a = self#list self#expression a in Pexp_array a
        | Pexp_ifthenelse (a, b, c) ->
            let a = self#expression a in
            let b = self#expression b in
            let c = self#option self#expression c in
            Pexp_ifthenelse (a, b, c)
        | Pexp_sequence (a, b) ->
            let a = self#expression a in
            let b = self#expression b in Pexp_sequence (a, b)
        | Pexp_while (a, b) ->
            let a = self#expression a in
            let b = self#expression b in Pexp_while (a, b)
        | Pexp_for (a, b, c, d, e) ->
            let a = self#pattern a in
            let b = self#expression b in
            let c = self#expression c in
            let d = self#direction_flag d in
            let e = self#expression e in Pexp_for (a, b, c, d, e)
        | Pexp_constraint (a, b) ->
            let a = self#expression a in
            let b = self#core_type b in Pexp_constraint (a, b)
        | Pexp_coerce (a, b, c) ->
            let a = self#expression a in
            let b = self#option self#core_type b in
            let c = self#core_type c in Pexp_coerce (a, b, c)
        | Pexp_send (a, b) ->
            let a = self#expression a in
            let b = self#loc self#label b in Pexp_send (a, b)
        | Pexp_new a -> let a = self#longident_loc a in Pexp_new a
        | Pexp_setinstvar (a, b) ->
            let a = self#loc self#label a in
            let b = self#expression b in Pexp_setinstvar (a, b)
        | Pexp_override a ->
            let a =
              self#list
                (fun (a, b) ->
                   let a = self#loc self#label a in
                   let b = self#expression b in (a, b)) a in
            Pexp_override a
        | Pexp_letmodule (a, b, c) ->
            let a = self#loc (self#option self#string) a in
            let b = self#module_expr b in
            let c = self#expression c in Pexp_letmodule (a, b, c)
        | Pexp_letexception (a, b) ->
            let a = self#extension_constructor a in
            let b = self#expression b in Pexp_letexception (a, b)
        | Pexp_assert a -> let a = self#expression a in Pexp_assert a
        | Pexp_lazy a -> let a = self#expression a in Pexp_lazy a
        | Pexp_poly (a, b) ->
            let a = self#expression a in
            let b = self#option self#core_type b in Pexp_poly (a, b)
        | Pexp_object a -> let a = self#class_structure a in Pexp_object a
        | Pexp_newtype (a, b) ->
            let a = self#loc self#string a in
            let b = self#expression b in Pexp_newtype (a, b)
        | Pexp_pack a -> let a = self#module_expr a in Pexp_pack a
        | Pexp_open (a, b) ->
            let a = self#open_declaration a in
            let b = self#expression b in Pexp_open (a, b)
        | Pexp_letop a -> let a = self#letop a in Pexp_letop a
        | Pexp_extension a -> let a = self#extension a in Pexp_extension a
        | Pexp_unreachable -> Pexp_unreachable
    method case : case -> case=
      fun { pc_lhs; pc_guard; pc_rhs } ->
        let pc_lhs = self#pattern pc_lhs in
        let pc_guard = self#option self#expression pc_guard in
        let pc_rhs = self#expression pc_rhs in { pc_lhs; pc_guard; pc_rhs }
    method letop : letop -> letop=
      fun { let_; ands; body } ->
        let let_ = self#binding_op let_ in
        let ands = self#list self#binding_op ands in
        let body = self#expression body in { let_; ands; body }
    method binding_op : binding_op -> binding_op=
      fun { pbop_op; pbop_pat; pbop_exp; pbop_loc } ->
        let pbop_op = self#loc self#string pbop_op in
        let pbop_pat = self#pattern pbop_pat in
        let pbop_exp = self#expression pbop_exp in
        let pbop_loc = self#location pbop_loc in
        { pbop_op; pbop_pat; pbop_exp; pbop_loc }
    method value_description : value_description -> value_description=
      fun { pval_name; pval_type; pval_prim; pval_attributes; pval_loc } ->
        let pval_name = self#loc self#string pval_name in
        let pval_type = self#core_type pval_type in
        let pval_prim = self#list self#string pval_prim in
        let pval_attributes = self#attributes pval_attributes in
        let pval_loc = self#location pval_loc in
        { pval_name; pval_type; pval_prim; pval_attributes; pval_loc }
    method type_declaration : type_declaration -> type_declaration=
      fun
        { ptype_name; ptype_params; ptype_cstrs; ptype_kind; ptype_private;
          ptype_manifest; ptype_attributes; ptype_loc }
        ->
        let ptype_name = self#loc self#string ptype_name in
        let ptype_params =
          self#list
            (fun (a, b) ->
               let a = self#core_type a in
               let b =
                 (fun (a, b) ->
                    let a = self#variance a in
                    let b = self#injectivity b in (a, b)) b in
               (a, b)) ptype_params in
        let ptype_cstrs =
          self#list
            (fun (a, b, c) ->
               let a = self#core_type a in
               let b = self#core_type b in
               let c = self#location c in (a, b, c)) ptype_cstrs in
        let ptype_kind = self#type_kind ptype_kind in
        let ptype_private = self#private_flag ptype_private in
        let ptype_manifest = self#option self#core_type ptype_manifest in
        let ptype_attributes = self#attributes ptype_attributes in
        let ptype_loc = self#location ptype_loc in
        {
          ptype_name;
          ptype_params;
          ptype_cstrs;
          ptype_kind;
          ptype_private;
          ptype_manifest;
          ptype_attributes;
          ptype_loc
        }
    method type_kind : type_kind -> type_kind=
      fun x ->
        match x with
        | Ptype_abstract -> Ptype_abstract
        | Ptype_variant a ->
            let a = self#list self#constructor_declaration a in
            Ptype_variant a
        | Ptype_record a ->
            let a = self#list self#label_declaration a in Ptype_record a
        | Ptype_open -> Ptype_open
    method label_declaration : label_declaration -> label_declaration=
      fun { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes } ->
        let pld_name = self#loc self#string pld_name in
        let pld_mutable = self#mutable_flag pld_mutable in
        let pld_type = self#core_type pld_type in
        let pld_loc = self#location pld_loc in
        let pld_attributes = self#attributes pld_attributes in
        { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes }
    method constructor_declaration :
      constructor_declaration -> constructor_declaration=
      fun { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
        ->
        let pcd_name = self#loc self#string pcd_name in
        let pcd_vars = self#list (self#loc self#string) pcd_vars in
        let pcd_args = self#constructor_arguments pcd_args in
        let pcd_res = self#option self#core_type pcd_res in
        let pcd_loc = self#location pcd_loc in
        let pcd_attributes = self#attributes pcd_attributes in
        { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
    method constructor_arguments :
      constructor_arguments -> constructor_arguments=
      fun x ->
        match x with
        | Pcstr_tuple a ->
            let a = self#list self#core_type a in Pcstr_tuple a
        | Pcstr_record a ->
            let a = self#list self#label_declaration a in Pcstr_record a
    method type_extension : type_extension -> type_extension=
      fun
        { ptyext_path; ptyext_params; ptyext_constructors; ptyext_private;
          ptyext_loc; ptyext_attributes }
        ->
        let ptyext_path = self#longident_loc ptyext_path in
        let ptyext_params =
          self#list
            (fun (a, b) ->
               let a = self#core_type a in
               let b =
                 (fun (a, b) ->
                    let a = self#variance a in
                    let b = self#injectivity b in (a, b)) b in
               (a, b)) ptyext_params in
        let ptyext_constructors =
          self#list self#extension_constructor ptyext_constructors in
        let ptyext_private = self#private_flag ptyext_private in
        let ptyext_loc = self#location ptyext_loc in
        let ptyext_attributes = self#attributes ptyext_attributes in
        {
          ptyext_path;
          ptyext_params;
          ptyext_constructors;
          ptyext_private;
          ptyext_loc;
          ptyext_attributes
        }
    method extension_constructor :
      extension_constructor -> extension_constructor=
      fun { pext_name; pext_kind; pext_loc; pext_attributes } ->
        let pext_name = self#loc self#string pext_name in
        let pext_kind = self#extension_constructor_kind pext_kind in
        let pext_loc = self#location pext_loc in
        let pext_attributes = self#attributes pext_attributes in
        { pext_name; pext_kind; pext_loc; pext_attributes }
    method type_exception : type_exception -> type_exception=
      fun { ptyexn_constructor; ptyexn_loc; ptyexn_attributes } ->
        let ptyexn_constructor =
          self#extension_constructor ptyexn_constructor in
        let ptyexn_loc = self#location ptyexn_loc in
        let ptyexn_attributes = self#attributes ptyexn_attributes in
        { ptyexn_constructor; ptyexn_loc; ptyexn_attributes }
    method extension_constructor_kind :
      extension_constructor_kind -> extension_constructor_kind=
      fun x ->
        match x with
        | Pext_decl (a, b, c) ->
            let a = self#list (self#loc self#string) a in
            let b = self#constructor_arguments b in
            let c = self#option self#core_type c in Pext_decl (a, b, c)
        | Pext_rebind a -> let a = self#longident_loc a in Pext_rebind a
    method class_type : class_type -> class_type=
      fun { pcty_desc; pcty_loc; pcty_attributes } ->
        let pcty_desc = self#class_type_desc pcty_desc in
        let pcty_loc = self#location pcty_loc in
        let pcty_attributes = self#attributes pcty_attributes in
        { pcty_desc; pcty_loc; pcty_attributes }
    method class_type_desc : class_type_desc -> class_type_desc=
      fun x ->
        match x with
        | Pcty_constr (a, b) ->
            let a = self#longident_loc a in
            let b = self#list self#core_type b in Pcty_constr (a, b)
        | Pcty_signature a ->
            let a = self#class_signature a in Pcty_signature a
        | Pcty_arrow (a, b, c) ->
            let a = self#arg_label a in
            let b = self#core_type b in
            let c = self#class_type c in Pcty_arrow (a, b, c)
        | Pcty_extension a -> let a = self#extension a in Pcty_extension a
        | Pcty_open (a, b) ->
            let a = self#open_description a in
            let b = self#class_type b in Pcty_open (a, b)
    method class_signature : class_signature -> class_signature=
      fun { pcsig_self; pcsig_fields } ->
        let pcsig_self = self#core_type pcsig_self in
        let pcsig_fields = self#list self#class_type_field pcsig_fields in
        { pcsig_self; pcsig_fields }
    method class_type_field : class_type_field -> class_type_field=
      fun { pctf_desc; pctf_loc; pctf_attributes } ->
        let pctf_desc = self#class_type_field_desc pctf_desc in
        let pctf_loc = self#location pctf_loc in
        let pctf_attributes = self#attributes pctf_attributes in
        { pctf_desc; pctf_loc; pctf_attributes }
    method class_type_field_desc :
      class_type_field_desc -> class_type_field_desc=
      fun x ->
        match x with
        | Pctf_inherit a -> let a = self#class_type a in Pctf_inherit a
        | Pctf_val a ->
            let a =
              (fun (a, b, c, d) ->
                 let a = self#loc self#label a in
                 let b = self#mutable_flag b in
                 let c = self#virtual_flag c in
                 let d = self#core_type d in (a, b, c, d)) a in
            Pctf_val a
        | Pctf_method a ->
            let a =
              (fun (a, b, c, d) ->
                 let a = self#loc self#label a in
                 let b = self#private_flag b in
                 let c = self#virtual_flag c in
                 let d = self#core_type d in (a, b, c, d)) a in
            Pctf_method a
        | Pctf_constraint a ->
            let a =
              (fun (a, b) ->
                 let a = self#core_type a in
                 let b = self#core_type b in (a, b)) a in
            Pctf_constraint a
        | Pctf_attribute a -> let a = self#attribute a in Pctf_attribute a
        | Pctf_extension a -> let a = self#extension a in Pctf_extension a
    method class_infos : 'a . ('a -> 'a) -> 'a class_infos -> 'a class_infos=
      fun _a ->
        fun
          { pci_virt; pci_params; pci_name; pci_expr; pci_loc; pci_attributes
            }
          ->
          let pci_virt = self#virtual_flag pci_virt in
          let pci_params =
            self#list
              (fun (a, b) ->
                 let a = self#core_type a in
                 let b =
                   (fun (a, b) ->
                      let a = self#variance a in
                      let b = self#injectivity b in (a, b)) b in
                 (a, b)) pci_params in
          let pci_name = self#loc self#string pci_name in
          let pci_expr = _a pci_expr in
          let pci_loc = self#location pci_loc in
          let pci_attributes = self#attributes pci_attributes in
          { pci_virt; pci_params; pci_name; pci_expr; pci_loc; pci_attributes
          }
    method class_description : class_description -> class_description=
      self#class_infos self#class_type
    method class_type_declaration :
      class_type_declaration -> class_type_declaration=
      self#class_infos self#class_type
    method class_expr : class_expr -> class_expr=
      fun { pcl_desc; pcl_loc; pcl_attributes } ->
        let pcl_desc = self#class_expr_desc pcl_desc in
        let pcl_loc = self#location pcl_loc in
        let pcl_attributes = self#attributes pcl_attributes in
        { pcl_desc; pcl_loc; pcl_attributes }
    method class_expr_desc : class_expr_desc -> class_expr_desc=
      fun x ->
        match x with
        | Pcl_constr (a, b) ->
            let a = self#longident_loc a in
            let b = self#list self#core_type b in Pcl_constr (a, b)
        | Pcl_structure a ->
            let a = self#class_structure a in Pcl_structure a
        | Pcl_fun (a, b, c, d) ->
            let a = self#arg_label a in
            let b = self#option self#expression b in
            let c = self#pattern c in
            let d = self#class_expr d in Pcl_fun (a, b, c, d)
        | Pcl_apply (a, b) ->
            let a = self#class_expr a in
            let b =
              self#list
                (fun (a, b) ->
                   let a = self#arg_label a in
                   let b = self#expression b in (a, b)) b in
            Pcl_apply (a, b)
        | Pcl_let (a, b, c) ->
            let a = self#rec_flag a in
            let b = self#list self#value_binding b in
            let c = self#class_expr c in Pcl_let (a, b, c)
        | Pcl_constraint (a, b) ->
            let a = self#class_expr a in
            let b = self#class_type b in Pcl_constraint (a, b)
        | Pcl_extension a -> let a = self#extension a in Pcl_extension a
        | Pcl_open (a, b) ->
            let a = self#open_description a in
            let b = self#class_expr b in Pcl_open (a, b)
    method class_structure : class_structure -> class_structure=
      fun { pcstr_self; pcstr_fields } ->
        let pcstr_self = self#pattern pcstr_self in
        let pcstr_fields = self#list self#class_field pcstr_fields in
        { pcstr_self; pcstr_fields }
    method class_field : class_field -> class_field=
      fun { pcf_desc; pcf_loc; pcf_attributes } ->
        let pcf_desc = self#class_field_desc pcf_desc in
        let pcf_loc = self#location pcf_loc in
        let pcf_attributes = self#attributes pcf_attributes in
        { pcf_desc; pcf_loc; pcf_attributes }
    method class_field_desc : class_field_desc -> class_field_desc=
      fun x ->
        match x with
        | Pcf_inherit (a, b, c) ->
            let a = self#override_flag a in
            let b = self#class_expr b in
            let c = self#option (self#loc self#string) c in
            Pcf_inherit (a, b, c)
        | Pcf_val a ->
            let a =
              (fun (a, b, c) ->
                 let a = self#loc self#label a in
                 let b = self#mutable_flag b in
                 let c = self#class_field_kind c in (a, b, c)) a in
            Pcf_val a
        | Pcf_method a ->
            let a =
              (fun (a, b, c) ->
                 let a = self#loc self#label a in
                 let b = self#private_flag b in
                 let c = self#class_field_kind c in (a, b, c)) a in
            Pcf_method a
        | Pcf_constraint a ->
            let a =
              (fun (a, b) ->
                 let a = self#core_type a in
                 let b = self#core_type b in (a, b)) a in
            Pcf_constraint a
        | Pcf_initializer a -> let a = self#expression a in Pcf_initializer a
        | Pcf_attribute a -> let a = self#attribute a in Pcf_attribute a
        | Pcf_extension a -> let a = self#extension a in Pcf_extension a
    method class_field_kind : class_field_kind -> class_field_kind=
      fun x ->
        match x with
        | Cfk_virtual a -> let a = self#core_type a in Cfk_virtual a
        | Cfk_concrete (a, b) ->
            let a = self#override_flag a in
            let b = self#expression b in Cfk_concrete (a, b)
    method class_declaration : class_declaration -> class_declaration=
      self#class_infos self#class_expr
    method module_type : module_type -> module_type=
      fun { pmty_desc; pmty_loc; pmty_attributes } ->
        let pmty_desc = self#module_type_desc pmty_desc in
        let pmty_loc = self#location pmty_loc in
        let pmty_attributes = self#attributes pmty_attributes in
        { pmty_desc; pmty_loc; pmty_attributes }
    method module_type_desc : module_type_desc -> module_type_desc=
      fun x ->
        match x with
        | Pmty_ident a -> let a = self#longident_loc a in Pmty_ident a
        | Pmty_signature a -> let a = self#signature a in Pmty_signature a
        | Pmty_functor (a, b) ->
            let a = self#functor_parameter a in
            let b = self#module_type b in Pmty_functor (a, b)
        | Pmty_with (a, b) ->
            let a = self#module_type a in
            let b = self#list self#with_constraint b in Pmty_with (a, b)
        | Pmty_typeof a -> let a = self#module_expr a in Pmty_typeof a
        | Pmty_extension a -> let a = self#extension a in Pmty_extension a
        | Pmty_alias a -> let a = self#longident_loc a in Pmty_alias a
    method functor_parameter : functor_parameter -> functor_parameter=
      fun x ->
        match x with
        | Unit -> Unit
        | Named (a, b) ->
            let a = self#loc (self#option self#string) a in
            let b = self#module_type b in Named (a, b)
    method signature : signature -> signature= self#list self#signature_item
    method signature_item : signature_item -> signature_item=
      fun { psig_desc; psig_loc } ->
        let psig_desc = self#signature_item_desc psig_desc in
        let psig_loc = self#location psig_loc in { psig_desc; psig_loc }
    method signature_item_desc : signature_item_desc -> signature_item_desc=
      fun x ->
        match x with
        | Psig_value a -> let a = self#value_description a in Psig_value a
        | Psig_type (a, b) ->
            let a = self#rec_flag a in
            let b = self#list self#type_declaration b in Psig_type (a, b)
        | Psig_typesubst a ->
            let a = self#list self#type_declaration a in Psig_typesubst a
        | Psig_typext a -> let a = self#type_extension a in Psig_typext a
        | Psig_exception a ->
            let a = self#type_exception a in Psig_exception a
        | Psig_module a -> let a = self#module_declaration a in Psig_module a
        | Psig_modsubst a ->
            let a = self#module_substitution a in Psig_modsubst a
        | Psig_recmodule a ->
            let a = self#list self#module_declaration a in Psig_recmodule a
        | Psig_modtype a ->
            let a = self#module_type_declaration a in Psig_modtype a
        | Psig_modtypesubst a ->
            let a = self#module_type_declaration a in Psig_modtypesubst a
        | Psig_open a -> let a = self#open_description a in Psig_open a
        | Psig_include a ->
            let a = self#include_description a in Psig_include a
        | Psig_class a ->
            let a = self#list self#class_description a in Psig_class a
        | Psig_class_type a ->
            let a = self#list self#class_type_declaration a in
            Psig_class_type a
        | Psig_attribute a -> let a = self#attribute a in Psig_attribute a
        | Psig_extension (a, b) ->
            let a = self#extension a in
            let b = self#attributes b in Psig_extension (a, b)
    method module_declaration : module_declaration -> module_declaration=
      fun { pmd_name; pmd_type; pmd_attributes; pmd_loc } ->
        let pmd_name = self#loc (self#option self#string) pmd_name in
        let pmd_type = self#module_type pmd_type in
        let pmd_attributes = self#attributes pmd_attributes in
        let pmd_loc = self#location pmd_loc in
        { pmd_name; pmd_type; pmd_attributes; pmd_loc }
    method module_substitution : module_substitution -> module_substitution=
      fun { pms_name; pms_manifest; pms_attributes; pms_loc } ->
        let pms_name = self#loc self#string pms_name in
        let pms_manifest = self#longident_loc pms_manifest in
        let pms_attributes = self#attributes pms_attributes in
        let pms_loc = self#location pms_loc in
        { pms_name; pms_manifest; pms_attributes; pms_loc }
    method module_type_declaration :
      module_type_declaration -> module_type_declaration=
      fun { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc } ->
        let pmtd_name = self#loc self#string pmtd_name in
        let pmtd_type = self#option self#module_type pmtd_type in
        let pmtd_attributes = self#attributes pmtd_attributes in
        let pmtd_loc = self#location pmtd_loc in
        { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc }
    method open_infos : 'a . ('a -> 'a) -> 'a open_infos -> 'a open_infos=
      fun _a ->
        fun { popen_expr; popen_override; popen_loc; popen_attributes } ->
          let popen_expr = _a popen_expr in
          let popen_override = self#override_flag popen_override in
          let popen_loc = self#location popen_loc in
          let popen_attributes = self#attributes popen_attributes in
          { popen_expr; popen_override; popen_loc; popen_attributes }
    method open_description : open_description -> open_description=
      self#open_infos self#longident_loc
    method open_declaration : open_declaration -> open_declaration=
      self#open_infos self#module_expr
    method include_infos :
      'a . ('a -> 'a) -> 'a include_infos -> 'a include_infos=
      fun _a ->
        fun { pincl_mod; pincl_loc; pincl_attributes } ->
          let pincl_mod = _a pincl_mod in
          let pincl_loc = self#location pincl_loc in
          let pincl_attributes = self#attributes pincl_attributes in
          { pincl_mod; pincl_loc; pincl_attributes }
    method include_description : include_description -> include_description=
      self#include_infos self#module_type
    method include_declaration : include_declaration -> include_declaration=
      self#include_infos self#module_expr
    method with_constraint : with_constraint -> with_constraint=
      fun x ->
        match x with
        | Pwith_type (a, b) ->
            let a = self#longident_loc a in
            let b = self#type_declaration b in Pwith_type (a, b)
        | Pwith_module (a, b) ->
            let a = self#longident_loc a in
            let b = self#longident_loc b in Pwith_module (a, b)
        | Pwith_modtype (a, b) ->
            let a = self#longident_loc a in
            let b = self#module_type b in Pwith_modtype (a, b)
        | Pwith_modtypesubst (a, b) ->
            let a = self#longident_loc a in
            let b = self#module_type b in Pwith_modtypesubst (a, b)
        | Pwith_typesubst (a, b) ->
            let a = self#longident_loc a in
            let b = self#type_declaration b in Pwith_typesubst (a, b)
        | Pwith_modsubst (a, b) ->
            let a = self#longident_loc a in
            let b = self#longident_loc b in Pwith_modsubst (a, b)
    method module_expr : module_expr -> module_expr=
      fun { pmod_desc; pmod_loc; pmod_attributes } ->
        let pmod_desc = self#module_expr_desc pmod_desc in
        let pmod_loc = self#location pmod_loc in
        let pmod_attributes = self#attributes pmod_attributes in
        { pmod_desc; pmod_loc; pmod_attributes }
    method module_expr_desc : module_expr_desc -> module_expr_desc=
      fun x ->
        match x with
        | Pmod_ident a -> let a = self#longident_loc a in Pmod_ident a
        | Pmod_structure a -> let a = self#structure a in Pmod_structure a
        | Pmod_functor (a, b) ->
            let a = self#functor_parameter a in
            let b = self#module_expr b in Pmod_functor (a, b)
        | Pmod_apply (a, b) ->
            let a = self#module_expr a in
            let b = self#module_expr b in Pmod_apply (a, b)
        | Pmod_constraint (a, b) ->
            let a = self#module_expr a in
            let b = self#module_type b in Pmod_constraint (a, b)
        | Pmod_unpack a -> let a = self#expression a in Pmod_unpack a
        | Pmod_extension a -> let a = self#extension a in Pmod_extension a
    method structure : structure -> structure= self#list self#structure_item
    method structure_item : structure_item -> structure_item=
      fun { pstr_desc; pstr_loc } ->
        let pstr_desc = self#structure_item_desc pstr_desc in
        let pstr_loc = self#location pstr_loc in { pstr_desc; pstr_loc }
    method structure_item_desc : structure_item_desc -> structure_item_desc=
      fun x ->
        match x with
        | Pstr_eval (a, b) ->
            let a = self#expression a in
            let b = self#attributes b in Pstr_eval (a, b)
        | Pstr_value (a, b) ->
            let a = self#rec_flag a in
            let b = self#list self#value_binding b in Pstr_value (a, b)
        | Pstr_primitive a ->
            let a = self#value_description a in Pstr_primitive a
        | Pstr_type (a, b) ->
            let a = self#rec_flag a in
            let b = self#list self#type_declaration b in Pstr_type (a, b)
        | Pstr_typext a -> let a = self#type_extension a in Pstr_typext a
        | Pstr_exception a ->
            let a = self#type_exception a in Pstr_exception a
        | Pstr_module a -> let a = self#module_binding a in Pstr_module a
        | Pstr_recmodule a ->
            let a = self#list self#module_binding a in Pstr_recmodule a
        | Pstr_modtype a ->
            let a = self#module_type_declaration a in Pstr_modtype a
        | Pstr_open a -> let a = self#open_declaration a in Pstr_open a
        | Pstr_class a ->
            let a = self#list self#class_declaration a in Pstr_class a
        | Pstr_class_type a ->
            let a = self#list self#class_type_declaration a in
            Pstr_class_type a
        | Pstr_include a ->
            let a = self#include_declaration a in Pstr_include a
        | Pstr_attribute a -> let a = self#attribute a in Pstr_attribute a
        | Pstr_extension (a, b) ->
            let a = self#extension a in
            let b = self#attributes b in Pstr_extension (a, b)
    method value_binding : value_binding -> value_binding=
      fun { pvb_pat; pvb_expr; pvb_attributes; pvb_loc } ->
        let pvb_pat = self#pattern pvb_pat in
        let pvb_expr = self#expression pvb_expr in
        let pvb_attributes = self#attributes pvb_attributes in
        let pvb_loc = self#location pvb_loc in
        { pvb_pat; pvb_expr; pvb_attributes; pvb_loc }
    method module_binding : module_binding -> module_binding=
      fun { pmb_name; pmb_expr; pmb_attributes; pmb_loc } ->
        let pmb_name = self#loc (self#option self#string) pmb_name in
        let pmb_expr = self#module_expr pmb_expr in
        let pmb_attributes = self#attributes pmb_attributes in
        let pmb_loc = self#location pmb_loc in
        { pmb_name; pmb_expr; pmb_attributes; pmb_loc }
    method toplevel_phrase : toplevel_phrase -> toplevel_phrase=
      fun x ->
        match x with
        | Ptop_def a -> let a = self#structure a in Ptop_def a
        | Ptop_dir a -> let a = self#toplevel_directive a in Ptop_dir a
    method toplevel_directive : toplevel_directive -> toplevel_directive=
      fun { pdir_name; pdir_arg; pdir_loc } ->
        let pdir_name = self#loc self#string pdir_name in
        let pdir_arg = self#option self#directive_argument pdir_arg in
        let pdir_loc = self#location pdir_loc in
        { pdir_name; pdir_arg; pdir_loc }
    method directive_argument : directive_argument -> directive_argument=
      fun { pdira_desc; pdira_loc } ->
        let pdira_desc = self#directive_argument_desc pdira_desc in
        let pdira_loc = self#location pdira_loc in { pdira_desc; pdira_loc }
    method directive_argument_desc :
      directive_argument_desc -> directive_argument_desc=
      fun x ->
        match x with
        | Pdir_string a -> let a = self#string a in Pdir_string a
        | Pdir_int (a, b) ->
            let a = self#string a in
            let b = self#option self#char b in Pdir_int (a, b)
        | Pdir_ident a -> let a = self#longident a in Pdir_ident a
        | Pdir_bool a -> let a = self#bool a in Pdir_bool a
    method cases : cases -> cases= self#list self#case
  end
class virtual iter =
  object (self)
    method virtual  bool : bool -> unit
    method virtual  char : char -> unit
    method virtual  int : int -> unit
    method virtual  list : 'a . ('a -> unit) -> 'a list -> unit
    method virtual  option : 'a . ('a -> unit) -> 'a option -> unit
    method virtual  string : string -> unit
    method position : position -> unit=
      fun { pos_fname; pos_lnum; pos_bol; pos_cnum } ->
        self#string pos_fname;
        self#int pos_lnum;
        self#int pos_bol;
        self#int pos_cnum
    method location : location -> unit=
      fun { loc_start; loc_end; loc_ghost } ->
        self#position loc_start; self#position loc_end; self#bool loc_ghost
    method location_stack : location_stack -> unit= self#list self#location
    method loc : 'a . ('a -> unit) -> 'a loc -> unit=
      fun _a -> fun { txt; loc } -> _a txt; self#location loc
    method longident : longident -> unit=
      fun x ->
        match x with
        | Lident a -> self#string a
        | Ldot (a, b) -> (self#longident a; self#string b)
        | Lapply (a, b) -> (self#longident a; self#longident b)
    method longident_loc : longident_loc -> unit= self#loc self#longident
    method rec_flag : rec_flag -> unit= fun _ -> ()
    method direction_flag : direction_flag -> unit= fun _ -> ()
    method private_flag : private_flag -> unit= fun _ -> ()
    method mutable_flag : mutable_flag -> unit= fun _ -> ()
    method virtual_flag : virtual_flag -> unit= fun _ -> ()
    method override_flag : override_flag -> unit= fun _ -> ()
    method closed_flag : closed_flag -> unit= fun _ -> ()
    method label : label -> unit= self#string
    method arg_label : arg_label -> unit=
      fun x ->
        match x with
        | Nolabel -> ()
        | Labelled a -> self#string a
        | Optional a -> self#string a
    method variance : variance -> unit= fun _ -> ()
    method injectivity : injectivity -> unit= fun _ -> ()
    method constant : constant -> unit=
      fun x ->
        match x with
        | Pconst_integer (a, b) -> (self#string a; self#option self#char b)
        | Pconst_char a -> self#char a
        | Pconst_string (a, b, c) ->
            (self#string a; self#location b; self#option self#string c)
        | Pconst_float (a, b) -> (self#string a; self#option self#char b)
    method attribute : attribute -> unit=
      fun { attr_name; attr_payload; attr_loc } ->
        self#loc self#string attr_name;
        self#payload attr_payload;
        self#location attr_loc
    method extension : extension -> unit=
      fun (a, b) -> self#loc self#string a; self#payload b
    method attributes : attributes -> unit= self#list self#attribute
    method payload : payload -> unit=
      fun x ->
        match x with
        | PStr a -> self#structure a
        | PSig a -> self#signature a
        | PTyp a -> self#core_type a
        | PPat (a, b) -> (self#pattern a; self#option self#expression b)
    method core_type : core_type -> unit=
      fun { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes } ->
        self#core_type_desc ptyp_desc;
        self#location ptyp_loc;
        self#location_stack ptyp_loc_stack;
        self#attributes ptyp_attributes
    method core_type_desc : core_type_desc -> unit=
      fun x ->
        match x with
        | Ptyp_any -> ()
        | Ptyp_var a -> self#string a
        | Ptyp_arrow (a, b, c) ->
            (self#arg_label a; self#core_type b; self#core_type c)
        | Ptyp_tuple a -> self#list self#core_type a
        | Ptyp_constr (a, b) ->
            (self#longident_loc a; self#list self#core_type b)
        | Ptyp_object (a, b) ->
            (self#list self#object_field a; self#closed_flag b)
        | Ptyp_class (a, b) ->
            (self#longident_loc a; self#list self#core_type b)
        | Ptyp_alias (a, b) -> (self#core_type a; self#string b)
        | Ptyp_variant (a, b, c) ->
            (self#list self#row_field a;
             self#closed_flag b;
             self#option (self#list self#label) c)
        | Ptyp_poly (a, b) ->
            (self#list (self#loc self#string) a; self#core_type b)
        | Ptyp_package a -> self#package_type a
        | Ptyp_extension a -> self#extension a
    method package_type : package_type -> unit=
      fun (a, b) ->
        self#longident_loc a;
        self#list (fun (a, b) -> self#longident_loc a; self#core_type b) b
    method row_field : row_field -> unit=
      fun { prf_desc; prf_loc; prf_attributes } ->
        self#row_field_desc prf_desc;
        self#location prf_loc;
        self#attributes prf_attributes
    method row_field_desc : row_field_desc -> unit=
      fun x ->
        match x with
        | Rtag (a, b, c) ->
            (self#loc self#label a; self#bool b; self#list self#core_type c)
        | Rinherit a -> self#core_type a
    method object_field : object_field -> unit=
      fun { pof_desc; pof_loc; pof_attributes } ->
        self#object_field_desc pof_desc;
        self#location pof_loc;
        self#attributes pof_attributes
    method object_field_desc : object_field_desc -> unit=
      fun x ->
        match x with
        | Otag (a, b) -> (self#loc self#label a; self#core_type b)
        | Oinherit a -> self#core_type a
    method pattern : pattern -> unit=
      fun { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes } ->
        self#pattern_desc ppat_desc;
        self#location ppat_loc;
        self#location_stack ppat_loc_stack;
        self#attributes ppat_attributes
    method pattern_desc : pattern_desc -> unit=
      fun x ->
        match x with
        | Ppat_any -> ()
        | Ppat_var a -> self#loc self#string a
        | Ppat_alias (a, b) -> (self#pattern a; self#loc self#string b)
        | Ppat_constant a -> self#constant a
        | Ppat_interval (a, b) -> (self#constant a; self#constant b)
        | Ppat_tuple a -> self#list self#pattern a
        | Ppat_construct (a, b) ->
            (self#longident_loc a;
             self#option
               (fun (a, b) ->
                  self#list (self#loc self#string) a; self#pattern b) b)
        | Ppat_variant (a, b) -> (self#label a; self#option self#pattern b)
        | Ppat_record (a, b) ->
            (self#list (fun (a, b) -> self#longident_loc a; self#pattern b) a;
             self#closed_flag b)
        | Ppat_array a -> self#list self#pattern a
        | Ppat_or (a, b) -> (self#pattern a; self#pattern b)
        | Ppat_constraint (a, b) -> (self#pattern a; self#core_type b)
        | Ppat_type a -> self#longident_loc a
        | Ppat_lazy a -> self#pattern a
        | Ppat_unpack a -> self#loc (self#option self#string) a
        | Ppat_exception a -> self#pattern a
        | Ppat_extension a -> self#extension a
        | Ppat_open (a, b) -> (self#longident_loc a; self#pattern b)
    method expression : expression -> unit=
      fun { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes } ->
        self#expression_desc pexp_desc;
        self#location pexp_loc;
        self#location_stack pexp_loc_stack;
        self#attributes pexp_attributes
    method expression_desc : expression_desc -> unit=
      fun x ->
        match x with
        | Pexp_ident a -> self#longident_loc a
        | Pexp_constant a -> self#constant a
        | Pexp_let (a, b, c) ->
            (self#rec_flag a;
             self#list self#value_binding b;
             self#expression c)
        | Pexp_function a -> self#cases a
        | Pexp_fun (a, b, c, d) ->
            (self#arg_label a;
             self#option self#expression b;
             self#pattern c;
             self#expression d)
        | Pexp_apply (a, b) ->
            (self#expression a;
             self#list (fun (a, b) -> self#arg_label a; self#expression b) b)
        | Pexp_match (a, b) -> (self#expression a; self#cases b)
        | Pexp_try (a, b) -> (self#expression a; self#cases b)
        | Pexp_tuple a -> self#list self#expression a
        | Pexp_construct (a, b) ->
            (self#longident_loc a; self#option self#expression b)
        | Pexp_variant (a, b) ->
            (self#label a; self#option self#expression b)
        | Pexp_record (a, b) ->
            (self#list
               (fun (a, b) -> self#longident_loc a; self#expression b) a;
             self#option self#expression b)
        | Pexp_field (a, b) -> (self#expression a; self#longident_loc b)
        | Pexp_setfield (a, b, c) ->
            (self#expression a; self#longident_loc b; self#expression c)
        | Pexp_array a -> self#list self#expression a
        | Pexp_ifthenelse (a, b, c) ->
            (self#expression a;
             self#expression b;
             self#option self#expression c)
        | Pexp_sequence (a, b) -> (self#expression a; self#expression b)
        | Pexp_while (a, b) -> (self#expression a; self#expression b)
        | Pexp_for (a, b, c, d, e) ->
            (self#pattern a;
             self#expression b;
             self#expression c;
             self#direction_flag d;
             self#expression e)
        | Pexp_constraint (a, b) -> (self#expression a; self#core_type b)
        | Pexp_coerce (a, b, c) ->
            (self#expression a;
             self#option self#core_type b;
             self#core_type c)
        | Pexp_send (a, b) -> (self#expression a; self#loc self#label b)
        | Pexp_new a -> self#longident_loc a
        | Pexp_setinstvar (a, b) ->
            (self#loc self#label a; self#expression b)
        | Pexp_override a ->
            self#list
              (fun (a, b) -> self#loc self#label a; self#expression b) a
        | Pexp_letmodule (a, b, c) ->
            (self#loc (self#option self#string) a;
             self#module_expr b;
             self#expression c)
        | Pexp_letexception (a, b) ->
            (self#extension_constructor a; self#expression b)
        | Pexp_assert a -> self#expression a
        | Pexp_lazy a -> self#expression a
        | Pexp_poly (a, b) ->
            (self#expression a; self#option self#core_type b)
        | Pexp_object a -> self#class_structure a
        | Pexp_newtype (a, b) -> (self#loc self#string a; self#expression b)
        | Pexp_pack a -> self#module_expr a
        | Pexp_open (a, b) -> (self#open_declaration a; self#expression b)
        | Pexp_letop a -> self#letop a
        | Pexp_extension a -> self#extension a
        | Pexp_unreachable -> ()
    method case : case -> unit=
      fun { pc_lhs; pc_guard; pc_rhs } ->
        self#pattern pc_lhs;
        self#option self#expression pc_guard;
        self#expression pc_rhs
    method letop : letop -> unit=
      fun { let_; ands; body } ->
        self#binding_op let_;
        self#list self#binding_op ands;
        self#expression body
    method binding_op : binding_op -> unit=
      fun { pbop_op; pbop_pat; pbop_exp; pbop_loc } ->
        self#loc self#string pbop_op;
        self#pattern pbop_pat;
        self#expression pbop_exp;
        self#location pbop_loc
    method value_description : value_description -> unit=
      fun { pval_name; pval_type; pval_prim; pval_attributes; pval_loc } ->
        self#loc self#string pval_name;
        self#core_type pval_type;
        self#list self#string pval_prim;
        self#attributes pval_attributes;
        self#location pval_loc
    method type_declaration : type_declaration -> unit=
      fun
        { ptype_name; ptype_params; ptype_cstrs; ptype_kind; ptype_private;
          ptype_manifest; ptype_attributes; ptype_loc }
        ->
        self#loc self#string ptype_name;
        self#list
          (fun (a, b) ->
             self#core_type a;
             ((fun (a, b) -> self#variance a; self#injectivity b)) b)
          ptype_params;
        self#list
          (fun (a, b, c) ->
             self#core_type a; self#core_type b; self#location c) ptype_cstrs;
        self#type_kind ptype_kind;
        self#private_flag ptype_private;
        self#option self#core_type ptype_manifest;
        self#attributes ptype_attributes;
        self#location ptype_loc
    method type_kind : type_kind -> unit=
      fun x ->
        match x with
        | Ptype_abstract -> ()
        | Ptype_variant a -> self#list self#constructor_declaration a
        | Ptype_record a -> self#list self#label_declaration a
        | Ptype_open -> ()
    method label_declaration : label_declaration -> unit=
      fun { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes } ->
        self#loc self#string pld_name;
        self#mutable_flag pld_mutable;
        self#core_type pld_type;
        self#location pld_loc;
        self#attributes pld_attributes
    method constructor_declaration : constructor_declaration -> unit=
      fun { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
        ->
        self#loc self#string pcd_name;
        self#list (self#loc self#string) pcd_vars;
        self#constructor_arguments pcd_args;
        self#option self#core_type pcd_res;
        self#location pcd_loc;
        self#attributes pcd_attributes
    method constructor_arguments : constructor_arguments -> unit=
      fun x ->
        match x with
        | Pcstr_tuple a -> self#list self#core_type a
        | Pcstr_record a -> self#list self#label_declaration a
    method type_extension : type_extension -> unit=
      fun
        { ptyext_path; ptyext_params; ptyext_constructors; ptyext_private;
          ptyext_loc; ptyext_attributes }
        ->
        self#longident_loc ptyext_path;
        self#list
          (fun (a, b) ->
             self#core_type a;
             ((fun (a, b) -> self#variance a; self#injectivity b)) b)
          ptyext_params;
        self#list self#extension_constructor ptyext_constructors;
        self#private_flag ptyext_private;
        self#location ptyext_loc;
        self#attributes ptyext_attributes
    method extension_constructor : extension_constructor -> unit=
      fun { pext_name; pext_kind; pext_loc; pext_attributes } ->
        self#loc self#string pext_name;
        self#extension_constructor_kind pext_kind;
        self#location pext_loc;
        self#attributes pext_attributes
    method type_exception : type_exception -> unit=
      fun { ptyexn_constructor; ptyexn_loc; ptyexn_attributes } ->
        self#extension_constructor ptyexn_constructor;
        self#location ptyexn_loc;
        self#attributes ptyexn_attributes
    method extension_constructor_kind : extension_constructor_kind -> unit=
      fun x ->
        match x with
        | Pext_decl (a, b, c) ->
            (self#list (self#loc self#string) a;
             self#constructor_arguments b;
             self#option self#core_type c)
        | Pext_rebind a -> self#longident_loc a
    method class_type : class_type -> unit=
      fun { pcty_desc; pcty_loc; pcty_attributes } ->
        self#class_type_desc pcty_desc;
        self#location pcty_loc;
        self#attributes pcty_attributes
    method class_type_desc : class_type_desc -> unit=
      fun x ->
        match x with
        | Pcty_constr (a, b) ->
            (self#longident_loc a; self#list self#core_type b)
        | Pcty_signature a -> self#class_signature a
        | Pcty_arrow (a, b, c) ->
            (self#arg_label a; self#core_type b; self#class_type c)
        | Pcty_extension a -> self#extension a
        | Pcty_open (a, b) -> (self#open_description a; self#class_type b)
    method class_signature : class_signature -> unit=
      fun { pcsig_self; pcsig_fields } ->
        self#core_type pcsig_self;
        self#list self#class_type_field pcsig_fields
    method class_type_field : class_type_field -> unit=
      fun { pctf_desc; pctf_loc; pctf_attributes } ->
        self#class_type_field_desc pctf_desc;
        self#location pctf_loc;
        self#attributes pctf_attributes
    method class_type_field_desc : class_type_field_desc -> unit=
      fun x ->
        match x with
        | Pctf_inherit a -> self#class_type a
        | Pctf_val a ->
            ((fun (a, b, c, d) ->
                self#loc self#label a;
                self#mutable_flag b;
                self#virtual_flag c;
                self#core_type d)) a
        | Pctf_method a ->
            ((fun (a, b, c, d) ->
                self#loc self#label a;
                self#private_flag b;
                self#virtual_flag c;
                self#core_type d)) a
        | Pctf_constraint a ->
            ((fun (a, b) -> self#core_type a; self#core_type b)) a
        | Pctf_attribute a -> self#attribute a
        | Pctf_extension a -> self#extension a
    method class_infos : 'a . ('a -> unit) -> 'a class_infos -> unit=
      fun _a ->
        fun
          { pci_virt; pci_params; pci_name; pci_expr; pci_loc; pci_attributes
            }
          ->
          self#virtual_flag pci_virt;
          self#list
            (fun (a, b) ->
               self#core_type a;
               ((fun (a, b) -> self#variance a; self#injectivity b)) b)
            pci_params;
          self#loc self#string pci_name;
          _a pci_expr;
          self#location pci_loc;
          self#attributes pci_attributes
    method class_description : class_description -> unit=
      self#class_infos self#class_type
    method class_type_declaration : class_type_declaration -> unit=
      self#class_infos self#class_type
    method class_expr : class_expr -> unit=
      fun { pcl_desc; pcl_loc; pcl_attributes } ->
        self#class_expr_desc pcl_desc;
        self#location pcl_loc;
        self#attributes pcl_attributes
    method class_expr_desc : class_expr_desc -> unit=
      fun x ->
        match x with
        | Pcl_constr (a, b) ->
            (self#longident_loc a; self#list self#core_type b)
        | Pcl_structure a -> self#class_structure a
        | Pcl_fun (a, b, c, d) ->
            (self#arg_label a;
             self#option self#expression b;
             self#pattern c;
             self#class_expr d)
        | Pcl_apply (a, b) ->
            (self#class_expr a;
             self#list (fun (a, b) -> self#arg_label a; self#expression b) b)
        | Pcl_let (a, b, c) ->
            (self#rec_flag a;
             self#list self#value_binding b;
             self#class_expr c)
        | Pcl_constraint (a, b) -> (self#class_expr a; self#class_type b)
        | Pcl_extension a -> self#extension a
        | Pcl_open (a, b) -> (self#open_description a; self#class_expr b)
    method class_structure : class_structure -> unit=
      fun { pcstr_self; pcstr_fields } ->
        self#pattern pcstr_self; self#list self#class_field pcstr_fields
    method class_field : class_field -> unit=
      fun { pcf_desc; pcf_loc; pcf_attributes } ->
        self#class_field_desc pcf_desc;
        self#location pcf_loc;
        self#attributes pcf_attributes
    method class_field_desc : class_field_desc -> unit=
      fun x ->
        match x with
        | Pcf_inherit (a, b, c) ->
            (self#override_flag a;
             self#class_expr b;
             self#option (self#loc self#string) c)
        | Pcf_val a ->
            ((fun (a, b, c) ->
                self#loc self#label a;
                self#mutable_flag b;
                self#class_field_kind c)) a
        | Pcf_method a ->
            ((fun (a, b, c) ->
                self#loc self#label a;
                self#private_flag b;
                self#class_field_kind c)) a
        | Pcf_constraint a ->
            ((fun (a, b) -> self#core_type a; self#core_type b)) a
        | Pcf_initializer a -> self#expression a
        | Pcf_attribute a -> self#attribute a
        | Pcf_extension a -> self#extension a
    method class_field_kind : class_field_kind -> unit=
      fun x ->
        match x with
        | Cfk_virtual a -> self#core_type a
        | Cfk_concrete (a, b) -> (self#override_flag a; self#expression b)
    method class_declaration : class_declaration -> unit=
      self#class_infos self#class_expr
    method module_type : module_type -> unit=
      fun { pmty_desc; pmty_loc; pmty_attributes } ->
        self#module_type_desc pmty_desc;
        self#location pmty_loc;
        self#attributes pmty_attributes
    method module_type_desc : module_type_desc -> unit=
      fun x ->
        match x with
        | Pmty_ident a -> self#longident_loc a
        | Pmty_signature a -> self#signature a
        | Pmty_functor (a, b) ->
            (self#functor_parameter a; self#module_type b)
        | Pmty_with (a, b) ->
            (self#module_type a; self#list self#with_constraint b)
        | Pmty_typeof a -> self#module_expr a
        | Pmty_extension a -> self#extension a
        | Pmty_alias a -> self#longident_loc a
    method functor_parameter : functor_parameter -> unit=
      fun x ->
        match x with
        | Unit -> ()
        | Named (a, b) ->
            (self#loc (self#option self#string) a; self#module_type b)
    method signature : signature -> unit= self#list self#signature_item
    method signature_item : signature_item -> unit=
      fun { psig_desc; psig_loc } ->
        self#signature_item_desc psig_desc; self#location psig_loc
    method signature_item_desc : signature_item_desc -> unit=
      fun x ->
        match x with
        | Psig_value a -> self#value_description a
        | Psig_type (a, b) ->
            (self#rec_flag a; self#list self#type_declaration b)
        | Psig_typesubst a -> self#list self#type_declaration a
        | Psig_typext a -> self#type_extension a
        | Psig_exception a -> self#type_exception a
        | Psig_module a -> self#module_declaration a
        | Psig_modsubst a -> self#module_substitution a
        | Psig_recmodule a -> self#list self#module_declaration a
        | Psig_modtype a -> self#module_type_declaration a
        | Psig_modtypesubst a -> self#module_type_declaration a
        | Psig_open a -> self#open_description a
        | Psig_include a -> self#include_description a
        | Psig_class a -> self#list self#class_description a
        | Psig_class_type a -> self#list self#class_type_declaration a
        | Psig_attribute a -> self#attribute a
        | Psig_extension (a, b) -> (self#extension a; self#attributes b)
    method module_declaration : module_declaration -> unit=
      fun { pmd_name; pmd_type; pmd_attributes; pmd_loc } ->
        self#loc (self#option self#string) pmd_name;
        self#module_type pmd_type;
        self#attributes pmd_attributes;
        self#location pmd_loc
    method module_substitution : module_substitution -> unit=
      fun { pms_name; pms_manifest; pms_attributes; pms_loc } ->
        self#loc self#string pms_name;
        self#longident_loc pms_manifest;
        self#attributes pms_attributes;
        self#location pms_loc
    method module_type_declaration : module_type_declaration -> unit=
      fun { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc } ->
        self#loc self#string pmtd_name;
        self#option self#module_type pmtd_type;
        self#attributes pmtd_attributes;
        self#location pmtd_loc
    method open_infos : 'a . ('a -> unit) -> 'a open_infos -> unit=
      fun _a ->
        fun { popen_expr; popen_override; popen_loc; popen_attributes } ->
          _a popen_expr;
          self#override_flag popen_override;
          self#location popen_loc;
          self#attributes popen_attributes
    method open_description : open_description -> unit=
      self#open_infos self#longident_loc
    method open_declaration : open_declaration -> unit=
      self#open_infos self#module_expr
    method include_infos : 'a . ('a -> unit) -> 'a include_infos -> unit=
      fun _a ->
        fun { pincl_mod; pincl_loc; pincl_attributes } ->
          _a pincl_mod;
          self#location pincl_loc;
          self#attributes pincl_attributes
    method include_description : include_description -> unit=
      self#include_infos self#module_type
    method include_declaration : include_declaration -> unit=
      self#include_infos self#module_expr
    method with_constraint : with_constraint -> unit=
      fun x ->
        match x with
        | Pwith_type (a, b) ->
            (self#longident_loc a; self#type_declaration b)
        | Pwith_module (a, b) -> (self#longident_loc a; self#longident_loc b)
        | Pwith_modtype (a, b) -> (self#longident_loc a; self#module_type b)
        | Pwith_modtypesubst (a, b) ->
            (self#longident_loc a; self#module_type b)
        | Pwith_typesubst (a, b) ->
            (self#longident_loc a; self#type_declaration b)
        | Pwith_modsubst (a, b) ->
            (self#longident_loc a; self#longident_loc b)
    method module_expr : module_expr -> unit=
      fun { pmod_desc; pmod_loc; pmod_attributes } ->
        self#module_expr_desc pmod_desc;
        self#location pmod_loc;
        self#attributes pmod_attributes
    method module_expr_desc : module_expr_desc -> unit=
      fun x ->
        match x with
        | Pmod_ident a -> self#longident_loc a
        | Pmod_structure a -> self#structure a
        | Pmod_functor (a, b) ->
            (self#functor_parameter a; self#module_expr b)
        | Pmod_apply (a, b) -> (self#module_expr a; self#module_expr b)
        | Pmod_constraint (a, b) -> (self#module_expr a; self#module_type b)
        | Pmod_unpack a -> self#expression a
        | Pmod_extension a -> self#extension a
    method structure : structure -> unit= self#list self#structure_item
    method structure_item : structure_item -> unit=
      fun { pstr_desc; pstr_loc } ->
        self#structure_item_desc pstr_desc; self#location pstr_loc
    method structure_item_desc : structure_item_desc -> unit=
      fun x ->
        match x with
        | Pstr_eval (a, b) -> (self#expression a; self#attributes b)
        | Pstr_value (a, b) ->
            (self#rec_flag a; self#list self#value_binding b)
        | Pstr_primitive a -> self#value_description a
        | Pstr_type (a, b) ->
            (self#rec_flag a; self#list self#type_declaration b)
        | Pstr_typext a -> self#type_extension a
        | Pstr_exception a -> self#type_exception a
        | Pstr_module a -> self#module_binding a
        | Pstr_recmodule a -> self#list self#module_binding a
        | Pstr_modtype a -> self#module_type_declaration a
        | Pstr_open a -> self#open_declaration a
        | Pstr_class a -> self#list self#class_declaration a
        | Pstr_class_type a -> self#list self#class_type_declaration a
        | Pstr_include a -> self#include_declaration a
        | Pstr_attribute a -> self#attribute a
        | Pstr_extension (a, b) -> (self#extension a; self#attributes b)
    method value_binding : value_binding -> unit=
      fun { pvb_pat; pvb_expr; pvb_attributes; pvb_loc } ->
        self#pattern pvb_pat;
        self#expression pvb_expr;
        self#attributes pvb_attributes;
        self#location pvb_loc
    method module_binding : module_binding -> unit=
      fun { pmb_name; pmb_expr; pmb_attributes; pmb_loc } ->
        self#loc (self#option self#string) pmb_name;
        self#module_expr pmb_expr;
        self#attributes pmb_attributes;
        self#location pmb_loc
    method toplevel_phrase : toplevel_phrase -> unit=
      fun x ->
        match x with
        | Ptop_def a -> self#structure a
        | Ptop_dir a -> self#toplevel_directive a
    method toplevel_directive : toplevel_directive -> unit=
      fun { pdir_name; pdir_arg; pdir_loc } ->
        self#loc self#string pdir_name;
        self#option self#directive_argument pdir_arg;
        self#location pdir_loc
    method directive_argument : directive_argument -> unit=
      fun { pdira_desc; pdira_loc } ->
        self#directive_argument_desc pdira_desc; self#location pdira_loc
    method directive_argument_desc : directive_argument_desc -> unit=
      fun x ->
        match x with
        | Pdir_string a -> self#string a
        | Pdir_int (a, b) -> (self#string a; self#option self#char b)
        | Pdir_ident a -> self#longident a
        | Pdir_bool a -> self#bool a
    method cases : cases -> unit= self#list self#case
  end
class virtual ['acc] fold =
  object (self)
    method virtual  bool : bool -> 'acc -> 'acc
    method virtual  char : char -> 'acc -> 'acc
    method virtual  int : int -> 'acc -> 'acc
    method virtual  list :
      'a . ('a -> 'acc -> 'acc) -> 'a list -> 'acc -> 'acc
    method virtual  option :
      'a . ('a -> 'acc -> 'acc) -> 'a option -> 'acc -> 'acc
    method virtual  string : string -> 'acc -> 'acc
    method position : position -> 'acc -> 'acc=
      fun { pos_fname; pos_lnum; pos_bol; pos_cnum } ->
        fun acc ->
          let acc = self#string pos_fname acc in
          let acc = self#int pos_lnum acc in
          let acc = self#int pos_bol acc in
          let acc = self#int pos_cnum acc in acc
    method location : location -> 'acc -> 'acc=
      fun { loc_start; loc_end; loc_ghost } ->
        fun acc ->
          let acc = self#position loc_start acc in
          let acc = self#position loc_end acc in
          let acc = self#bool loc_ghost acc in acc
    method location_stack : location_stack -> 'acc -> 'acc=
      self#list self#location
    method loc : 'a . ('a -> 'acc -> 'acc) -> 'a loc -> 'acc -> 'acc=
      fun _a ->
        fun { txt; loc } ->
          fun acc ->
            let acc = _a txt acc in let acc = self#location loc acc in acc
    method longident : longident -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Lident a -> self#string a acc
          | Ldot (a, b) ->
              let acc = self#longident a acc in
              let acc = self#string b acc in acc
          | Lapply (a, b) ->
              let acc = self#longident a acc in
              let acc = self#longident b acc in acc
    method longident_loc : longident_loc -> 'acc -> 'acc=
      self#loc self#longident
    method rec_flag : rec_flag -> 'acc -> 'acc= fun _ -> fun acc -> acc
    method direction_flag : direction_flag -> 'acc -> 'acc=
      fun _ -> fun acc -> acc
    method private_flag : private_flag -> 'acc -> 'acc=
      fun _ -> fun acc -> acc
    method mutable_flag : mutable_flag -> 'acc -> 'acc=
      fun _ -> fun acc -> acc
    method virtual_flag : virtual_flag -> 'acc -> 'acc=
      fun _ -> fun acc -> acc
    method override_flag : override_flag -> 'acc -> 'acc=
      fun _ -> fun acc -> acc
    method closed_flag : closed_flag -> 'acc -> 'acc= fun _ -> fun acc -> acc
    method label : label -> 'acc -> 'acc= self#string
    method arg_label : arg_label -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Nolabel -> acc
          | Labelled a -> self#string a acc
          | Optional a -> self#string a acc
    method variance : variance -> 'acc -> 'acc= fun _ -> fun acc -> acc
    method injectivity : injectivity -> 'acc -> 'acc= fun _ -> fun acc -> acc
    method constant : constant -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pconst_integer (a, b) ->
              let acc = self#string a acc in
              let acc = self#option self#char b acc in acc
          | Pconst_char a -> self#char a acc
          | Pconst_string (a, b, c) ->
              let acc = self#string a acc in
              let acc = self#location b acc in
              let acc = self#option self#string c acc in acc
          | Pconst_float (a, b) ->
              let acc = self#string a acc in
              let acc = self#option self#char b acc in acc
    method attribute : attribute -> 'acc -> 'acc=
      fun { attr_name; attr_payload; attr_loc } ->
        fun acc ->
          let acc = self#loc self#string attr_name acc in
          let acc = self#payload attr_payload acc in
          let acc = self#location attr_loc acc in acc
    method extension : extension -> 'acc -> 'acc=
      fun (a, b) ->
        fun acc ->
          let acc = self#loc self#string a acc in
          let acc = self#payload b acc in acc
    method attributes : attributes -> 'acc -> 'acc= self#list self#attribute
    method payload : payload -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | PStr a -> self#structure a acc
          | PSig a -> self#signature a acc
          | PTyp a -> self#core_type a acc
          | PPat (a, b) ->
              let acc = self#pattern a acc in
              let acc = self#option self#expression b acc in acc
    method core_type : core_type -> 'acc -> 'acc=
      fun { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes } ->
        fun acc ->
          let acc = self#core_type_desc ptyp_desc acc in
          let acc = self#location ptyp_loc acc in
          let acc = self#location_stack ptyp_loc_stack acc in
          let acc = self#attributes ptyp_attributes acc in acc
    method core_type_desc : core_type_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Ptyp_any -> acc
          | Ptyp_var a -> self#string a acc
          | Ptyp_arrow (a, b, c) ->
              let acc = self#arg_label a acc in
              let acc = self#core_type b acc in
              let acc = self#core_type c acc in acc
          | Ptyp_tuple a -> self#list self#core_type a acc
          | Ptyp_constr (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#list self#core_type b acc in acc
          | Ptyp_object (a, b) ->
              let acc = self#list self#object_field a acc in
              let acc = self#closed_flag b acc in acc
          | Ptyp_class (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#list self#core_type b acc in acc
          | Ptyp_alias (a, b) ->
              let acc = self#core_type a acc in
              let acc = self#string b acc in acc
          | Ptyp_variant (a, b, c) ->
              let acc = self#list self#row_field a acc in
              let acc = self#closed_flag b acc in
              let acc = self#option (self#list self#label) c acc in acc
          | Ptyp_poly (a, b) ->
              let acc = self#list (self#loc self#string) a acc in
              let acc = self#core_type b acc in acc
          | Ptyp_package a -> self#package_type a acc
          | Ptyp_extension a -> self#extension a acc
    method package_type : package_type -> 'acc -> 'acc=
      fun (a, b) ->
        fun acc ->
          let acc = self#longident_loc a acc in
          let acc =
            self#list
              (fun (a, b) ->
                 fun acc ->
                   let acc = self#longident_loc a acc in
                   let acc = self#core_type b acc in acc) b acc in
          acc
    method row_field : row_field -> 'acc -> 'acc=
      fun { prf_desc; prf_loc; prf_attributes } ->
        fun acc ->
          let acc = self#row_field_desc prf_desc acc in
          let acc = self#location prf_loc acc in
          let acc = self#attributes prf_attributes acc in acc
    method row_field_desc : row_field_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Rtag (a, b, c) ->
              let acc = self#loc self#label a acc in
              let acc = self#bool b acc in
              let acc = self#list self#core_type c acc in acc
          | Rinherit a -> self#core_type a acc
    method object_field : object_field -> 'acc -> 'acc=
      fun { pof_desc; pof_loc; pof_attributes } ->
        fun acc ->
          let acc = self#object_field_desc pof_desc acc in
          let acc = self#location pof_loc acc in
          let acc = self#attributes pof_attributes acc in acc
    method object_field_desc : object_field_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Otag (a, b) ->
              let acc = self#loc self#label a acc in
              let acc = self#core_type b acc in acc
          | Oinherit a -> self#core_type a acc
    method pattern : pattern -> 'acc -> 'acc=
      fun { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes } ->
        fun acc ->
          let acc = self#pattern_desc ppat_desc acc in
          let acc = self#location ppat_loc acc in
          let acc = self#location_stack ppat_loc_stack acc in
          let acc = self#attributes ppat_attributes acc in acc
    method pattern_desc : pattern_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Ppat_any -> acc
          | Ppat_var a -> self#loc self#string a acc
          | Ppat_alias (a, b) ->
              let acc = self#pattern a acc in
              let acc = self#loc self#string b acc in acc
          | Ppat_constant a -> self#constant a acc
          | Ppat_interval (a, b) ->
              let acc = self#constant a acc in
              let acc = self#constant b acc in acc
          | Ppat_tuple a -> self#list self#pattern a acc
          | Ppat_construct (a, b) ->
              let acc = self#longident_loc a acc in
              let acc =
                self#option
                  (fun (a, b) ->
                     fun acc ->
                       let acc = self#list (self#loc self#string) a acc in
                       let acc = self#pattern b acc in acc) b acc in
              acc
          | Ppat_variant (a, b) ->
              let acc = self#label a acc in
              let acc = self#option self#pattern b acc in acc
          | Ppat_record (a, b) ->
              let acc =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let acc = self#longident_loc a acc in
                       let acc = self#pattern b acc in acc) a acc in
              let acc = self#closed_flag b acc in acc
          | Ppat_array a -> self#list self#pattern a acc
          | Ppat_or (a, b) ->
              let acc = self#pattern a acc in
              let acc = self#pattern b acc in acc
          | Ppat_constraint (a, b) ->
              let acc = self#pattern a acc in
              let acc = self#core_type b acc in acc
          | Ppat_type a -> self#longident_loc a acc
          | Ppat_lazy a -> self#pattern a acc
          | Ppat_unpack a -> self#loc (self#option self#string) a acc
          | Ppat_exception a -> self#pattern a acc
          | Ppat_extension a -> self#extension a acc
          | Ppat_open (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#pattern b acc in acc
    method expression : expression -> 'acc -> 'acc=
      fun { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes } ->
        fun acc ->
          let acc = self#expression_desc pexp_desc acc in
          let acc = self#location pexp_loc acc in
          let acc = self#location_stack pexp_loc_stack acc in
          let acc = self#attributes pexp_attributes acc in acc
    method expression_desc : expression_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pexp_ident a -> self#longident_loc a acc
          | Pexp_constant a -> self#constant a acc
          | Pexp_let (a, b, c) ->
              let acc = self#rec_flag a acc in
              let acc = self#list self#value_binding b acc in
              let acc = self#expression c acc in acc
          | Pexp_function a -> self#cases a acc
          | Pexp_fun (a, b, c, d) ->
              let acc = self#arg_label a acc in
              let acc = self#option self#expression b acc in
              let acc = self#pattern c acc in
              let acc = self#expression d acc in acc
          | Pexp_apply (a, b) ->
              let acc = self#expression a acc in
              let acc =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let acc = self#arg_label a acc in
                       let acc = self#expression b acc in acc) b acc in
              acc
          | Pexp_match (a, b) ->
              let acc = self#expression a acc in
              let acc = self#cases b acc in acc
          | Pexp_try (a, b) ->
              let acc = self#expression a acc in
              let acc = self#cases b acc in acc
          | Pexp_tuple a -> self#list self#expression a acc
          | Pexp_construct (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#option self#expression b acc in acc
          | Pexp_variant (a, b) ->
              let acc = self#label a acc in
              let acc = self#option self#expression b acc in acc
          | Pexp_record (a, b) ->
              let acc =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let acc = self#longident_loc a acc in
                       let acc = self#expression b acc in acc) a acc in
              let acc = self#option self#expression b acc in acc
          | Pexp_field (a, b) ->
              let acc = self#expression a acc in
              let acc = self#longident_loc b acc in acc
          | Pexp_setfield (a, b, c) ->
              let acc = self#expression a acc in
              let acc = self#longident_loc b acc in
              let acc = self#expression c acc in acc
          | Pexp_array a -> self#list self#expression a acc
          | Pexp_ifthenelse (a, b, c) ->
              let acc = self#expression a acc in
              let acc = self#expression b acc in
              let acc = self#option self#expression c acc in acc
          | Pexp_sequence (a, b) ->
              let acc = self#expression a acc in
              let acc = self#expression b acc in acc
          | Pexp_while (a, b) ->
              let acc = self#expression a acc in
              let acc = self#expression b acc in acc
          | Pexp_for (a, b, c, d, e) ->
              let acc = self#pattern a acc in
              let acc = self#expression b acc in
              let acc = self#expression c acc in
              let acc = self#direction_flag d acc in
              let acc = self#expression e acc in acc
          | Pexp_constraint (a, b) ->
              let acc = self#expression a acc in
              let acc = self#core_type b acc in acc
          | Pexp_coerce (a, b, c) ->
              let acc = self#expression a acc in
              let acc = self#option self#core_type b acc in
              let acc = self#core_type c acc in acc
          | Pexp_send (a, b) ->
              let acc = self#expression a acc in
              let acc = self#loc self#label b acc in acc
          | Pexp_new a -> self#longident_loc a acc
          | Pexp_setinstvar (a, b) ->
              let acc = self#loc self#label a acc in
              let acc = self#expression b acc in acc
          | Pexp_override a ->
              self#list
                (fun (a, b) ->
                   fun acc ->
                     let acc = self#loc self#label a acc in
                     let acc = self#expression b acc in acc) a acc
          | Pexp_letmodule (a, b, c) ->
              let acc = self#loc (self#option self#string) a acc in
              let acc = self#module_expr b acc in
              let acc = self#expression c acc in acc
          | Pexp_letexception (a, b) ->
              let acc = self#extension_constructor a acc in
              let acc = self#expression b acc in acc
          | Pexp_assert a -> self#expression a acc
          | Pexp_lazy a -> self#expression a acc
          | Pexp_poly (a, b) ->
              let acc = self#expression a acc in
              let acc = self#option self#core_type b acc in acc
          | Pexp_object a -> self#class_structure a acc
          | Pexp_newtype (a, b) ->
              let acc = self#loc self#string a acc in
              let acc = self#expression b acc in acc
          | Pexp_pack a -> self#module_expr a acc
          | Pexp_open (a, b) ->
              let acc = self#open_declaration a acc in
              let acc = self#expression b acc in acc
          | Pexp_letop a -> self#letop a acc
          | Pexp_extension a -> self#extension a acc
          | Pexp_unreachable -> acc
    method case : case -> 'acc -> 'acc=
      fun { pc_lhs; pc_guard; pc_rhs } ->
        fun acc ->
          let acc = self#pattern pc_lhs acc in
          let acc = self#option self#expression pc_guard acc in
          let acc = self#expression pc_rhs acc in acc
    method letop : letop -> 'acc -> 'acc=
      fun { let_; ands; body } ->
        fun acc ->
          let acc = self#binding_op let_ acc in
          let acc = self#list self#binding_op ands acc in
          let acc = self#expression body acc in acc
    method binding_op : binding_op -> 'acc -> 'acc=
      fun { pbop_op; pbop_pat; pbop_exp; pbop_loc } ->
        fun acc ->
          let acc = self#loc self#string pbop_op acc in
          let acc = self#pattern pbop_pat acc in
          let acc = self#expression pbop_exp acc in
          let acc = self#location pbop_loc acc in acc
    method value_description : value_description -> 'acc -> 'acc=
      fun { pval_name; pval_type; pval_prim; pval_attributes; pval_loc } ->
        fun acc ->
          let acc = self#loc self#string pval_name acc in
          let acc = self#core_type pval_type acc in
          let acc = self#list self#string pval_prim acc in
          let acc = self#attributes pval_attributes acc in
          let acc = self#location pval_loc acc in acc
    method type_declaration : type_declaration -> 'acc -> 'acc=
      fun
        { ptype_name; ptype_params; ptype_cstrs; ptype_kind; ptype_private;
          ptype_manifest; ptype_attributes; ptype_loc }
        ->
        fun acc ->
          let acc = self#loc self#string ptype_name acc in
          let acc =
            self#list
              (fun (a, b) ->
                 fun acc ->
                   let acc = self#core_type a acc in
                   let acc =
                     (fun (a, b) ->
                        fun acc ->
                          let acc = self#variance a acc in
                          let acc = self#injectivity b acc in acc) b acc in
                   acc) ptype_params acc in
          let acc =
            self#list
              (fun (a, b, c) ->
                 fun acc ->
                   let acc = self#core_type a acc in
                   let acc = self#core_type b acc in
                   let acc = self#location c acc in acc) ptype_cstrs acc in
          let acc = self#type_kind ptype_kind acc in
          let acc = self#private_flag ptype_private acc in
          let acc = self#option self#core_type ptype_manifest acc in
          let acc = self#attributes ptype_attributes acc in
          let acc = self#location ptype_loc acc in acc
    method type_kind : type_kind -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Ptype_abstract -> acc
          | Ptype_variant a -> self#list self#constructor_declaration a acc
          | Ptype_record a -> self#list self#label_declaration a acc
          | Ptype_open -> acc
    method label_declaration : label_declaration -> 'acc -> 'acc=
      fun { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes } ->
        fun acc ->
          let acc = self#loc self#string pld_name acc in
          let acc = self#mutable_flag pld_mutable acc in
          let acc = self#core_type pld_type acc in
          let acc = self#location pld_loc acc in
          let acc = self#attributes pld_attributes acc in acc
    method constructor_declaration : constructor_declaration -> 'acc -> 'acc=
      fun { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
        ->
        fun acc ->
          let acc = self#loc self#string pcd_name acc in
          let acc = self#list (self#loc self#string) pcd_vars acc in
          let acc = self#constructor_arguments pcd_args acc in
          let acc = self#option self#core_type pcd_res acc in
          let acc = self#location pcd_loc acc in
          let acc = self#attributes pcd_attributes acc in acc
    method constructor_arguments : constructor_arguments -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pcstr_tuple a -> self#list self#core_type a acc
          | Pcstr_record a -> self#list self#label_declaration a acc
    method type_extension : type_extension -> 'acc -> 'acc=
      fun
        { ptyext_path; ptyext_params; ptyext_constructors; ptyext_private;
          ptyext_loc; ptyext_attributes }
        ->
        fun acc ->
          let acc = self#longident_loc ptyext_path acc in
          let acc =
            self#list
              (fun (a, b) ->
                 fun acc ->
                   let acc = self#core_type a acc in
                   let acc =
                     (fun (a, b) ->
                        fun acc ->
                          let acc = self#variance a acc in
                          let acc = self#injectivity b acc in acc) b acc in
                   acc) ptyext_params acc in
          let acc =
            self#list self#extension_constructor ptyext_constructors acc in
          let acc = self#private_flag ptyext_private acc in
          let acc = self#location ptyext_loc acc in
          let acc = self#attributes ptyext_attributes acc in acc
    method extension_constructor : extension_constructor -> 'acc -> 'acc=
      fun { pext_name; pext_kind; pext_loc; pext_attributes } ->
        fun acc ->
          let acc = self#loc self#string pext_name acc in
          let acc = self#extension_constructor_kind pext_kind acc in
          let acc = self#location pext_loc acc in
          let acc = self#attributes pext_attributes acc in acc
    method type_exception : type_exception -> 'acc -> 'acc=
      fun { ptyexn_constructor; ptyexn_loc; ptyexn_attributes } ->
        fun acc ->
          let acc = self#extension_constructor ptyexn_constructor acc in
          let acc = self#location ptyexn_loc acc in
          let acc = self#attributes ptyexn_attributes acc in acc
    method extension_constructor_kind :
      extension_constructor_kind -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pext_decl (a, b, c) ->
              let acc = self#list (self#loc self#string) a acc in
              let acc = self#constructor_arguments b acc in
              let acc = self#option self#core_type c acc in acc
          | Pext_rebind a -> self#longident_loc a acc
    method class_type : class_type -> 'acc -> 'acc=
      fun { pcty_desc; pcty_loc; pcty_attributes } ->
        fun acc ->
          let acc = self#class_type_desc pcty_desc acc in
          let acc = self#location pcty_loc acc in
          let acc = self#attributes pcty_attributes acc in acc
    method class_type_desc : class_type_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pcty_constr (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#list self#core_type b acc in acc
          | Pcty_signature a -> self#class_signature a acc
          | Pcty_arrow (a, b, c) ->
              let acc = self#arg_label a acc in
              let acc = self#core_type b acc in
              let acc = self#class_type c acc in acc
          | Pcty_extension a -> self#extension a acc
          | Pcty_open (a, b) ->
              let acc = self#open_description a acc in
              let acc = self#class_type b acc in acc
    method class_signature : class_signature -> 'acc -> 'acc=
      fun { pcsig_self; pcsig_fields } ->
        fun acc ->
          let acc = self#core_type pcsig_self acc in
          let acc = self#list self#class_type_field pcsig_fields acc in acc
    method class_type_field : class_type_field -> 'acc -> 'acc=
      fun { pctf_desc; pctf_loc; pctf_attributes } ->
        fun acc ->
          let acc = self#class_type_field_desc pctf_desc acc in
          let acc = self#location pctf_loc acc in
          let acc = self#attributes pctf_attributes acc in acc
    method class_type_field_desc : class_type_field_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pctf_inherit a -> self#class_type a acc
          | Pctf_val a ->
              ((fun (a, b, c, d) ->
                  fun acc ->
                    let acc = self#loc self#label a acc in
                    let acc = self#mutable_flag b acc in
                    let acc = self#virtual_flag c acc in
                    let acc = self#core_type d acc in acc)) a acc
          | Pctf_method a ->
              ((fun (a, b, c, d) ->
                  fun acc ->
                    let acc = self#loc self#label a acc in
                    let acc = self#private_flag b acc in
                    let acc = self#virtual_flag c acc in
                    let acc = self#core_type d acc in acc)) a acc
          | Pctf_constraint a ->
              ((fun (a, b) ->
                  fun acc ->
                    let acc = self#core_type a acc in
                    let acc = self#core_type b acc in acc)) a acc
          | Pctf_attribute a -> self#attribute a acc
          | Pctf_extension a -> self#extension a acc
    method class_infos :
      'a . ('a -> 'acc -> 'acc) -> 'a class_infos -> 'acc -> 'acc=
      fun _a ->
        fun
          { pci_virt; pci_params; pci_name; pci_expr; pci_loc; pci_attributes
            }
          ->
          fun acc ->
            let acc = self#virtual_flag pci_virt acc in
            let acc =
              self#list
                (fun (a, b) ->
                   fun acc ->
                     let acc = self#core_type a acc in
                     let acc =
                       (fun (a, b) ->
                          fun acc ->
                            let acc = self#variance a acc in
                            let acc = self#injectivity b acc in acc) b acc in
                     acc) pci_params acc in
            let acc = self#loc self#string pci_name acc in
            let acc = _a pci_expr acc in
            let acc = self#location pci_loc acc in
            let acc = self#attributes pci_attributes acc in acc
    method class_description : class_description -> 'acc -> 'acc=
      self#class_infos self#class_type
    method class_type_declaration : class_type_declaration -> 'acc -> 'acc=
      self#class_infos self#class_type
    method class_expr : class_expr -> 'acc -> 'acc=
      fun { pcl_desc; pcl_loc; pcl_attributes } ->
        fun acc ->
          let acc = self#class_expr_desc pcl_desc acc in
          let acc = self#location pcl_loc acc in
          let acc = self#attributes pcl_attributes acc in acc
    method class_expr_desc : class_expr_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pcl_constr (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#list self#core_type b acc in acc
          | Pcl_structure a -> self#class_structure a acc
          | Pcl_fun (a, b, c, d) ->
              let acc = self#arg_label a acc in
              let acc = self#option self#expression b acc in
              let acc = self#pattern c acc in
              let acc = self#class_expr d acc in acc
          | Pcl_apply (a, b) ->
              let acc = self#class_expr a acc in
              let acc =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let acc = self#arg_label a acc in
                       let acc = self#expression b acc in acc) b acc in
              acc
          | Pcl_let (a, b, c) ->
              let acc = self#rec_flag a acc in
              let acc = self#list self#value_binding b acc in
              let acc = self#class_expr c acc in acc
          | Pcl_constraint (a, b) ->
              let acc = self#class_expr a acc in
              let acc = self#class_type b acc in acc
          | Pcl_extension a -> self#extension a acc
          | Pcl_open (a, b) ->
              let acc = self#open_description a acc in
              let acc = self#class_expr b acc in acc
    method class_structure : class_structure -> 'acc -> 'acc=
      fun { pcstr_self; pcstr_fields } ->
        fun acc ->
          let acc = self#pattern pcstr_self acc in
          let acc = self#list self#class_field pcstr_fields acc in acc
    method class_field : class_field -> 'acc -> 'acc=
      fun { pcf_desc; pcf_loc; pcf_attributes } ->
        fun acc ->
          let acc = self#class_field_desc pcf_desc acc in
          let acc = self#location pcf_loc acc in
          let acc = self#attributes pcf_attributes acc in acc
    method class_field_desc : class_field_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pcf_inherit (a, b, c) ->
              let acc = self#override_flag a acc in
              let acc = self#class_expr b acc in
              let acc = self#option (self#loc self#string) c acc in acc
          | Pcf_val a ->
              ((fun (a, b, c) ->
                  fun acc ->
                    let acc = self#loc self#label a acc in
                    let acc = self#mutable_flag b acc in
                    let acc = self#class_field_kind c acc in acc)) a acc
          | Pcf_method a ->
              ((fun (a, b, c) ->
                  fun acc ->
                    let acc = self#loc self#label a acc in
                    let acc = self#private_flag b acc in
                    let acc = self#class_field_kind c acc in acc)) a acc
          | Pcf_constraint a ->
              ((fun (a, b) ->
                  fun acc ->
                    let acc = self#core_type a acc in
                    let acc = self#core_type b acc in acc)) a acc
          | Pcf_initializer a -> self#expression a acc
          | Pcf_attribute a -> self#attribute a acc
          | Pcf_extension a -> self#extension a acc
    method class_field_kind : class_field_kind -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Cfk_virtual a -> self#core_type a acc
          | Cfk_concrete (a, b) ->
              let acc = self#override_flag a acc in
              let acc = self#expression b acc in acc
    method class_declaration : class_declaration -> 'acc -> 'acc=
      self#class_infos self#class_expr
    method module_type : module_type -> 'acc -> 'acc=
      fun { pmty_desc; pmty_loc; pmty_attributes } ->
        fun acc ->
          let acc = self#module_type_desc pmty_desc acc in
          let acc = self#location pmty_loc acc in
          let acc = self#attributes pmty_attributes acc in acc
    method module_type_desc : module_type_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pmty_ident a -> self#longident_loc a acc
          | Pmty_signature a -> self#signature a acc
          | Pmty_functor (a, b) ->
              let acc = self#functor_parameter a acc in
              let acc = self#module_type b acc in acc
          | Pmty_with (a, b) ->
              let acc = self#module_type a acc in
              let acc = self#list self#with_constraint b acc in acc
          | Pmty_typeof a -> self#module_expr a acc
          | Pmty_extension a -> self#extension a acc
          | Pmty_alias a -> self#longident_loc a acc
    method functor_parameter : functor_parameter -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Unit -> acc
          | Named (a, b) ->
              let acc = self#loc (self#option self#string) a acc in
              let acc = self#module_type b acc in acc
    method signature : signature -> 'acc -> 'acc=
      self#list self#signature_item
    method signature_item : signature_item -> 'acc -> 'acc=
      fun { psig_desc; psig_loc } ->
        fun acc ->
          let acc = self#signature_item_desc psig_desc acc in
          let acc = self#location psig_loc acc in acc
    method signature_item_desc : signature_item_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Psig_value a -> self#value_description a acc
          | Psig_type (a, b) ->
              let acc = self#rec_flag a acc in
              let acc = self#list self#type_declaration b acc in acc
          | Psig_typesubst a -> self#list self#type_declaration a acc
          | Psig_typext a -> self#type_extension a acc
          | Psig_exception a -> self#type_exception a acc
          | Psig_module a -> self#module_declaration a acc
          | Psig_modsubst a -> self#module_substitution a acc
          | Psig_recmodule a -> self#list self#module_declaration a acc
          | Psig_modtype a -> self#module_type_declaration a acc
          | Psig_modtypesubst a -> self#module_type_declaration a acc
          | Psig_open a -> self#open_description a acc
          | Psig_include a -> self#include_description a acc
          | Psig_class a -> self#list self#class_description a acc
          | Psig_class_type a -> self#list self#class_type_declaration a acc
          | Psig_attribute a -> self#attribute a acc
          | Psig_extension (a, b) ->
              let acc = self#extension a acc in
              let acc = self#attributes b acc in acc
    method module_declaration : module_declaration -> 'acc -> 'acc=
      fun { pmd_name; pmd_type; pmd_attributes; pmd_loc } ->
        fun acc ->
          let acc = self#loc (self#option self#string) pmd_name acc in
          let acc = self#module_type pmd_type acc in
          let acc = self#attributes pmd_attributes acc in
          let acc = self#location pmd_loc acc in acc
    method module_substitution : module_substitution -> 'acc -> 'acc=
      fun { pms_name; pms_manifest; pms_attributes; pms_loc } ->
        fun acc ->
          let acc = self#loc self#string pms_name acc in
          let acc = self#longident_loc pms_manifest acc in
          let acc = self#attributes pms_attributes acc in
          let acc = self#location pms_loc acc in acc
    method module_type_declaration : module_type_declaration -> 'acc -> 'acc=
      fun { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc } ->
        fun acc ->
          let acc = self#loc self#string pmtd_name acc in
          let acc = self#option self#module_type pmtd_type acc in
          let acc = self#attributes pmtd_attributes acc in
          let acc = self#location pmtd_loc acc in acc
    method open_infos :
      'a . ('a -> 'acc -> 'acc) -> 'a open_infos -> 'acc -> 'acc=
      fun _a ->
        fun { popen_expr; popen_override; popen_loc; popen_attributes } ->
          fun acc ->
            let acc = _a popen_expr acc in
            let acc = self#override_flag popen_override acc in
            let acc = self#location popen_loc acc in
            let acc = self#attributes popen_attributes acc in acc
    method open_description : open_description -> 'acc -> 'acc=
      self#open_infos self#longident_loc
    method open_declaration : open_declaration -> 'acc -> 'acc=
      self#open_infos self#module_expr
    method include_infos :
      'a . ('a -> 'acc -> 'acc) -> 'a include_infos -> 'acc -> 'acc=
      fun _a ->
        fun { pincl_mod; pincl_loc; pincl_attributes } ->
          fun acc ->
            let acc = _a pincl_mod acc in
            let acc = self#location pincl_loc acc in
            let acc = self#attributes pincl_attributes acc in acc
    method include_description : include_description -> 'acc -> 'acc=
      self#include_infos self#module_type
    method include_declaration : include_declaration -> 'acc -> 'acc=
      self#include_infos self#module_expr
    method with_constraint : with_constraint -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pwith_type (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#type_declaration b acc in acc
          | Pwith_module (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#longident_loc b acc in acc
          | Pwith_modtype (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#module_type b acc in acc
          | Pwith_modtypesubst (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#module_type b acc in acc
          | Pwith_typesubst (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#type_declaration b acc in acc
          | Pwith_modsubst (a, b) ->
              let acc = self#longident_loc a acc in
              let acc = self#longident_loc b acc in acc
    method module_expr : module_expr -> 'acc -> 'acc=
      fun { pmod_desc; pmod_loc; pmod_attributes } ->
        fun acc ->
          let acc = self#module_expr_desc pmod_desc acc in
          let acc = self#location pmod_loc acc in
          let acc = self#attributes pmod_attributes acc in acc
    method module_expr_desc : module_expr_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pmod_ident a -> self#longident_loc a acc
          | Pmod_structure a -> self#structure a acc
          | Pmod_functor (a, b) ->
              let acc = self#functor_parameter a acc in
              let acc = self#module_expr b acc in acc
          | Pmod_apply (a, b) ->
              let acc = self#module_expr a acc in
              let acc = self#module_expr b acc in acc
          | Pmod_constraint (a, b) ->
              let acc = self#module_expr a acc in
              let acc = self#module_type b acc in acc
          | Pmod_unpack a -> self#expression a acc
          | Pmod_extension a -> self#extension a acc
    method structure : structure -> 'acc -> 'acc=
      self#list self#structure_item
    method structure_item : structure_item -> 'acc -> 'acc=
      fun { pstr_desc; pstr_loc } ->
        fun acc ->
          let acc = self#structure_item_desc pstr_desc acc in
          let acc = self#location pstr_loc acc in acc
    method structure_item_desc : structure_item_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pstr_eval (a, b) ->
              let acc = self#expression a acc in
              let acc = self#attributes b acc in acc
          | Pstr_value (a, b) ->
              let acc = self#rec_flag a acc in
              let acc = self#list self#value_binding b acc in acc
          | Pstr_primitive a -> self#value_description a acc
          | Pstr_type (a, b) ->
              let acc = self#rec_flag a acc in
              let acc = self#list self#type_declaration b acc in acc
          | Pstr_typext a -> self#type_extension a acc
          | Pstr_exception a -> self#type_exception a acc
          | Pstr_module a -> self#module_binding a acc
          | Pstr_recmodule a -> self#list self#module_binding a acc
          | Pstr_modtype a -> self#module_type_declaration a acc
          | Pstr_open a -> self#open_declaration a acc
          | Pstr_class a -> self#list self#class_declaration a acc
          | Pstr_class_type a -> self#list self#class_type_declaration a acc
          | Pstr_include a -> self#include_declaration a acc
          | Pstr_attribute a -> self#attribute a acc
          | Pstr_extension (a, b) ->
              let acc = self#extension a acc in
              let acc = self#attributes b acc in acc
    method value_binding : value_binding -> 'acc -> 'acc=
      fun { pvb_pat; pvb_expr; pvb_attributes; pvb_loc } ->
        fun acc ->
          let acc = self#pattern pvb_pat acc in
          let acc = self#expression pvb_expr acc in
          let acc = self#attributes pvb_attributes acc in
          let acc = self#location pvb_loc acc in acc
    method module_binding : module_binding -> 'acc -> 'acc=
      fun { pmb_name; pmb_expr; pmb_attributes; pmb_loc } ->
        fun acc ->
          let acc = self#loc (self#option self#string) pmb_name acc in
          let acc = self#module_expr pmb_expr acc in
          let acc = self#attributes pmb_attributes acc in
          let acc = self#location pmb_loc acc in acc
    method toplevel_phrase : toplevel_phrase -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Ptop_def a -> self#structure a acc
          | Ptop_dir a -> self#toplevel_directive a acc
    method toplevel_directive : toplevel_directive -> 'acc -> 'acc=
      fun { pdir_name; pdir_arg; pdir_loc } ->
        fun acc ->
          let acc = self#loc self#string pdir_name acc in
          let acc = self#option self#directive_argument pdir_arg acc in
          let acc = self#location pdir_loc acc in acc
    method directive_argument : directive_argument -> 'acc -> 'acc=
      fun { pdira_desc; pdira_loc } ->
        fun acc ->
          let acc = self#directive_argument_desc pdira_desc acc in
          let acc = self#location pdira_loc acc in acc
    method directive_argument_desc : directive_argument_desc -> 'acc -> 'acc=
      fun x ->
        fun acc ->
          match x with
          | Pdir_string a -> self#string a acc
          | Pdir_int (a, b) ->
              let acc = self#string a acc in
              let acc = self#option self#char b acc in acc
          | Pdir_ident a -> self#longident a acc
          | Pdir_bool a -> self#bool a acc
    method cases : cases -> 'acc -> 'acc= self#list self#case
  end
class virtual ['acc] fold_map =
  object (self)
    method virtual  bool : bool -> 'acc -> (bool * 'acc)
    method virtual  char : char -> 'acc -> (char * 'acc)
    method virtual  int : int -> 'acc -> (int * 'acc)
    method virtual  list :
      'a . ('a -> 'acc -> ('a * 'acc)) -> 'a list -> 'acc -> ('a list * 'acc)
    method virtual  option :
      'a .
        ('a -> 'acc -> ('a * 'acc)) ->
          'a option -> 'acc -> ('a option * 'acc)
    method virtual  string : string -> 'acc -> (string * 'acc)
    method position : position -> 'acc -> (position * 'acc)=
      fun { pos_fname; pos_lnum; pos_bol; pos_cnum } ->
        fun acc ->
          let (pos_fname, acc) = self#string pos_fname acc in
          let (pos_lnum, acc) = self#int pos_lnum acc in
          let (pos_bol, acc) = self#int pos_bol acc in
          let (pos_cnum, acc) = self#int pos_cnum acc in
          ({ pos_fname; pos_lnum; pos_bol; pos_cnum }, acc)
    method location : location -> 'acc -> (location * 'acc)=
      fun { loc_start; loc_end; loc_ghost } ->
        fun acc ->
          let (loc_start, acc) = self#position loc_start acc in
          let (loc_end, acc) = self#position loc_end acc in
          let (loc_ghost, acc) = self#bool loc_ghost acc in
          ({ loc_start; loc_end; loc_ghost }, acc)
    method location_stack :
      location_stack -> 'acc -> (location_stack * 'acc)=
      self#list self#location
    method loc :
      'a . ('a -> 'acc -> ('a * 'acc)) -> 'a loc -> 'acc -> ('a loc * 'acc)=
      fun _a ->
        fun { txt; loc } ->
          fun acc ->
            let (txt, acc) = _a txt acc in
            let (loc, acc) = self#location loc acc in ({ txt; loc }, acc)
    method longident : longident -> 'acc -> (longident * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Lident a -> let (a, acc) = self#string a acc in ((Lident a), acc)
          | Ldot (a, b) ->
              let (a, acc) = self#longident a acc in
              let (b, acc) = self#string b acc in ((Ldot (a, b)), acc)
          | Lapply (a, b) ->
              let (a, acc) = self#longident a acc in
              let (b, acc) = self#longident b acc in ((Lapply (a, b)), acc)
    method longident_loc : longident_loc -> 'acc -> (longident_loc * 'acc)=
      self#loc self#longident
    method rec_flag : rec_flag -> 'acc -> (rec_flag * 'acc)=
      fun x -> fun acc -> (x, acc)
    method direction_flag :
      direction_flag -> 'acc -> (direction_flag * 'acc)=
      fun x -> fun acc -> (x, acc)
    method private_flag : private_flag -> 'acc -> (private_flag * 'acc)=
      fun x -> fun acc -> (x, acc)
    method mutable_flag : mutable_flag -> 'acc -> (mutable_flag * 'acc)=
      fun x -> fun acc -> (x, acc)
    method virtual_flag : virtual_flag -> 'acc -> (virtual_flag * 'acc)=
      fun x -> fun acc -> (x, acc)
    method override_flag : override_flag -> 'acc -> (override_flag * 'acc)=
      fun x -> fun acc -> (x, acc)
    method closed_flag : closed_flag -> 'acc -> (closed_flag * 'acc)=
      fun x -> fun acc -> (x, acc)
    method label : label -> 'acc -> (label * 'acc)= self#string
    method arg_label : arg_label -> 'acc -> (arg_label * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Nolabel -> (Nolabel, acc)
          | Labelled a ->
              let (a, acc) = self#string a acc in ((Labelled a), acc)
          | Optional a ->
              let (a, acc) = self#string a acc in ((Optional a), acc)
    method variance : variance -> 'acc -> (variance * 'acc)=
      fun x -> fun acc -> (x, acc)
    method injectivity : injectivity -> 'acc -> (injectivity * 'acc)=
      fun x -> fun acc -> (x, acc)
    method constant : constant -> 'acc -> (constant * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pconst_integer (a, b) ->
              let (a, acc) = self#string a acc in
              let (b, acc) = self#option self#char b acc in
              ((Pconst_integer (a, b)), acc)
          | Pconst_char a ->
              let (a, acc) = self#char a acc in ((Pconst_char a), acc)
          | Pconst_string (a, b, c) ->
              let (a, acc) = self#string a acc in
              let (b, acc) = self#location b acc in
              let (c, acc) = self#option self#string c acc in
              ((Pconst_string (a, b, c)), acc)
          | Pconst_float (a, b) ->
              let (a, acc) = self#string a acc in
              let (b, acc) = self#option self#char b acc in
              ((Pconst_float (a, b)), acc)
    method attribute : attribute -> 'acc -> (attribute * 'acc)=
      fun { attr_name; attr_payload; attr_loc } ->
        fun acc ->
          let (attr_name, acc) = self#loc self#string attr_name acc in
          let (attr_payload, acc) = self#payload attr_payload acc in
          let (attr_loc, acc) = self#location attr_loc acc in
          ({ attr_name; attr_payload; attr_loc }, acc)
    method extension : extension -> 'acc -> (extension * 'acc)=
      fun (a, b) ->
        fun acc ->
          let (a, acc) = self#loc self#string a acc in
          let (b, acc) = self#payload b acc in ((a, b), acc)
    method attributes : attributes -> 'acc -> (attributes * 'acc)=
      self#list self#attribute
    method payload : payload -> 'acc -> (payload * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | PStr a -> let (a, acc) = self#structure a acc in ((PStr a), acc)
          | PSig a -> let (a, acc) = self#signature a acc in ((PSig a), acc)
          | PTyp a -> let (a, acc) = self#core_type a acc in ((PTyp a), acc)
          | PPat (a, b) ->
              let (a, acc) = self#pattern a acc in
              let (b, acc) = self#option self#expression b acc in
              ((PPat (a, b)), acc)
    method core_type : core_type -> 'acc -> (core_type * 'acc)=
      fun { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes } ->
        fun acc ->
          let (ptyp_desc, acc) = self#core_type_desc ptyp_desc acc in
          let (ptyp_loc, acc) = self#location ptyp_loc acc in
          let (ptyp_loc_stack, acc) = self#location_stack ptyp_loc_stack acc in
          let (ptyp_attributes, acc) = self#attributes ptyp_attributes acc in
          ({ ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes }, acc)
    method core_type_desc :
      core_type_desc -> 'acc -> (core_type_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Ptyp_any -> (Ptyp_any, acc)
          | Ptyp_var a ->
              let (a, acc) = self#string a acc in ((Ptyp_var a), acc)
          | Ptyp_arrow (a, b, c) ->
              let (a, acc) = self#arg_label a acc in
              let (b, acc) = self#core_type b acc in
              let (c, acc) = self#core_type c acc in
              ((Ptyp_arrow (a, b, c)), acc)
          | Ptyp_tuple a ->
              let (a, acc) = self#list self#core_type a acc in
              ((Ptyp_tuple a), acc)
          | Ptyp_constr (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#list self#core_type b acc in
              ((Ptyp_constr (a, b)), acc)
          | Ptyp_object (a, b) ->
              let (a, acc) = self#list self#object_field a acc in
              let (b, acc) = self#closed_flag b acc in
              ((Ptyp_object (a, b)), acc)
          | Ptyp_class (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#list self#core_type b acc in
              ((Ptyp_class (a, b)), acc)
          | Ptyp_alias (a, b) ->
              let (a, acc) = self#core_type a acc in
              let (b, acc) = self#string b acc in ((Ptyp_alias (a, b)), acc)
          | Ptyp_variant (a, b, c) ->
              let (a, acc) = self#list self#row_field a acc in
              let (b, acc) = self#closed_flag b acc in
              let (c, acc) = self#option (self#list self#label) c acc in
              ((Ptyp_variant (a, b, c)), acc)
          | Ptyp_poly (a, b) ->
              let (a, acc) = self#list (self#loc self#string) a acc in
              let (b, acc) = self#core_type b acc in
              ((Ptyp_poly (a, b)), acc)
          | Ptyp_package a ->
              let (a, acc) = self#package_type a acc in
              ((Ptyp_package a), acc)
          | Ptyp_extension a ->
              let (a, acc) = self#extension a acc in
              ((Ptyp_extension a), acc)
    method package_type : package_type -> 'acc -> (package_type * 'acc)=
      fun (a, b) ->
        fun acc ->
          let (a, acc) = self#longident_loc a acc in
          let (b, acc) =
            self#list
              (fun (a, b) ->
                 fun acc ->
                   let (a, acc) = self#longident_loc a acc in
                   let (b, acc) = self#core_type b acc in ((a, b), acc)) b
              acc in
          ((a, b), acc)
    method row_field : row_field -> 'acc -> (row_field * 'acc)=
      fun { prf_desc; prf_loc; prf_attributes } ->
        fun acc ->
          let (prf_desc, acc) = self#row_field_desc prf_desc acc in
          let (prf_loc, acc) = self#location prf_loc acc in
          let (prf_attributes, acc) = self#attributes prf_attributes acc in
          ({ prf_desc; prf_loc; prf_attributes }, acc)
    method row_field_desc :
      row_field_desc -> 'acc -> (row_field_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Rtag (a, b, c) ->
              let (a, acc) = self#loc self#label a acc in
              let (b, acc) = self#bool b acc in
              let (c, acc) = self#list self#core_type c acc in
              ((Rtag (a, b, c)), acc)
          | Rinherit a ->
              let (a, acc) = self#core_type a acc in ((Rinherit a), acc)
    method object_field : object_field -> 'acc -> (object_field * 'acc)=
      fun { pof_desc; pof_loc; pof_attributes } ->
        fun acc ->
          let (pof_desc, acc) = self#object_field_desc pof_desc acc in
          let (pof_loc, acc) = self#location pof_loc acc in
          let (pof_attributes, acc) = self#attributes pof_attributes acc in
          ({ pof_desc; pof_loc; pof_attributes }, acc)
    method object_field_desc :
      object_field_desc -> 'acc -> (object_field_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Otag (a, b) ->
              let (a, acc) = self#loc self#label a acc in
              let (b, acc) = self#core_type b acc in ((Otag (a, b)), acc)
          | Oinherit a ->
              let (a, acc) = self#core_type a acc in ((Oinherit a), acc)
    method pattern : pattern -> 'acc -> (pattern * 'acc)=
      fun { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes } ->
        fun acc ->
          let (ppat_desc, acc) = self#pattern_desc ppat_desc acc in
          let (ppat_loc, acc) = self#location ppat_loc acc in
          let (ppat_loc_stack, acc) = self#location_stack ppat_loc_stack acc in
          let (ppat_attributes, acc) = self#attributes ppat_attributes acc in
          ({ ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes }, acc)
    method pattern_desc : pattern_desc -> 'acc -> (pattern_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Ppat_any -> (Ppat_any, acc)
          | Ppat_var a ->
              let (a, acc) = self#loc self#string a acc in
              ((Ppat_var a), acc)
          | Ppat_alias (a, b) ->
              let (a, acc) = self#pattern a acc in
              let (b, acc) = self#loc self#string b acc in
              ((Ppat_alias (a, b)), acc)
          | Ppat_constant a ->
              let (a, acc) = self#constant a acc in ((Ppat_constant a), acc)
          | Ppat_interval (a, b) ->
              let (a, acc) = self#constant a acc in
              let (b, acc) = self#constant b acc in
              ((Ppat_interval (a, b)), acc)
          | Ppat_tuple a ->
              let (a, acc) = self#list self#pattern a acc in
              ((Ppat_tuple a), acc)
          | Ppat_construct (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) =
                self#option
                  (fun (a, b) ->
                     fun acc ->
                       let (a, acc) = self#list (self#loc self#string) a acc in
                       let (b, acc) = self#pattern b acc in ((a, b), acc)) b
                  acc in
              ((Ppat_construct (a, b)), acc)
          | Ppat_variant (a, b) ->
              let (a, acc) = self#label a acc in
              let (b, acc) = self#option self#pattern b acc in
              ((Ppat_variant (a, b)), acc)
          | Ppat_record (a, b) ->
              let (a, acc) =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let (a, acc) = self#longident_loc a acc in
                       let (b, acc) = self#pattern b acc in ((a, b), acc)) a
                  acc in
              let (b, acc) = self#closed_flag b acc in
              ((Ppat_record (a, b)), acc)
          | Ppat_array a ->
              let (a, acc) = self#list self#pattern a acc in
              ((Ppat_array a), acc)
          | Ppat_or (a, b) ->
              let (a, acc) = self#pattern a acc in
              let (b, acc) = self#pattern b acc in ((Ppat_or (a, b)), acc)
          | Ppat_constraint (a, b) ->
              let (a, acc) = self#pattern a acc in
              let (b, acc) = self#core_type b acc in
              ((Ppat_constraint (a, b)), acc)
          | Ppat_type a ->
              let (a, acc) = self#longident_loc a acc in ((Ppat_type a), acc)
          | Ppat_lazy a ->
              let (a, acc) = self#pattern a acc in ((Ppat_lazy a), acc)
          | Ppat_unpack a ->
              let (a, acc) = self#loc (self#option self#string) a acc in
              ((Ppat_unpack a), acc)
          | Ppat_exception a ->
              let (a, acc) = self#pattern a acc in ((Ppat_exception a), acc)
          | Ppat_extension a ->
              let (a, acc) = self#extension a acc in
              ((Ppat_extension a), acc)
          | Ppat_open (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#pattern b acc in ((Ppat_open (a, b)), acc)
    method expression : expression -> 'acc -> (expression * 'acc)=
      fun { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes } ->
        fun acc ->
          let (pexp_desc, acc) = self#expression_desc pexp_desc acc in
          let (pexp_loc, acc) = self#location pexp_loc acc in
          let (pexp_loc_stack, acc) = self#location_stack pexp_loc_stack acc in
          let (pexp_attributes, acc) = self#attributes pexp_attributes acc in
          ({ pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes }, acc)
    method expression_desc :
      expression_desc -> 'acc -> (expression_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pexp_ident a ->
              let (a, acc) = self#longident_loc a acc in
              ((Pexp_ident a), acc)
          | Pexp_constant a ->
              let (a, acc) = self#constant a acc in ((Pexp_constant a), acc)
          | Pexp_let (a, b, c) ->
              let (a, acc) = self#rec_flag a acc in
              let (b, acc) = self#list self#value_binding b acc in
              let (c, acc) = self#expression c acc in
              ((Pexp_let (a, b, c)), acc)
          | Pexp_function a ->
              let (a, acc) = self#cases a acc in ((Pexp_function a), acc)
          | Pexp_fun (a, b, c, d) ->
              let (a, acc) = self#arg_label a acc in
              let (b, acc) = self#option self#expression b acc in
              let (c, acc) = self#pattern c acc in
              let (d, acc) = self#expression d acc in
              ((Pexp_fun (a, b, c, d)), acc)
          | Pexp_apply (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let (a, acc) = self#arg_label a acc in
                       let (b, acc) = self#expression b acc in ((a, b), acc))
                  b acc in
              ((Pexp_apply (a, b)), acc)
          | Pexp_match (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#cases b acc in ((Pexp_match (a, b)), acc)
          | Pexp_try (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#cases b acc in ((Pexp_try (a, b)), acc)
          | Pexp_tuple a ->
              let (a, acc) = self#list self#expression a acc in
              ((Pexp_tuple a), acc)
          | Pexp_construct (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#option self#expression b acc in
              ((Pexp_construct (a, b)), acc)
          | Pexp_variant (a, b) ->
              let (a, acc) = self#label a acc in
              let (b, acc) = self#option self#expression b acc in
              ((Pexp_variant (a, b)), acc)
          | Pexp_record (a, b) ->
              let (a, acc) =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let (a, acc) = self#longident_loc a acc in
                       let (b, acc) = self#expression b acc in ((a, b), acc))
                  a acc in
              let (b, acc) = self#option self#expression b acc in
              ((Pexp_record (a, b)), acc)
          | Pexp_field (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#longident_loc b acc in
              ((Pexp_field (a, b)), acc)
          | Pexp_setfield (a, b, c) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#longident_loc b acc in
              let (c, acc) = self#expression c acc in
              ((Pexp_setfield (a, b, c)), acc)
          | Pexp_array a ->
              let (a, acc) = self#list self#expression a acc in
              ((Pexp_array a), acc)
          | Pexp_ifthenelse (a, b, c) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#expression b acc in
              let (c, acc) = self#option self#expression c acc in
              ((Pexp_ifthenelse (a, b, c)), acc)
          | Pexp_sequence (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#expression b acc in
              ((Pexp_sequence (a, b)), acc)
          | Pexp_while (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#expression b acc in
              ((Pexp_while (a, b)), acc)
          | Pexp_for (a, b, c, d, e) ->
              let (a, acc) = self#pattern a acc in
              let (b, acc) = self#expression b acc in
              let (c, acc) = self#expression c acc in
              let (d, acc) = self#direction_flag d acc in
              let (e, acc) = self#expression e acc in
              ((Pexp_for (a, b, c, d, e)), acc)
          | Pexp_constraint (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#core_type b acc in
              ((Pexp_constraint (a, b)), acc)
          | Pexp_coerce (a, b, c) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#option self#core_type b acc in
              let (c, acc) = self#core_type c acc in
              ((Pexp_coerce (a, b, c)), acc)
          | Pexp_send (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#loc self#label b acc in
              ((Pexp_send (a, b)), acc)
          | Pexp_new a ->
              let (a, acc) = self#longident_loc a acc in ((Pexp_new a), acc)
          | Pexp_setinstvar (a, b) ->
              let (a, acc) = self#loc self#label a acc in
              let (b, acc) = self#expression b acc in
              ((Pexp_setinstvar (a, b)), acc)
          | Pexp_override a ->
              let (a, acc) =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let (a, acc) = self#loc self#label a acc in
                       let (b, acc) = self#expression b acc in ((a, b), acc))
                  a acc in
              ((Pexp_override a), acc)
          | Pexp_letmodule (a, b, c) ->
              let (a, acc) = self#loc (self#option self#string) a acc in
              let (b, acc) = self#module_expr b acc in
              let (c, acc) = self#expression c acc in
              ((Pexp_letmodule (a, b, c)), acc)
          | Pexp_letexception (a, b) ->
              let (a, acc) = self#extension_constructor a acc in
              let (b, acc) = self#expression b acc in
              ((Pexp_letexception (a, b)), acc)
          | Pexp_assert a ->
              let (a, acc) = self#expression a acc in ((Pexp_assert a), acc)
          | Pexp_lazy a ->
              let (a, acc) = self#expression a acc in ((Pexp_lazy a), acc)
          | Pexp_poly (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#option self#core_type b acc in
              ((Pexp_poly (a, b)), acc)
          | Pexp_object a ->
              let (a, acc) = self#class_structure a acc in
              ((Pexp_object a), acc)
          | Pexp_newtype (a, b) ->
              let (a, acc) = self#loc self#string a acc in
              let (b, acc) = self#expression b acc in
              ((Pexp_newtype (a, b)), acc)
          | Pexp_pack a ->
              let (a, acc) = self#module_expr a acc in ((Pexp_pack a), acc)
          | Pexp_open (a, b) ->
              let (a, acc) = self#open_declaration a acc in
              let (b, acc) = self#expression b acc in
              ((Pexp_open (a, b)), acc)
          | Pexp_letop a ->
              let (a, acc) = self#letop a acc in ((Pexp_letop a), acc)
          | Pexp_extension a ->
              let (a, acc) = self#extension a acc in
              ((Pexp_extension a), acc)
          | Pexp_unreachable -> (Pexp_unreachable, acc)
    method case : case -> 'acc -> (case * 'acc)=
      fun { pc_lhs; pc_guard; pc_rhs } ->
        fun acc ->
          let (pc_lhs, acc) = self#pattern pc_lhs acc in
          let (pc_guard, acc) = self#option self#expression pc_guard acc in
          let (pc_rhs, acc) = self#expression pc_rhs acc in
          ({ pc_lhs; pc_guard; pc_rhs }, acc)
    method letop : letop -> 'acc -> (letop * 'acc)=
      fun { let_; ands; body } ->
        fun acc ->
          let (let_, acc) = self#binding_op let_ acc in
          let (ands, acc) = self#list self#binding_op ands acc in
          let (body, acc) = self#expression body acc in
          ({ let_; ands; body }, acc)
    method binding_op : binding_op -> 'acc -> (binding_op * 'acc)=
      fun { pbop_op; pbop_pat; pbop_exp; pbop_loc } ->
        fun acc ->
          let (pbop_op, acc) = self#loc self#string pbop_op acc in
          let (pbop_pat, acc) = self#pattern pbop_pat acc in
          let (pbop_exp, acc) = self#expression pbop_exp acc in
          let (pbop_loc, acc) = self#location pbop_loc acc in
          ({ pbop_op; pbop_pat; pbop_exp; pbop_loc }, acc)
    method value_description :
      value_description -> 'acc -> (value_description * 'acc)=
      fun { pval_name; pval_type; pval_prim; pval_attributes; pval_loc } ->
        fun acc ->
          let (pval_name, acc) = self#loc self#string pval_name acc in
          let (pval_type, acc) = self#core_type pval_type acc in
          let (pval_prim, acc) = self#list self#string pval_prim acc in
          let (pval_attributes, acc) = self#attributes pval_attributes acc in
          let (pval_loc, acc) = self#location pval_loc acc in
          ({ pval_name; pval_type; pval_prim; pval_attributes; pval_loc },
            acc)
    method type_declaration :
      type_declaration -> 'acc -> (type_declaration * 'acc)=
      fun
        { ptype_name; ptype_params; ptype_cstrs; ptype_kind; ptype_private;
          ptype_manifest; ptype_attributes; ptype_loc }
        ->
        fun acc ->
          let (ptype_name, acc) = self#loc self#string ptype_name acc in
          let (ptype_params, acc) =
            self#list
              (fun (a, b) ->
                 fun acc ->
                   let (a, acc) = self#core_type a acc in
                   let (b, acc) =
                     (fun (a, b) ->
                        fun acc ->
                          let (a, acc) = self#variance a acc in
                          let (b, acc) = self#injectivity b acc in
                          ((a, b), acc)) b acc in
                   ((a, b), acc)) ptype_params acc in
          let (ptype_cstrs, acc) =
            self#list
              (fun (a, b, c) ->
                 fun acc ->
                   let (a, acc) = self#core_type a acc in
                   let (b, acc) = self#core_type b acc in
                   let (c, acc) = self#location c acc in ((a, b, c), acc))
              ptype_cstrs acc in
          let (ptype_kind, acc) = self#type_kind ptype_kind acc in
          let (ptype_private, acc) = self#private_flag ptype_private acc in
          let (ptype_manifest, acc) =
            self#option self#core_type ptype_manifest acc in
          let (ptype_attributes, acc) = self#attributes ptype_attributes acc in
          let (ptype_loc, acc) = self#location ptype_loc acc in
          ({
             ptype_name;
             ptype_params;
             ptype_cstrs;
             ptype_kind;
             ptype_private;
             ptype_manifest;
             ptype_attributes;
             ptype_loc
           }, acc)
    method type_kind : type_kind -> 'acc -> (type_kind * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Ptype_abstract -> (Ptype_abstract, acc)
          | Ptype_variant a ->
              let (a, acc) = self#list self#constructor_declaration a acc in
              ((Ptype_variant a), acc)
          | Ptype_record a ->
              let (a, acc) = self#list self#label_declaration a acc in
              ((Ptype_record a), acc)
          | Ptype_open -> (Ptype_open, acc)
    method label_declaration :
      label_declaration -> 'acc -> (label_declaration * 'acc)=
      fun { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes } ->
        fun acc ->
          let (pld_name, acc) = self#loc self#string pld_name acc in
          let (pld_mutable, acc) = self#mutable_flag pld_mutable acc in
          let (pld_type, acc) = self#core_type pld_type acc in
          let (pld_loc, acc) = self#location pld_loc acc in
          let (pld_attributes, acc) = self#attributes pld_attributes acc in
          ({ pld_name; pld_mutable; pld_type; pld_loc; pld_attributes }, acc)
    method constructor_declaration :
      constructor_declaration -> 'acc -> (constructor_declaration * 'acc)=
      fun { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
        ->
        fun acc ->
          let (pcd_name, acc) = self#loc self#string pcd_name acc in
          let (pcd_vars, acc) = self#list (self#loc self#string) pcd_vars acc in
          let (pcd_args, acc) = self#constructor_arguments pcd_args acc in
          let (pcd_res, acc) = self#option self#core_type pcd_res acc in
          let (pcd_loc, acc) = self#location pcd_loc acc in
          let (pcd_attributes, acc) = self#attributes pcd_attributes acc in
          ({ pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes },
            acc)
    method constructor_arguments :
      constructor_arguments -> 'acc -> (constructor_arguments * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pcstr_tuple a ->
              let (a, acc) = self#list self#core_type a acc in
              ((Pcstr_tuple a), acc)
          | Pcstr_record a ->
              let (a, acc) = self#list self#label_declaration a acc in
              ((Pcstr_record a), acc)
    method type_extension :
      type_extension -> 'acc -> (type_extension * 'acc)=
      fun
        { ptyext_path; ptyext_params; ptyext_constructors; ptyext_private;
          ptyext_loc; ptyext_attributes }
        ->
        fun acc ->
          let (ptyext_path, acc) = self#longident_loc ptyext_path acc in
          let (ptyext_params, acc) =
            self#list
              (fun (a, b) ->
                 fun acc ->
                   let (a, acc) = self#core_type a acc in
                   let (b, acc) =
                     (fun (a, b) ->
                        fun acc ->
                          let (a, acc) = self#variance a acc in
                          let (b, acc) = self#injectivity b acc in
                          ((a, b), acc)) b acc in
                   ((a, b), acc)) ptyext_params acc in
          let (ptyext_constructors, acc) =
            self#list self#extension_constructor ptyext_constructors acc in
          let (ptyext_private, acc) = self#private_flag ptyext_private acc in
          let (ptyext_loc, acc) = self#location ptyext_loc acc in
          let (ptyext_attributes, acc) =
            self#attributes ptyext_attributes acc in
          ({
             ptyext_path;
             ptyext_params;
             ptyext_constructors;
             ptyext_private;
             ptyext_loc;
             ptyext_attributes
           }, acc)
    method extension_constructor :
      extension_constructor -> 'acc -> (extension_constructor * 'acc)=
      fun { pext_name; pext_kind; pext_loc; pext_attributes } ->
        fun acc ->
          let (pext_name, acc) = self#loc self#string pext_name acc in
          let (pext_kind, acc) =
            self#extension_constructor_kind pext_kind acc in
          let (pext_loc, acc) = self#location pext_loc acc in
          let (pext_attributes, acc) = self#attributes pext_attributes acc in
          ({ pext_name; pext_kind; pext_loc; pext_attributes }, acc)
    method type_exception :
      type_exception -> 'acc -> (type_exception * 'acc)=
      fun { ptyexn_constructor; ptyexn_loc; ptyexn_attributes } ->
        fun acc ->
          let (ptyexn_constructor, acc) =
            self#extension_constructor ptyexn_constructor acc in
          let (ptyexn_loc, acc) = self#location ptyexn_loc acc in
          let (ptyexn_attributes, acc) =
            self#attributes ptyexn_attributes acc in
          ({ ptyexn_constructor; ptyexn_loc; ptyexn_attributes }, acc)
    method extension_constructor_kind :
      extension_constructor_kind ->
        'acc -> (extension_constructor_kind * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pext_decl (a, b, c) ->
              let (a, acc) = self#list (self#loc self#string) a acc in
              let (b, acc) = self#constructor_arguments b acc in
              let (c, acc) = self#option self#core_type c acc in
              ((Pext_decl (a, b, c)), acc)
          | Pext_rebind a ->
              let (a, acc) = self#longident_loc a acc in
              ((Pext_rebind a), acc)
    method class_type : class_type -> 'acc -> (class_type * 'acc)=
      fun { pcty_desc; pcty_loc; pcty_attributes } ->
        fun acc ->
          let (pcty_desc, acc) = self#class_type_desc pcty_desc acc in
          let (pcty_loc, acc) = self#location pcty_loc acc in
          let (pcty_attributes, acc) = self#attributes pcty_attributes acc in
          ({ pcty_desc; pcty_loc; pcty_attributes }, acc)
    method class_type_desc :
      class_type_desc -> 'acc -> (class_type_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pcty_constr (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#list self#core_type b acc in
              ((Pcty_constr (a, b)), acc)
          | Pcty_signature a ->
              let (a, acc) = self#class_signature a acc in
              ((Pcty_signature a), acc)
          | Pcty_arrow (a, b, c) ->
              let (a, acc) = self#arg_label a acc in
              let (b, acc) = self#core_type b acc in
              let (c, acc) = self#class_type c acc in
              ((Pcty_arrow (a, b, c)), acc)
          | Pcty_extension a ->
              let (a, acc) = self#extension a acc in
              ((Pcty_extension a), acc)
          | Pcty_open (a, b) ->
              let (a, acc) = self#open_description a acc in
              let (b, acc) = self#class_type b acc in
              ((Pcty_open (a, b)), acc)
    method class_signature :
      class_signature -> 'acc -> (class_signature * 'acc)=
      fun { pcsig_self; pcsig_fields } ->
        fun acc ->
          let (pcsig_self, acc) = self#core_type pcsig_self acc in
          let (pcsig_fields, acc) =
            self#list self#class_type_field pcsig_fields acc in
          ({ pcsig_self; pcsig_fields }, acc)
    method class_type_field :
      class_type_field -> 'acc -> (class_type_field * 'acc)=
      fun { pctf_desc; pctf_loc; pctf_attributes } ->
        fun acc ->
          let (pctf_desc, acc) = self#class_type_field_desc pctf_desc acc in
          let (pctf_loc, acc) = self#location pctf_loc acc in
          let (pctf_attributes, acc) = self#attributes pctf_attributes acc in
          ({ pctf_desc; pctf_loc; pctf_attributes }, acc)
    method class_type_field_desc :
      class_type_field_desc -> 'acc -> (class_type_field_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pctf_inherit a ->
              let (a, acc) = self#class_type a acc in ((Pctf_inherit a), acc)
          | Pctf_val a ->
              let (a, acc) =
                (fun (a, b, c, d) ->
                   fun acc ->
                     let (a, acc) = self#loc self#label a acc in
                     let (b, acc) = self#mutable_flag b acc in
                     let (c, acc) = self#virtual_flag c acc in
                     let (d, acc) = self#core_type d acc in
                     ((a, b, c, d), acc)) a acc in
              ((Pctf_val a), acc)
          | Pctf_method a ->
              let (a, acc) =
                (fun (a, b, c, d) ->
                   fun acc ->
                     let (a, acc) = self#loc self#label a acc in
                     let (b, acc) = self#private_flag b acc in
                     let (c, acc) = self#virtual_flag c acc in
                     let (d, acc) = self#core_type d acc in
                     ((a, b, c, d), acc)) a acc in
              ((Pctf_method a), acc)
          | Pctf_constraint a ->
              let (a, acc) =
                (fun (a, b) ->
                   fun acc ->
                     let (a, acc) = self#core_type a acc in
                     let (b, acc) = self#core_type b acc in ((a, b), acc)) a
                  acc in
              ((Pctf_constraint a), acc)
          | Pctf_attribute a ->
              let (a, acc) = self#attribute a acc in
              ((Pctf_attribute a), acc)
          | Pctf_extension a ->
              let (a, acc) = self#extension a acc in
              ((Pctf_extension a), acc)
    method class_infos :
      'a .
        ('a -> 'acc -> ('a * 'acc)) ->
          'a class_infos -> 'acc -> ('a class_infos * 'acc)=
      fun _a ->
        fun
          { pci_virt; pci_params; pci_name; pci_expr; pci_loc; pci_attributes
            }
          ->
          fun acc ->
            let (pci_virt, acc) = self#virtual_flag pci_virt acc in
            let (pci_params, acc) =
              self#list
                (fun (a, b) ->
                   fun acc ->
                     let (a, acc) = self#core_type a acc in
                     let (b, acc) =
                       (fun (a, b) ->
                          fun acc ->
                            let (a, acc) = self#variance a acc in
                            let (b, acc) = self#injectivity b acc in
                            ((a, b), acc)) b acc in
                     ((a, b), acc)) pci_params acc in
            let (pci_name, acc) = self#loc self#string pci_name acc in
            let (pci_expr, acc) = _a pci_expr acc in
            let (pci_loc, acc) = self#location pci_loc acc in
            let (pci_attributes, acc) = self#attributes pci_attributes acc in
            ({
               pci_virt;
               pci_params;
               pci_name;
               pci_expr;
               pci_loc;
               pci_attributes
             }, acc)
    method class_description :
      class_description -> 'acc -> (class_description * 'acc)=
      self#class_infos self#class_type
    method class_type_declaration :
      class_type_declaration -> 'acc -> (class_type_declaration * 'acc)=
      self#class_infos self#class_type
    method class_expr : class_expr -> 'acc -> (class_expr * 'acc)=
      fun { pcl_desc; pcl_loc; pcl_attributes } ->
        fun acc ->
          let (pcl_desc, acc) = self#class_expr_desc pcl_desc acc in
          let (pcl_loc, acc) = self#location pcl_loc acc in
          let (pcl_attributes, acc) = self#attributes pcl_attributes acc in
          ({ pcl_desc; pcl_loc; pcl_attributes }, acc)
    method class_expr_desc :
      class_expr_desc -> 'acc -> (class_expr_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pcl_constr (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#list self#core_type b acc in
              ((Pcl_constr (a, b)), acc)
          | Pcl_structure a ->
              let (a, acc) = self#class_structure a acc in
              ((Pcl_structure a), acc)
          | Pcl_fun (a, b, c, d) ->
              let (a, acc) = self#arg_label a acc in
              let (b, acc) = self#option self#expression b acc in
              let (c, acc) = self#pattern c acc in
              let (d, acc) = self#class_expr d acc in
              ((Pcl_fun (a, b, c, d)), acc)
          | Pcl_apply (a, b) ->
              let (a, acc) = self#class_expr a acc in
              let (b, acc) =
                self#list
                  (fun (a, b) ->
                     fun acc ->
                       let (a, acc) = self#arg_label a acc in
                       let (b, acc) = self#expression b acc in ((a, b), acc))
                  b acc in
              ((Pcl_apply (a, b)), acc)
          | Pcl_let (a, b, c) ->
              let (a, acc) = self#rec_flag a acc in
              let (b, acc) = self#list self#value_binding b acc in
              let (c, acc) = self#class_expr c acc in
              ((Pcl_let (a, b, c)), acc)
          | Pcl_constraint (a, b) ->
              let (a, acc) = self#class_expr a acc in
              let (b, acc) = self#class_type b acc in
              ((Pcl_constraint (a, b)), acc)
          | Pcl_extension a ->
              let (a, acc) = self#extension a acc in ((Pcl_extension a), acc)
          | Pcl_open (a, b) ->
              let (a, acc) = self#open_description a acc in
              let (b, acc) = self#class_expr b acc in
              ((Pcl_open (a, b)), acc)
    method class_structure :
      class_structure -> 'acc -> (class_structure * 'acc)=
      fun { pcstr_self; pcstr_fields } ->
        fun acc ->
          let (pcstr_self, acc) = self#pattern pcstr_self acc in
          let (pcstr_fields, acc) =
            self#list self#class_field pcstr_fields acc in
          ({ pcstr_self; pcstr_fields }, acc)
    method class_field : class_field -> 'acc -> (class_field * 'acc)=
      fun { pcf_desc; pcf_loc; pcf_attributes } ->
        fun acc ->
          let (pcf_desc, acc) = self#class_field_desc pcf_desc acc in
          let (pcf_loc, acc) = self#location pcf_loc acc in
          let (pcf_attributes, acc) = self#attributes pcf_attributes acc in
          ({ pcf_desc; pcf_loc; pcf_attributes }, acc)
    method class_field_desc :
      class_field_desc -> 'acc -> (class_field_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pcf_inherit (a, b, c) ->
              let (a, acc) = self#override_flag a acc in
              let (b, acc) = self#class_expr b acc in
              let (c, acc) = self#option (self#loc self#string) c acc in
              ((Pcf_inherit (a, b, c)), acc)
          | Pcf_val a ->
              let (a, acc) =
                (fun (a, b, c) ->
                   fun acc ->
                     let (a, acc) = self#loc self#label a acc in
                     let (b, acc) = self#mutable_flag b acc in
                     let (c, acc) = self#class_field_kind c acc in
                     ((a, b, c), acc)) a acc in
              ((Pcf_val a), acc)
          | Pcf_method a ->
              let (a, acc) =
                (fun (a, b, c) ->
                   fun acc ->
                     let (a, acc) = self#loc self#label a acc in
                     let (b, acc) = self#private_flag b acc in
                     let (c, acc) = self#class_field_kind c acc in
                     ((a, b, c), acc)) a acc in
              ((Pcf_method a), acc)
          | Pcf_constraint a ->
              let (a, acc) =
                (fun (a, b) ->
                   fun acc ->
                     let (a, acc) = self#core_type a acc in
                     let (b, acc) = self#core_type b acc in ((a, b), acc)) a
                  acc in
              ((Pcf_constraint a), acc)
          | Pcf_initializer a ->
              let (a, acc) = self#expression a acc in
              ((Pcf_initializer a), acc)
          | Pcf_attribute a ->
              let (a, acc) = self#attribute a acc in ((Pcf_attribute a), acc)
          | Pcf_extension a ->
              let (a, acc) = self#extension a acc in ((Pcf_extension a), acc)
    method class_field_kind :
      class_field_kind -> 'acc -> (class_field_kind * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Cfk_virtual a ->
              let (a, acc) = self#core_type a acc in ((Cfk_virtual a), acc)
          | Cfk_concrete (a, b) ->
              let (a, acc) = self#override_flag a acc in
              let (b, acc) = self#expression b acc in
              ((Cfk_concrete (a, b)), acc)
    method class_declaration :
      class_declaration -> 'acc -> (class_declaration * 'acc)=
      self#class_infos self#class_expr
    method module_type : module_type -> 'acc -> (module_type * 'acc)=
      fun { pmty_desc; pmty_loc; pmty_attributes } ->
        fun acc ->
          let (pmty_desc, acc) = self#module_type_desc pmty_desc acc in
          let (pmty_loc, acc) = self#location pmty_loc acc in
          let (pmty_attributes, acc) = self#attributes pmty_attributes acc in
          ({ pmty_desc; pmty_loc; pmty_attributes }, acc)
    method module_type_desc :
      module_type_desc -> 'acc -> (module_type_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pmty_ident a ->
              let (a, acc) = self#longident_loc a acc in
              ((Pmty_ident a), acc)
          | Pmty_signature a ->
              let (a, acc) = self#signature a acc in
              ((Pmty_signature a), acc)
          | Pmty_functor (a, b) ->
              let (a, acc) = self#functor_parameter a acc in
              let (b, acc) = self#module_type b acc in
              ((Pmty_functor (a, b)), acc)
          | Pmty_with (a, b) ->
              let (a, acc) = self#module_type a acc in
              let (b, acc) = self#list self#with_constraint b acc in
              ((Pmty_with (a, b)), acc)
          | Pmty_typeof a ->
              let (a, acc) = self#module_expr a acc in ((Pmty_typeof a), acc)
          | Pmty_extension a ->
              let (a, acc) = self#extension a acc in
              ((Pmty_extension a), acc)
          | Pmty_alias a ->
              let (a, acc) = self#longident_loc a acc in
              ((Pmty_alias a), acc)
    method functor_parameter :
      functor_parameter -> 'acc -> (functor_parameter * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Unit -> (Unit, acc)
          | Named (a, b) ->
              let (a, acc) = self#loc (self#option self#string) a acc in
              let (b, acc) = self#module_type b acc in ((Named (a, b)), acc)
    method signature : signature -> 'acc -> (signature * 'acc)=
      self#list self#signature_item
    method signature_item :
      signature_item -> 'acc -> (signature_item * 'acc)=
      fun { psig_desc; psig_loc } ->
        fun acc ->
          let (psig_desc, acc) = self#signature_item_desc psig_desc acc in
          let (psig_loc, acc) = self#location psig_loc acc in
          ({ psig_desc; psig_loc }, acc)
    method signature_item_desc :
      signature_item_desc -> 'acc -> (signature_item_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Psig_value a ->
              let (a, acc) = self#value_description a acc in
              ((Psig_value a), acc)
          | Psig_type (a, b) ->
              let (a, acc) = self#rec_flag a acc in
              let (b, acc) = self#list self#type_declaration b acc in
              ((Psig_type (a, b)), acc)
          | Psig_typesubst a ->
              let (a, acc) = self#list self#type_declaration a acc in
              ((Psig_typesubst a), acc)
          | Psig_typext a ->
              let (a, acc) = self#type_extension a acc in
              ((Psig_typext a), acc)
          | Psig_exception a ->
              let (a, acc) = self#type_exception a acc in
              ((Psig_exception a), acc)
          | Psig_module a ->
              let (a, acc) = self#module_declaration a acc in
              ((Psig_module a), acc)
          | Psig_modsubst a ->
              let (a, acc) = self#module_substitution a acc in
              ((Psig_modsubst a), acc)
          | Psig_recmodule a ->
              let (a, acc) = self#list self#module_declaration a acc in
              ((Psig_recmodule a), acc)
          | Psig_modtype a ->
              let (a, acc) = self#module_type_declaration a acc in
              ((Psig_modtype a), acc)
          | Psig_modtypesubst a ->
              let (a, acc) = self#module_type_declaration a acc in
              ((Psig_modtypesubst a), acc)
          | Psig_open a ->
              let (a, acc) = self#open_description a acc in
              ((Psig_open a), acc)
          | Psig_include a ->
              let (a, acc) = self#include_description a acc in
              ((Psig_include a), acc)
          | Psig_class a ->
              let (a, acc) = self#list self#class_description a acc in
              ((Psig_class a), acc)
          | Psig_class_type a ->
              let (a, acc) = self#list self#class_type_declaration a acc in
              ((Psig_class_type a), acc)
          | Psig_attribute a ->
              let (a, acc) = self#attribute a acc in
              ((Psig_attribute a), acc)
          | Psig_extension (a, b) ->
              let (a, acc) = self#extension a acc in
              let (b, acc) = self#attributes b acc in
              ((Psig_extension (a, b)), acc)
    method module_declaration :
      module_declaration -> 'acc -> (module_declaration * 'acc)=
      fun { pmd_name; pmd_type; pmd_attributes; pmd_loc } ->
        fun acc ->
          let (pmd_name, acc) =
            self#loc (self#option self#string) pmd_name acc in
          let (pmd_type, acc) = self#module_type pmd_type acc in
          let (pmd_attributes, acc) = self#attributes pmd_attributes acc in
          let (pmd_loc, acc) = self#location pmd_loc acc in
          ({ pmd_name; pmd_type; pmd_attributes; pmd_loc }, acc)
    method module_substitution :
      module_substitution -> 'acc -> (module_substitution * 'acc)=
      fun { pms_name; pms_manifest; pms_attributes; pms_loc } ->
        fun acc ->
          let (pms_name, acc) = self#loc self#string pms_name acc in
          let (pms_manifest, acc) = self#longident_loc pms_manifest acc in
          let (pms_attributes, acc) = self#attributes pms_attributes acc in
          let (pms_loc, acc) = self#location pms_loc acc in
          ({ pms_name; pms_manifest; pms_attributes; pms_loc }, acc)
    method module_type_declaration :
      module_type_declaration -> 'acc -> (module_type_declaration * 'acc)=
      fun { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc } ->
        fun acc ->
          let (pmtd_name, acc) = self#loc self#string pmtd_name acc in
          let (pmtd_type, acc) = self#option self#module_type pmtd_type acc in
          let (pmtd_attributes, acc) = self#attributes pmtd_attributes acc in
          let (pmtd_loc, acc) = self#location pmtd_loc acc in
          ({ pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc }, acc)
    method open_infos :
      'a .
        ('a -> 'acc -> ('a * 'acc)) ->
          'a open_infos -> 'acc -> ('a open_infos * 'acc)=
      fun _a ->
        fun { popen_expr; popen_override; popen_loc; popen_attributes } ->
          fun acc ->
            let (popen_expr, acc) = _a popen_expr acc in
            let (popen_override, acc) = self#override_flag popen_override acc in
            let (popen_loc, acc) = self#location popen_loc acc in
            let (popen_attributes, acc) =
              self#attributes popen_attributes acc in
            ({ popen_expr; popen_override; popen_loc; popen_attributes },
              acc)
    method open_description :
      open_description -> 'acc -> (open_description * 'acc)=
      self#open_infos self#longident_loc
    method open_declaration :
      open_declaration -> 'acc -> (open_declaration * 'acc)=
      self#open_infos self#module_expr
    method include_infos :
      'a .
        ('a -> 'acc -> ('a * 'acc)) ->
          'a include_infos -> 'acc -> ('a include_infos * 'acc)=
      fun _a ->
        fun { pincl_mod; pincl_loc; pincl_attributes } ->
          fun acc ->
            let (pincl_mod, acc) = _a pincl_mod acc in
            let (pincl_loc, acc) = self#location pincl_loc acc in
            let (pincl_attributes, acc) =
              self#attributes pincl_attributes acc in
            ({ pincl_mod; pincl_loc; pincl_attributes }, acc)
    method include_description :
      include_description -> 'acc -> (include_description * 'acc)=
      self#include_infos self#module_type
    method include_declaration :
      include_declaration -> 'acc -> (include_declaration * 'acc)=
      self#include_infos self#module_expr
    method with_constraint :
      with_constraint -> 'acc -> (with_constraint * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pwith_type (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#type_declaration b acc in
              ((Pwith_type (a, b)), acc)
          | Pwith_module (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#longident_loc b acc in
              ((Pwith_module (a, b)), acc)
          | Pwith_modtype (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#module_type b acc in
              ((Pwith_modtype (a, b)), acc)
          | Pwith_modtypesubst (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#module_type b acc in
              ((Pwith_modtypesubst (a, b)), acc)
          | Pwith_typesubst (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#type_declaration b acc in
              ((Pwith_typesubst (a, b)), acc)
          | Pwith_modsubst (a, b) ->
              let (a, acc) = self#longident_loc a acc in
              let (b, acc) = self#longident_loc b acc in
              ((Pwith_modsubst (a, b)), acc)
    method module_expr : module_expr -> 'acc -> (module_expr * 'acc)=
      fun { pmod_desc; pmod_loc; pmod_attributes } ->
        fun acc ->
          let (pmod_desc, acc) = self#module_expr_desc pmod_desc acc in
          let (pmod_loc, acc) = self#location pmod_loc acc in
          let (pmod_attributes, acc) = self#attributes pmod_attributes acc in
          ({ pmod_desc; pmod_loc; pmod_attributes }, acc)
    method module_expr_desc :
      module_expr_desc -> 'acc -> (module_expr_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pmod_ident a ->
              let (a, acc) = self#longident_loc a acc in
              ((Pmod_ident a), acc)
          | Pmod_structure a ->
              let (a, acc) = self#structure a acc in
              ((Pmod_structure a), acc)
          | Pmod_functor (a, b) ->
              let (a, acc) = self#functor_parameter a acc in
              let (b, acc) = self#module_expr b acc in
              ((Pmod_functor (a, b)), acc)
          | Pmod_apply (a, b) ->
              let (a, acc) = self#module_expr a acc in
              let (b, acc) = self#module_expr b acc in
              ((Pmod_apply (a, b)), acc)
          | Pmod_constraint (a, b) ->
              let (a, acc) = self#module_expr a acc in
              let (b, acc) = self#module_type b acc in
              ((Pmod_constraint (a, b)), acc)
          | Pmod_unpack a ->
              let (a, acc) = self#expression a acc in ((Pmod_unpack a), acc)
          | Pmod_extension a ->
              let (a, acc) = self#extension a acc in
              ((Pmod_extension a), acc)
    method structure : structure -> 'acc -> (structure * 'acc)=
      self#list self#structure_item
    method structure_item :
      structure_item -> 'acc -> (structure_item * 'acc)=
      fun { pstr_desc; pstr_loc } ->
        fun acc ->
          let (pstr_desc, acc) = self#structure_item_desc pstr_desc acc in
          let (pstr_loc, acc) = self#location pstr_loc acc in
          ({ pstr_desc; pstr_loc }, acc)
    method structure_item_desc :
      structure_item_desc -> 'acc -> (structure_item_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pstr_eval (a, b) ->
              let (a, acc) = self#expression a acc in
              let (b, acc) = self#attributes b acc in
              ((Pstr_eval (a, b)), acc)
          | Pstr_value (a, b) ->
              let (a, acc) = self#rec_flag a acc in
              let (b, acc) = self#list self#value_binding b acc in
              ((Pstr_value (a, b)), acc)
          | Pstr_primitive a ->
              let (a, acc) = self#value_description a acc in
              ((Pstr_primitive a), acc)
          | Pstr_type (a, b) ->
              let (a, acc) = self#rec_flag a acc in
              let (b, acc) = self#list self#type_declaration b acc in
              ((Pstr_type (a, b)), acc)
          | Pstr_typext a ->
              let (a, acc) = self#type_extension a acc in
              ((Pstr_typext a), acc)
          | Pstr_exception a ->
              let (a, acc) = self#type_exception a acc in
              ((Pstr_exception a), acc)
          | Pstr_module a ->
              let (a, acc) = self#module_binding a acc in
              ((Pstr_module a), acc)
          | Pstr_recmodule a ->
              let (a, acc) = self#list self#module_binding a acc in
              ((Pstr_recmodule a), acc)
          | Pstr_modtype a ->
              let (a, acc) = self#module_type_declaration a acc in
              ((Pstr_modtype a), acc)
          | Pstr_open a ->
              let (a, acc) = self#open_declaration a acc in
              ((Pstr_open a), acc)
          | Pstr_class a ->
              let (a, acc) = self#list self#class_declaration a acc in
              ((Pstr_class a), acc)
          | Pstr_class_type a ->
              let (a, acc) = self#list self#class_type_declaration a acc in
              ((Pstr_class_type a), acc)
          | Pstr_include a ->
              let (a, acc) = self#include_declaration a acc in
              ((Pstr_include a), acc)
          | Pstr_attribute a ->
              let (a, acc) = self#attribute a acc in
              ((Pstr_attribute a), acc)
          | Pstr_extension (a, b) ->
              let (a, acc) = self#extension a acc in
              let (b, acc) = self#attributes b acc in
              ((Pstr_extension (a, b)), acc)
    method value_binding : value_binding -> 'acc -> (value_binding * 'acc)=
      fun { pvb_pat; pvb_expr; pvb_attributes; pvb_loc } ->
        fun acc ->
          let (pvb_pat, acc) = self#pattern pvb_pat acc in
          let (pvb_expr, acc) = self#expression pvb_expr acc in
          let (pvb_attributes, acc) = self#attributes pvb_attributes acc in
          let (pvb_loc, acc) = self#location pvb_loc acc in
          ({ pvb_pat; pvb_expr; pvb_attributes; pvb_loc }, acc)
    method module_binding :
      module_binding -> 'acc -> (module_binding * 'acc)=
      fun { pmb_name; pmb_expr; pmb_attributes; pmb_loc } ->
        fun acc ->
          let (pmb_name, acc) =
            self#loc (self#option self#string) pmb_name acc in
          let (pmb_expr, acc) = self#module_expr pmb_expr acc in
          let (pmb_attributes, acc) = self#attributes pmb_attributes acc in
          let (pmb_loc, acc) = self#location pmb_loc acc in
          ({ pmb_name; pmb_expr; pmb_attributes; pmb_loc }, acc)
    method toplevel_phrase :
      toplevel_phrase -> 'acc -> (toplevel_phrase * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Ptop_def a ->
              let (a, acc) = self#structure a acc in ((Ptop_def a), acc)
          | Ptop_dir a ->
              let (a, acc) = self#toplevel_directive a acc in
              ((Ptop_dir a), acc)
    method toplevel_directive :
      toplevel_directive -> 'acc -> (toplevel_directive * 'acc)=
      fun { pdir_name; pdir_arg; pdir_loc } ->
        fun acc ->
          let (pdir_name, acc) = self#loc self#string pdir_name acc in
          let (pdir_arg, acc) =
            self#option self#directive_argument pdir_arg acc in
          let (pdir_loc, acc) = self#location pdir_loc acc in
          ({ pdir_name; pdir_arg; pdir_loc }, acc)
    method directive_argument :
      directive_argument -> 'acc -> (directive_argument * 'acc)=
      fun { pdira_desc; pdira_loc } ->
        fun acc ->
          let (pdira_desc, acc) = self#directive_argument_desc pdira_desc acc in
          let (pdira_loc, acc) = self#location pdira_loc acc in
          ({ pdira_desc; pdira_loc }, acc)
    method directive_argument_desc :
      directive_argument_desc -> 'acc -> (directive_argument_desc * 'acc)=
      fun x ->
        fun acc ->
          match x with
          | Pdir_string a ->
              let (a, acc) = self#string a acc in ((Pdir_string a), acc)
          | Pdir_int (a, b) ->
              let (a, acc) = self#string a acc in
              let (b, acc) = self#option self#char b acc in
              ((Pdir_int (a, b)), acc)
          | Pdir_ident a ->
              let (a, acc) = self#longident a acc in ((Pdir_ident a), acc)
          | Pdir_bool a ->
              let (a, acc) = self#bool a acc in ((Pdir_bool a), acc)
    method cases : cases -> 'acc -> (cases * 'acc)= self#list self#case
  end
class virtual ['ctx] map_with_context =
  object (self)
    method virtual  bool : 'ctx -> bool -> bool
    method virtual  char : 'ctx -> char -> char
    method virtual  int : 'ctx -> int -> int
    method virtual  list :
      'a . ('ctx -> 'a -> 'a) -> 'ctx -> 'a list -> 'a list
    method virtual  option :
      'a . ('ctx -> 'a -> 'a) -> 'ctx -> 'a option -> 'a option
    method virtual  string : 'ctx -> string -> string
    method position : 'ctx -> position -> position=
      fun ctx ->
        fun { pos_fname; pos_lnum; pos_bol; pos_cnum } ->
          let pos_fname = self#string ctx pos_fname in
          let pos_lnum = self#int ctx pos_lnum in
          let pos_bol = self#int ctx pos_bol in
          let pos_cnum = self#int ctx pos_cnum in
          { pos_fname; pos_lnum; pos_bol; pos_cnum }
    method location : 'ctx -> location -> location=
      fun ctx ->
        fun { loc_start; loc_end; loc_ghost } ->
          let loc_start = self#position ctx loc_start in
          let loc_end = self#position ctx loc_end in
          let loc_ghost = self#bool ctx loc_ghost in
          { loc_start; loc_end; loc_ghost }
    method location_stack : 'ctx -> location_stack -> location_stack=
      self#list self#location
    method loc : 'a . ('ctx -> 'a -> 'a) -> 'ctx -> 'a loc -> 'a loc=
      fun _a ->
        fun ctx ->
          fun { txt; loc } ->
            let txt = _a ctx txt in
            let loc = self#location ctx loc in { txt; loc }
    method longident : 'ctx -> longident -> longident=
      fun ctx ->
        fun x ->
          match x with
          | Lident a -> let a = self#string ctx a in Lident a
          | Ldot (a, b) ->
              let a = self#longident ctx a in
              let b = self#string ctx b in Ldot (a, b)
          | Lapply (a, b) ->
              let a = self#longident ctx a in
              let b = self#longident ctx b in Lapply (a, b)
    method longident_loc : 'ctx -> longident_loc -> longident_loc=
      self#loc self#longident
    method rec_flag : 'ctx -> rec_flag -> rec_flag= fun _ctx -> fun x -> x
    method direction_flag : 'ctx -> direction_flag -> direction_flag=
      fun _ctx -> fun x -> x
    method private_flag : 'ctx -> private_flag -> private_flag=
      fun _ctx -> fun x -> x
    method mutable_flag : 'ctx -> mutable_flag -> mutable_flag=
      fun _ctx -> fun x -> x
    method virtual_flag : 'ctx -> virtual_flag -> virtual_flag=
      fun _ctx -> fun x -> x
    method override_flag : 'ctx -> override_flag -> override_flag=
      fun _ctx -> fun x -> x
    method closed_flag : 'ctx -> closed_flag -> closed_flag=
      fun _ctx -> fun x -> x
    method label : 'ctx -> label -> label= self#string
    method arg_label : 'ctx -> arg_label -> arg_label=
      fun ctx ->
        fun x ->
          match x with
          | Nolabel -> Nolabel
          | Labelled a -> let a = self#string ctx a in Labelled a
          | Optional a -> let a = self#string ctx a in Optional a
    method variance : 'ctx -> variance -> variance= fun _ctx -> fun x -> x
    method injectivity : 'ctx -> injectivity -> injectivity=
      fun _ctx -> fun x -> x
    method constant : 'ctx -> constant -> constant=
      fun ctx ->
        fun x ->
          match x with
          | Pconst_integer (a, b) ->
              let a = self#string ctx a in
              let b = self#option self#char ctx b in Pconst_integer (a, b)
          | Pconst_char a -> let a = self#char ctx a in Pconst_char a
          | Pconst_string (a, b, c) ->
              let a = self#string ctx a in
              let b = self#location ctx b in
              let c = self#option self#string ctx c in
              Pconst_string (a, b, c)
          | Pconst_float (a, b) ->
              let a = self#string ctx a in
              let b = self#option self#char ctx b in Pconst_float (a, b)
    method attribute : 'ctx -> attribute -> attribute=
      fun ctx ->
        fun { attr_name; attr_payload; attr_loc } ->
          let attr_name = self#loc self#string ctx attr_name in
          let attr_payload = self#payload ctx attr_payload in
          let attr_loc = self#location ctx attr_loc in
          { attr_name; attr_payload; attr_loc }
    method extension : 'ctx -> extension -> extension=
      fun ctx ->
        fun (a, b) ->
          let a = self#loc self#string ctx a in
          let b = self#payload ctx b in (a, b)
    method attributes : 'ctx -> attributes -> attributes=
      self#list self#attribute
    method payload : 'ctx -> payload -> payload=
      fun ctx ->
        fun x ->
          match x with
          | PStr a -> let a = self#structure ctx a in PStr a
          | PSig a -> let a = self#signature ctx a in PSig a
          | PTyp a -> let a = self#core_type ctx a in PTyp a
          | PPat (a, b) ->
              let a = self#pattern ctx a in
              let b = self#option self#expression ctx b in PPat (a, b)
    method core_type : 'ctx -> core_type -> core_type=
      fun ctx ->
        fun { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes } ->
          let ptyp_desc = self#core_type_desc ctx ptyp_desc in
          let ptyp_loc = self#location ctx ptyp_loc in
          let ptyp_loc_stack = self#location_stack ctx ptyp_loc_stack in
          let ptyp_attributes = self#attributes ctx ptyp_attributes in
          { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes }
    method core_type_desc : 'ctx -> core_type_desc -> core_type_desc=
      fun ctx ->
        fun x ->
          match x with
          | Ptyp_any -> Ptyp_any
          | Ptyp_var a -> let a = self#string ctx a in Ptyp_var a
          | Ptyp_arrow (a, b, c) ->
              let a = self#arg_label ctx a in
              let b = self#core_type ctx b in
              let c = self#core_type ctx c in Ptyp_arrow (a, b, c)
          | Ptyp_tuple a ->
              let a = self#list self#core_type ctx a in Ptyp_tuple a
          | Ptyp_constr (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#list self#core_type ctx b in Ptyp_constr (a, b)
          | Ptyp_object (a, b) ->
              let a = self#list self#object_field ctx a in
              let b = self#closed_flag ctx b in Ptyp_object (a, b)
          | Ptyp_class (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#list self#core_type ctx b in Ptyp_class (a, b)
          | Ptyp_alias (a, b) ->
              let a = self#core_type ctx a in
              let b = self#string ctx b in Ptyp_alias (a, b)
          | Ptyp_variant (a, b, c) ->
              let a = self#list self#row_field ctx a in
              let b = self#closed_flag ctx b in
              let c = self#option (self#list self#label) ctx c in
              Ptyp_variant (a, b, c)
          | Ptyp_poly (a, b) ->
              let a = self#list (self#loc self#string) ctx a in
              let b = self#core_type ctx b in Ptyp_poly (a, b)
          | Ptyp_package a ->
              let a = self#package_type ctx a in Ptyp_package a
          | Ptyp_extension a ->
              let a = self#extension ctx a in Ptyp_extension a
    method package_type : 'ctx -> package_type -> package_type=
      fun ctx ->
        fun (a, b) ->
          let a = self#longident_loc ctx a in
          let b =
            self#list
              (fun ctx ->
                 fun (a, b) ->
                   let a = self#longident_loc ctx a in
                   let b = self#core_type ctx b in (a, b)) ctx b in
          (a, b)
    method row_field : 'ctx -> row_field -> row_field=
      fun ctx ->
        fun { prf_desc; prf_loc; prf_attributes } ->
          let prf_desc = self#row_field_desc ctx prf_desc in
          let prf_loc = self#location ctx prf_loc in
          let prf_attributes = self#attributes ctx prf_attributes in
          { prf_desc; prf_loc; prf_attributes }
    method row_field_desc : 'ctx -> row_field_desc -> row_field_desc=
      fun ctx ->
        fun x ->
          match x with
          | Rtag (a, b, c) ->
              let a = self#loc self#label ctx a in
              let b = self#bool ctx b in
              let c = self#list self#core_type ctx c in Rtag (a, b, c)
          | Rinherit a -> let a = self#core_type ctx a in Rinherit a
    method object_field : 'ctx -> object_field -> object_field=
      fun ctx ->
        fun { pof_desc; pof_loc; pof_attributes } ->
          let pof_desc = self#object_field_desc ctx pof_desc in
          let pof_loc = self#location ctx pof_loc in
          let pof_attributes = self#attributes ctx pof_attributes in
          { pof_desc; pof_loc; pof_attributes }
    method object_field_desc :
      'ctx -> object_field_desc -> object_field_desc=
      fun ctx ->
        fun x ->
          match x with
          | Otag (a, b) ->
              let a = self#loc self#label ctx a in
              let b = self#core_type ctx b in Otag (a, b)
          | Oinherit a -> let a = self#core_type ctx a in Oinherit a
    method pattern : 'ctx -> pattern -> pattern=
      fun ctx ->
        fun { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes } ->
          let ppat_desc = self#pattern_desc ctx ppat_desc in
          let ppat_loc = self#location ctx ppat_loc in
          let ppat_loc_stack = self#location_stack ctx ppat_loc_stack in
          let ppat_attributes = self#attributes ctx ppat_attributes in
          { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes }
    method pattern_desc : 'ctx -> pattern_desc -> pattern_desc=
      fun ctx ->
        fun x ->
          match x with
          | Ppat_any -> Ppat_any
          | Ppat_var a -> let a = self#loc self#string ctx a in Ppat_var a
          | Ppat_alias (a, b) ->
              let a = self#pattern ctx a in
              let b = self#loc self#string ctx b in Ppat_alias (a, b)
          | Ppat_constant a -> let a = self#constant ctx a in Ppat_constant a
          | Ppat_interval (a, b) ->
              let a = self#constant ctx a in
              let b = self#constant ctx b in Ppat_interval (a, b)
          | Ppat_tuple a ->
              let a = self#list self#pattern ctx a in Ppat_tuple a
          | Ppat_construct (a, b) ->
              let a = self#longident_loc ctx a in
              let b =
                self#option
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#list (self#loc self#string) ctx a in
                       let b = self#pattern ctx b in (a, b)) ctx b in
              Ppat_construct (a, b)
          | Ppat_variant (a, b) ->
              let a = self#label ctx a in
              let b = self#option self#pattern ctx b in Ppat_variant (a, b)
          | Ppat_record (a, b) ->
              let a =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#longident_loc ctx a in
                       let b = self#pattern ctx b in (a, b)) ctx a in
              let b = self#closed_flag ctx b in Ppat_record (a, b)
          | Ppat_array a ->
              let a = self#list self#pattern ctx a in Ppat_array a
          | Ppat_or (a, b) ->
              let a = self#pattern ctx a in
              let b = self#pattern ctx b in Ppat_or (a, b)
          | Ppat_constraint (a, b) ->
              let a = self#pattern ctx a in
              let b = self#core_type ctx b in Ppat_constraint (a, b)
          | Ppat_type a -> let a = self#longident_loc ctx a in Ppat_type a
          | Ppat_lazy a -> let a = self#pattern ctx a in Ppat_lazy a
          | Ppat_unpack a ->
              let a = self#loc (self#option self#string) ctx a in
              Ppat_unpack a
          | Ppat_exception a ->
              let a = self#pattern ctx a in Ppat_exception a
          | Ppat_extension a ->
              let a = self#extension ctx a in Ppat_extension a
          | Ppat_open (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#pattern ctx b in Ppat_open (a, b)
    method expression : 'ctx -> expression -> expression=
      fun ctx ->
        fun { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes } ->
          let pexp_desc = self#expression_desc ctx pexp_desc in
          let pexp_loc = self#location ctx pexp_loc in
          let pexp_loc_stack = self#location_stack ctx pexp_loc_stack in
          let pexp_attributes = self#attributes ctx pexp_attributes in
          { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes }
    method expression_desc : 'ctx -> expression_desc -> expression_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pexp_ident a -> let a = self#longident_loc ctx a in Pexp_ident a
          | Pexp_constant a -> let a = self#constant ctx a in Pexp_constant a
          | Pexp_let (a, b, c) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#value_binding ctx b in
              let c = self#expression ctx c in Pexp_let (a, b, c)
          | Pexp_function a -> let a = self#cases ctx a in Pexp_function a
          | Pexp_fun (a, b, c, d) ->
              let a = self#arg_label ctx a in
              let b = self#option self#expression ctx b in
              let c = self#pattern ctx c in
              let d = self#expression ctx d in Pexp_fun (a, b, c, d)
          | Pexp_apply (a, b) ->
              let a = self#expression ctx a in
              let b =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#arg_label ctx a in
                       let b = self#expression ctx b in (a, b)) ctx b in
              Pexp_apply (a, b)
          | Pexp_match (a, b) ->
              let a = self#expression ctx a in
              let b = self#cases ctx b in Pexp_match (a, b)
          | Pexp_try (a, b) ->
              let a = self#expression ctx a in
              let b = self#cases ctx b in Pexp_try (a, b)
          | Pexp_tuple a ->
              let a = self#list self#expression ctx a in Pexp_tuple a
          | Pexp_construct (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#option self#expression ctx b in
              Pexp_construct (a, b)
          | Pexp_variant (a, b) ->
              let a = self#label ctx a in
              let b = self#option self#expression ctx b in
              Pexp_variant (a, b)
          | Pexp_record (a, b) ->
              let a =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#longident_loc ctx a in
                       let b = self#expression ctx b in (a, b)) ctx a in
              let b = self#option self#expression ctx b in Pexp_record (a, b)
          | Pexp_field (a, b) ->
              let a = self#expression ctx a in
              let b = self#longident_loc ctx b in Pexp_field (a, b)
          | Pexp_setfield (a, b, c) ->
              let a = self#expression ctx a in
              let b = self#longident_loc ctx b in
              let c = self#expression ctx c in Pexp_setfield (a, b, c)
          | Pexp_array a ->
              let a = self#list self#expression ctx a in Pexp_array a
          | Pexp_ifthenelse (a, b, c) ->
              let a = self#expression ctx a in
              let b = self#expression ctx b in
              let c = self#option self#expression ctx c in
              Pexp_ifthenelse (a, b, c)
          | Pexp_sequence (a, b) ->
              let a = self#expression ctx a in
              let b = self#expression ctx b in Pexp_sequence (a, b)
          | Pexp_while (a, b) ->
              let a = self#expression ctx a in
              let b = self#expression ctx b in Pexp_while (a, b)
          | Pexp_for (a, b, c, d, e) ->
              let a = self#pattern ctx a in
              let b = self#expression ctx b in
              let c = self#expression ctx c in
              let d = self#direction_flag ctx d in
              let e = self#expression ctx e in Pexp_for (a, b, c, d, e)
          | Pexp_constraint (a, b) ->
              let a = self#expression ctx a in
              let b = self#core_type ctx b in Pexp_constraint (a, b)
          | Pexp_coerce (a, b, c) ->
              let a = self#expression ctx a in
              let b = self#option self#core_type ctx b in
              let c = self#core_type ctx c in Pexp_coerce (a, b, c)
          | Pexp_send (a, b) ->
              let a = self#expression ctx a in
              let b = self#loc self#label ctx b in Pexp_send (a, b)
          | Pexp_new a -> let a = self#longident_loc ctx a in Pexp_new a
          | Pexp_setinstvar (a, b) ->
              let a = self#loc self#label ctx a in
              let b = self#expression ctx b in Pexp_setinstvar (a, b)
          | Pexp_override a ->
              let a =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#loc self#label ctx a in
                       let b = self#expression ctx b in (a, b)) ctx a in
              Pexp_override a
          | Pexp_letmodule (a, b, c) ->
              let a = self#loc (self#option self#string) ctx a in
              let b = self#module_expr ctx b in
              let c = self#expression ctx c in Pexp_letmodule (a, b, c)
          | Pexp_letexception (a, b) ->
              let a = self#extension_constructor ctx a in
              let b = self#expression ctx b in Pexp_letexception (a, b)
          | Pexp_assert a -> let a = self#expression ctx a in Pexp_assert a
          | Pexp_lazy a -> let a = self#expression ctx a in Pexp_lazy a
          | Pexp_poly (a, b) ->
              let a = self#expression ctx a in
              let b = self#option self#core_type ctx b in Pexp_poly (a, b)
          | Pexp_object a ->
              let a = self#class_structure ctx a in Pexp_object a
          | Pexp_newtype (a, b) ->
              let a = self#loc self#string ctx a in
              let b = self#expression ctx b in Pexp_newtype (a, b)
          | Pexp_pack a -> let a = self#module_expr ctx a in Pexp_pack a
          | Pexp_open (a, b) ->
              let a = self#open_declaration ctx a in
              let b = self#expression ctx b in Pexp_open (a, b)
          | Pexp_letop a -> let a = self#letop ctx a in Pexp_letop a
          | Pexp_extension a ->
              let a = self#extension ctx a in Pexp_extension a
          | Pexp_unreachable -> Pexp_unreachable
    method case : 'ctx -> case -> case=
      fun ctx ->
        fun { pc_lhs; pc_guard; pc_rhs } ->
          let pc_lhs = self#pattern ctx pc_lhs in
          let pc_guard = self#option self#expression ctx pc_guard in
          let pc_rhs = self#expression ctx pc_rhs in
          { pc_lhs; pc_guard; pc_rhs }
    method letop : 'ctx -> letop -> letop=
      fun ctx ->
        fun { let_; ands; body } ->
          let let_ = self#binding_op ctx let_ in
          let ands = self#list self#binding_op ctx ands in
          let body = self#expression ctx body in { let_; ands; body }
    method binding_op : 'ctx -> binding_op -> binding_op=
      fun ctx ->
        fun { pbop_op; pbop_pat; pbop_exp; pbop_loc } ->
          let pbop_op = self#loc self#string ctx pbop_op in
          let pbop_pat = self#pattern ctx pbop_pat in
          let pbop_exp = self#expression ctx pbop_exp in
          let pbop_loc = self#location ctx pbop_loc in
          { pbop_op; pbop_pat; pbop_exp; pbop_loc }
    method value_description :
      'ctx -> value_description -> value_description=
      fun ctx ->
        fun { pval_name; pval_type; pval_prim; pval_attributes; pval_loc } ->
          let pval_name = self#loc self#string ctx pval_name in
          let pval_type = self#core_type ctx pval_type in
          let pval_prim = self#list self#string ctx pval_prim in
          let pval_attributes = self#attributes ctx pval_attributes in
          let pval_loc = self#location ctx pval_loc in
          { pval_name; pval_type; pval_prim; pval_attributes; pval_loc }
    method type_declaration : 'ctx -> type_declaration -> type_declaration=
      fun ctx ->
        fun
          { ptype_name; ptype_params; ptype_cstrs; ptype_kind; ptype_private;
            ptype_manifest; ptype_attributes; ptype_loc }
          ->
          let ptype_name = self#loc self#string ctx ptype_name in
          let ptype_params =
            self#list
              (fun ctx ->
                 fun (a, b) ->
                   let a = self#core_type ctx a in
                   let b =
                     (fun ctx ->
                        fun (a, b) ->
                          let a = self#variance ctx a in
                          let b = self#injectivity ctx b in (a, b)) ctx b in
                   (a, b)) ctx ptype_params in
          let ptype_cstrs =
            self#list
              (fun ctx ->
                 fun (a, b, c) ->
                   let a = self#core_type ctx a in
                   let b = self#core_type ctx b in
                   let c = self#location ctx c in (a, b, c)) ctx ptype_cstrs in
          let ptype_kind = self#type_kind ctx ptype_kind in
          let ptype_private = self#private_flag ctx ptype_private in
          let ptype_manifest = self#option self#core_type ctx ptype_manifest in
          let ptype_attributes = self#attributes ctx ptype_attributes in
          let ptype_loc = self#location ctx ptype_loc in
          {
            ptype_name;
            ptype_params;
            ptype_cstrs;
            ptype_kind;
            ptype_private;
            ptype_manifest;
            ptype_attributes;
            ptype_loc
          }
    method type_kind : 'ctx -> type_kind -> type_kind=
      fun ctx ->
        fun x ->
          match x with
          | Ptype_abstract -> Ptype_abstract
          | Ptype_variant a ->
              let a = self#list self#constructor_declaration ctx a in
              Ptype_variant a
          | Ptype_record a ->
              let a = self#list self#label_declaration ctx a in
              Ptype_record a
          | Ptype_open -> Ptype_open
    method label_declaration :
      'ctx -> label_declaration -> label_declaration=
      fun ctx ->
        fun { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes } ->
          let pld_name = self#loc self#string ctx pld_name in
          let pld_mutable = self#mutable_flag ctx pld_mutable in
          let pld_type = self#core_type ctx pld_type in
          let pld_loc = self#location ctx pld_loc in
          let pld_attributes = self#attributes ctx pld_attributes in
          { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes }
    method constructor_declaration :
      'ctx -> constructor_declaration -> constructor_declaration=
      fun ctx ->
        fun
          { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
          ->
          let pcd_name = self#loc self#string ctx pcd_name in
          let pcd_vars = self#list (self#loc self#string) ctx pcd_vars in
          let pcd_args = self#constructor_arguments ctx pcd_args in
          let pcd_res = self#option self#core_type ctx pcd_res in
          let pcd_loc = self#location ctx pcd_loc in
          let pcd_attributes = self#attributes ctx pcd_attributes in
          { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
    method constructor_arguments :
      'ctx -> constructor_arguments -> constructor_arguments=
      fun ctx ->
        fun x ->
          match x with
          | Pcstr_tuple a ->
              let a = self#list self#core_type ctx a in Pcstr_tuple a
          | Pcstr_record a ->
              let a = self#list self#label_declaration ctx a in
              Pcstr_record a
    method type_extension : 'ctx -> type_extension -> type_extension=
      fun ctx ->
        fun
          { ptyext_path; ptyext_params; ptyext_constructors; ptyext_private;
            ptyext_loc; ptyext_attributes }
          ->
          let ptyext_path = self#longident_loc ctx ptyext_path in
          let ptyext_params =
            self#list
              (fun ctx ->
                 fun (a, b) ->
                   let a = self#core_type ctx a in
                   let b =
                     (fun ctx ->
                        fun (a, b) ->
                          let a = self#variance ctx a in
                          let b = self#injectivity ctx b in (a, b)) ctx b in
                   (a, b)) ctx ptyext_params in
          let ptyext_constructors =
            self#list self#extension_constructor ctx ptyext_constructors in
          let ptyext_private = self#private_flag ctx ptyext_private in
          let ptyext_loc = self#location ctx ptyext_loc in
          let ptyext_attributes = self#attributes ctx ptyext_attributes in
          {
            ptyext_path;
            ptyext_params;
            ptyext_constructors;
            ptyext_private;
            ptyext_loc;
            ptyext_attributes
          }
    method extension_constructor :
      'ctx -> extension_constructor -> extension_constructor=
      fun ctx ->
        fun { pext_name; pext_kind; pext_loc; pext_attributes } ->
          let pext_name = self#loc self#string ctx pext_name in
          let pext_kind = self#extension_constructor_kind ctx pext_kind in
          let pext_loc = self#location ctx pext_loc in
          let pext_attributes = self#attributes ctx pext_attributes in
          { pext_name; pext_kind; pext_loc; pext_attributes }
    method type_exception : 'ctx -> type_exception -> type_exception=
      fun ctx ->
        fun { ptyexn_constructor; ptyexn_loc; ptyexn_attributes } ->
          let ptyexn_constructor =
            self#extension_constructor ctx ptyexn_constructor in
          let ptyexn_loc = self#location ctx ptyexn_loc in
          let ptyexn_attributes = self#attributes ctx ptyexn_attributes in
          { ptyexn_constructor; ptyexn_loc; ptyexn_attributes }
    method extension_constructor_kind :
      'ctx -> extension_constructor_kind -> extension_constructor_kind=
      fun ctx ->
        fun x ->
          match x with
          | Pext_decl (a, b, c) ->
              let a = self#list (self#loc self#string) ctx a in
              let b = self#constructor_arguments ctx b in
              let c = self#option self#core_type ctx c in Pext_decl (a, b, c)
          | Pext_rebind a ->
              let a = self#longident_loc ctx a in Pext_rebind a
    method class_type : 'ctx -> class_type -> class_type=
      fun ctx ->
        fun { pcty_desc; pcty_loc; pcty_attributes } ->
          let pcty_desc = self#class_type_desc ctx pcty_desc in
          let pcty_loc = self#location ctx pcty_loc in
          let pcty_attributes = self#attributes ctx pcty_attributes in
          { pcty_desc; pcty_loc; pcty_attributes }
    method class_type_desc : 'ctx -> class_type_desc -> class_type_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pcty_constr (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#list self#core_type ctx b in Pcty_constr (a, b)
          | Pcty_signature a ->
              let a = self#class_signature ctx a in Pcty_signature a
          | Pcty_arrow (a, b, c) ->
              let a = self#arg_label ctx a in
              let b = self#core_type ctx b in
              let c = self#class_type ctx c in Pcty_arrow (a, b, c)
          | Pcty_extension a ->
              let a = self#extension ctx a in Pcty_extension a
          | Pcty_open (a, b) ->
              let a = self#open_description ctx a in
              let b = self#class_type ctx b in Pcty_open (a, b)
    method class_signature : 'ctx -> class_signature -> class_signature=
      fun ctx ->
        fun { pcsig_self; pcsig_fields } ->
          let pcsig_self = self#core_type ctx pcsig_self in
          let pcsig_fields = self#list self#class_type_field ctx pcsig_fields in
          { pcsig_self; pcsig_fields }
    method class_type_field : 'ctx -> class_type_field -> class_type_field=
      fun ctx ->
        fun { pctf_desc; pctf_loc; pctf_attributes } ->
          let pctf_desc = self#class_type_field_desc ctx pctf_desc in
          let pctf_loc = self#location ctx pctf_loc in
          let pctf_attributes = self#attributes ctx pctf_attributes in
          { pctf_desc; pctf_loc; pctf_attributes }
    method class_type_field_desc :
      'ctx -> class_type_field_desc -> class_type_field_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pctf_inherit a -> let a = self#class_type ctx a in Pctf_inherit a
          | Pctf_val a ->
              let a =
                (fun ctx ->
                   fun (a, b, c, d) ->
                     let a = self#loc self#label ctx a in
                     let b = self#mutable_flag ctx b in
                     let c = self#virtual_flag ctx c in
                     let d = self#core_type ctx d in (a, b, c, d)) ctx a in
              Pctf_val a
          | Pctf_method a ->
              let a =
                (fun ctx ->
                   fun (a, b, c, d) ->
                     let a = self#loc self#label ctx a in
                     let b = self#private_flag ctx b in
                     let c = self#virtual_flag ctx c in
                     let d = self#core_type ctx d in (a, b, c, d)) ctx a in
              Pctf_method a
          | Pctf_constraint a ->
              let a =
                (fun ctx ->
                   fun (a, b) ->
                     let a = self#core_type ctx a in
                     let b = self#core_type ctx b in (a, b)) ctx a in
              Pctf_constraint a
          | Pctf_attribute a ->
              let a = self#attribute ctx a in Pctf_attribute a
          | Pctf_extension a ->
              let a = self#extension ctx a in Pctf_extension a
    method class_infos :
      'a . ('ctx -> 'a -> 'a) -> 'ctx -> 'a class_infos -> 'a class_infos=
      fun _a ->
        fun ctx ->
          fun
            { pci_virt; pci_params; pci_name; pci_expr; pci_loc;
              pci_attributes }
            ->
            let pci_virt = self#virtual_flag ctx pci_virt in
            let pci_params =
              self#list
                (fun ctx ->
                   fun (a, b) ->
                     let a = self#core_type ctx a in
                     let b =
                       (fun ctx ->
                          fun (a, b) ->
                            let a = self#variance ctx a in
                            let b = self#injectivity ctx b in (a, b)) ctx b in
                     (a, b)) ctx pci_params in
            let pci_name = self#loc self#string ctx pci_name in
            let pci_expr = _a ctx pci_expr in
            let pci_loc = self#location ctx pci_loc in
            let pci_attributes = self#attributes ctx pci_attributes in
            {
              pci_virt;
              pci_params;
              pci_name;
              pci_expr;
              pci_loc;
              pci_attributes
            }
    method class_description :
      'ctx -> class_description -> class_description=
      self#class_infos self#class_type
    method class_type_declaration :
      'ctx -> class_type_declaration -> class_type_declaration=
      self#class_infos self#class_type
    method class_expr : 'ctx -> class_expr -> class_expr=
      fun ctx ->
        fun { pcl_desc; pcl_loc; pcl_attributes } ->
          let pcl_desc = self#class_expr_desc ctx pcl_desc in
          let pcl_loc = self#location ctx pcl_loc in
          let pcl_attributes = self#attributes ctx pcl_attributes in
          { pcl_desc; pcl_loc; pcl_attributes }
    method class_expr_desc : 'ctx -> class_expr_desc -> class_expr_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pcl_constr (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#list self#core_type ctx b in Pcl_constr (a, b)
          | Pcl_structure a ->
              let a = self#class_structure ctx a in Pcl_structure a
          | Pcl_fun (a, b, c, d) ->
              let a = self#arg_label ctx a in
              let b = self#option self#expression ctx b in
              let c = self#pattern ctx c in
              let d = self#class_expr ctx d in Pcl_fun (a, b, c, d)
          | Pcl_apply (a, b) ->
              let a = self#class_expr ctx a in
              let b =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#arg_label ctx a in
                       let b = self#expression ctx b in (a, b)) ctx b in
              Pcl_apply (a, b)
          | Pcl_let (a, b, c) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#value_binding ctx b in
              let c = self#class_expr ctx c in Pcl_let (a, b, c)
          | Pcl_constraint (a, b) ->
              let a = self#class_expr ctx a in
              let b = self#class_type ctx b in Pcl_constraint (a, b)
          | Pcl_extension a ->
              let a = self#extension ctx a in Pcl_extension a
          | Pcl_open (a, b) ->
              let a = self#open_description ctx a in
              let b = self#class_expr ctx b in Pcl_open (a, b)
    method class_structure : 'ctx -> class_structure -> class_structure=
      fun ctx ->
        fun { pcstr_self; pcstr_fields } ->
          let pcstr_self = self#pattern ctx pcstr_self in
          let pcstr_fields = self#list self#class_field ctx pcstr_fields in
          { pcstr_self; pcstr_fields }
    method class_field : 'ctx -> class_field -> class_field=
      fun ctx ->
        fun { pcf_desc; pcf_loc; pcf_attributes } ->
          let pcf_desc = self#class_field_desc ctx pcf_desc in
          let pcf_loc = self#location ctx pcf_loc in
          let pcf_attributes = self#attributes ctx pcf_attributes in
          { pcf_desc; pcf_loc; pcf_attributes }
    method class_field_desc : 'ctx -> class_field_desc -> class_field_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pcf_inherit (a, b, c) ->
              let a = self#override_flag ctx a in
              let b = self#class_expr ctx b in
              let c = self#option (self#loc self#string) ctx c in
              Pcf_inherit (a, b, c)
          | Pcf_val a ->
              let a =
                (fun ctx ->
                   fun (a, b, c) ->
                     let a = self#loc self#label ctx a in
                     let b = self#mutable_flag ctx b in
                     let c = self#class_field_kind ctx c in (a, b, c)) ctx a in
              Pcf_val a
          | Pcf_method a ->
              let a =
                (fun ctx ->
                   fun (a, b, c) ->
                     let a = self#loc self#label ctx a in
                     let b = self#private_flag ctx b in
                     let c = self#class_field_kind ctx c in (a, b, c)) ctx a in
              Pcf_method a
          | Pcf_constraint a ->
              let a =
                (fun ctx ->
                   fun (a, b) ->
                     let a = self#core_type ctx a in
                     let b = self#core_type ctx b in (a, b)) ctx a in
              Pcf_constraint a
          | Pcf_initializer a ->
              let a = self#expression ctx a in Pcf_initializer a
          | Pcf_attribute a ->
              let a = self#attribute ctx a in Pcf_attribute a
          | Pcf_extension a ->
              let a = self#extension ctx a in Pcf_extension a
    method class_field_kind : 'ctx -> class_field_kind -> class_field_kind=
      fun ctx ->
        fun x ->
          match x with
          | Cfk_virtual a -> let a = self#core_type ctx a in Cfk_virtual a
          | Cfk_concrete (a, b) ->
              let a = self#override_flag ctx a in
              let b = self#expression ctx b in Cfk_concrete (a, b)
    method class_declaration :
      'ctx -> class_declaration -> class_declaration=
      self#class_infos self#class_expr
    method module_type : 'ctx -> module_type -> module_type=
      fun ctx ->
        fun { pmty_desc; pmty_loc; pmty_attributes } ->
          let pmty_desc = self#module_type_desc ctx pmty_desc in
          let pmty_loc = self#location ctx pmty_loc in
          let pmty_attributes = self#attributes ctx pmty_attributes in
          { pmty_desc; pmty_loc; pmty_attributes }
    method module_type_desc : 'ctx -> module_type_desc -> module_type_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pmty_ident a -> let a = self#longident_loc ctx a in Pmty_ident a
          | Pmty_signature a ->
              let a = self#signature ctx a in Pmty_signature a
          | Pmty_functor (a, b) ->
              let a = self#functor_parameter ctx a in
              let b = self#module_type ctx b in Pmty_functor (a, b)
          | Pmty_with (a, b) ->
              let a = self#module_type ctx a in
              let b = self#list self#with_constraint ctx b in
              Pmty_with (a, b)
          | Pmty_typeof a -> let a = self#module_expr ctx a in Pmty_typeof a
          | Pmty_extension a ->
              let a = self#extension ctx a in Pmty_extension a
          | Pmty_alias a -> let a = self#longident_loc ctx a in Pmty_alias a
    method functor_parameter :
      'ctx -> functor_parameter -> functor_parameter=
      fun ctx ->
        fun x ->
          match x with
          | Unit -> Unit
          | Named (a, b) ->
              let a = self#loc (self#option self#string) ctx a in
              let b = self#module_type ctx b in Named (a, b)
    method signature : 'ctx -> signature -> signature=
      self#list self#signature_item
    method signature_item : 'ctx -> signature_item -> signature_item=
      fun ctx ->
        fun { psig_desc; psig_loc } ->
          let psig_desc = self#signature_item_desc ctx psig_desc in
          let psig_loc = self#location ctx psig_loc in
          { psig_desc; psig_loc }
    method signature_item_desc :
      'ctx -> signature_item_desc -> signature_item_desc=
      fun ctx ->
        fun x ->
          match x with
          | Psig_value a ->
              let a = self#value_description ctx a in Psig_value a
          | Psig_type (a, b) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#type_declaration ctx b in
              Psig_type (a, b)
          | Psig_typesubst a ->
              let a = self#list self#type_declaration ctx a in
              Psig_typesubst a
          | Psig_typext a ->
              let a = self#type_extension ctx a in Psig_typext a
          | Psig_exception a ->
              let a = self#type_exception ctx a in Psig_exception a
          | Psig_module a ->
              let a = self#module_declaration ctx a in Psig_module a
          | Psig_modsubst a ->
              let a = self#module_substitution ctx a in Psig_modsubst a
          | Psig_recmodule a ->
              let a = self#list self#module_declaration ctx a in
              Psig_recmodule a
          | Psig_modtype a ->
              let a = self#module_type_declaration ctx a in Psig_modtype a
          | Psig_modtypesubst a ->
              let a = self#module_type_declaration ctx a in
              Psig_modtypesubst a
          | Psig_open a -> let a = self#open_description ctx a in Psig_open a
          | Psig_include a ->
              let a = self#include_description ctx a in Psig_include a
          | Psig_class a ->
              let a = self#list self#class_description ctx a in Psig_class a
          | Psig_class_type a ->
              let a = self#list self#class_type_declaration ctx a in
              Psig_class_type a
          | Psig_attribute a ->
              let a = self#attribute ctx a in Psig_attribute a
          | Psig_extension (a, b) ->
              let a = self#extension ctx a in
              let b = self#attributes ctx b in Psig_extension (a, b)
    method module_declaration :
      'ctx -> module_declaration -> module_declaration=
      fun ctx ->
        fun { pmd_name; pmd_type; pmd_attributes; pmd_loc } ->
          let pmd_name = self#loc (self#option self#string) ctx pmd_name in
          let pmd_type = self#module_type ctx pmd_type in
          let pmd_attributes = self#attributes ctx pmd_attributes in
          let pmd_loc = self#location ctx pmd_loc in
          { pmd_name; pmd_type; pmd_attributes; pmd_loc }
    method module_substitution :
      'ctx -> module_substitution -> module_substitution=
      fun ctx ->
        fun { pms_name; pms_manifest; pms_attributes; pms_loc } ->
          let pms_name = self#loc self#string ctx pms_name in
          let pms_manifest = self#longident_loc ctx pms_manifest in
          let pms_attributes = self#attributes ctx pms_attributes in
          let pms_loc = self#location ctx pms_loc in
          { pms_name; pms_manifest; pms_attributes; pms_loc }
    method module_type_declaration :
      'ctx -> module_type_declaration -> module_type_declaration=
      fun ctx ->
        fun { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc } ->
          let pmtd_name = self#loc self#string ctx pmtd_name in
          let pmtd_type = self#option self#module_type ctx pmtd_type in
          let pmtd_attributes = self#attributes ctx pmtd_attributes in
          let pmtd_loc = self#location ctx pmtd_loc in
          { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc }
    method open_infos :
      'a . ('ctx -> 'a -> 'a) -> 'ctx -> 'a open_infos -> 'a open_infos=
      fun _a ->
        fun ctx ->
          fun { popen_expr; popen_override; popen_loc; popen_attributes } ->
            let popen_expr = _a ctx popen_expr in
            let popen_override = self#override_flag ctx popen_override in
            let popen_loc = self#location ctx popen_loc in
            let popen_attributes = self#attributes ctx popen_attributes in
            { popen_expr; popen_override; popen_loc; popen_attributes }
    method open_description : 'ctx -> open_description -> open_description=
      self#open_infos self#longident_loc
    method open_declaration : 'ctx -> open_declaration -> open_declaration=
      self#open_infos self#module_expr
    method include_infos :
      'a . ('ctx -> 'a -> 'a) -> 'ctx -> 'a include_infos -> 'a include_infos=
      fun _a ->
        fun ctx ->
          fun { pincl_mod; pincl_loc; pincl_attributes } ->
            let pincl_mod = _a ctx pincl_mod in
            let pincl_loc = self#location ctx pincl_loc in
            let pincl_attributes = self#attributes ctx pincl_attributes in
            { pincl_mod; pincl_loc; pincl_attributes }
    method include_description :
      'ctx -> include_description -> include_description=
      self#include_infos self#module_type
    method include_declaration :
      'ctx -> include_declaration -> include_declaration=
      self#include_infos self#module_expr
    method with_constraint : 'ctx -> with_constraint -> with_constraint=
      fun ctx ->
        fun x ->
          match x with
          | Pwith_type (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#type_declaration ctx b in Pwith_type (a, b)
          | Pwith_module (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#longident_loc ctx b in Pwith_module (a, b)
          | Pwith_modtype (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#module_type ctx b in Pwith_modtype (a, b)
          | Pwith_modtypesubst (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#module_type ctx b in Pwith_modtypesubst (a, b)
          | Pwith_typesubst (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#type_declaration ctx b in Pwith_typesubst (a, b)
          | Pwith_modsubst (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#longident_loc ctx b in Pwith_modsubst (a, b)
    method module_expr : 'ctx -> module_expr -> module_expr=
      fun ctx ->
        fun { pmod_desc; pmod_loc; pmod_attributes } ->
          let pmod_desc = self#module_expr_desc ctx pmod_desc in
          let pmod_loc = self#location ctx pmod_loc in
          let pmod_attributes = self#attributes ctx pmod_attributes in
          { pmod_desc; pmod_loc; pmod_attributes }
    method module_expr_desc : 'ctx -> module_expr_desc -> module_expr_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pmod_ident a -> let a = self#longident_loc ctx a in Pmod_ident a
          | Pmod_structure a ->
              let a = self#structure ctx a in Pmod_structure a
          | Pmod_functor (a, b) ->
              let a = self#functor_parameter ctx a in
              let b = self#module_expr ctx b in Pmod_functor (a, b)
          | Pmod_apply (a, b) ->
              let a = self#module_expr ctx a in
              let b = self#module_expr ctx b in Pmod_apply (a, b)
          | Pmod_constraint (a, b) ->
              let a = self#module_expr ctx a in
              let b = self#module_type ctx b in Pmod_constraint (a, b)
          | Pmod_unpack a -> let a = self#expression ctx a in Pmod_unpack a
          | Pmod_extension a ->
              let a = self#extension ctx a in Pmod_extension a
    method structure : 'ctx -> structure -> structure=
      self#list self#structure_item
    method structure_item : 'ctx -> structure_item -> structure_item=
      fun ctx ->
        fun { pstr_desc; pstr_loc } ->
          let pstr_desc = self#structure_item_desc ctx pstr_desc in
          let pstr_loc = self#location ctx pstr_loc in
          { pstr_desc; pstr_loc }
    method structure_item_desc :
      'ctx -> structure_item_desc -> structure_item_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pstr_eval (a, b) ->
              let a = self#expression ctx a in
              let b = self#attributes ctx b in Pstr_eval (a, b)
          | Pstr_value (a, b) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#value_binding ctx b in Pstr_value (a, b)
          | Pstr_primitive a ->
              let a = self#value_description ctx a in Pstr_primitive a
          | Pstr_type (a, b) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#type_declaration ctx b in
              Pstr_type (a, b)
          | Pstr_typext a ->
              let a = self#type_extension ctx a in Pstr_typext a
          | Pstr_exception a ->
              let a = self#type_exception ctx a in Pstr_exception a
          | Pstr_module a ->
              let a = self#module_binding ctx a in Pstr_module a
          | Pstr_recmodule a ->
              let a = self#list self#module_binding ctx a in Pstr_recmodule a
          | Pstr_modtype a ->
              let a = self#module_type_declaration ctx a in Pstr_modtype a
          | Pstr_open a -> let a = self#open_declaration ctx a in Pstr_open a
          | Pstr_class a ->
              let a = self#list self#class_declaration ctx a in Pstr_class a
          | Pstr_class_type a ->
              let a = self#list self#class_type_declaration ctx a in
              Pstr_class_type a
          | Pstr_include a ->
              let a = self#include_declaration ctx a in Pstr_include a
          | Pstr_attribute a ->
              let a = self#attribute ctx a in Pstr_attribute a
          | Pstr_extension (a, b) ->
              let a = self#extension ctx a in
              let b = self#attributes ctx b in Pstr_extension (a, b)
    method value_binding : 'ctx -> value_binding -> value_binding=
      fun ctx ->
        fun { pvb_pat; pvb_expr; pvb_attributes; pvb_loc } ->
          let pvb_pat = self#pattern ctx pvb_pat in
          let pvb_expr = self#expression ctx pvb_expr in
          let pvb_attributes = self#attributes ctx pvb_attributes in
          let pvb_loc = self#location ctx pvb_loc in
          { pvb_pat; pvb_expr; pvb_attributes; pvb_loc }
    method module_binding : 'ctx -> module_binding -> module_binding=
      fun ctx ->
        fun { pmb_name; pmb_expr; pmb_attributes; pmb_loc } ->
          let pmb_name = self#loc (self#option self#string) ctx pmb_name in
          let pmb_expr = self#module_expr ctx pmb_expr in
          let pmb_attributes = self#attributes ctx pmb_attributes in
          let pmb_loc = self#location ctx pmb_loc in
          { pmb_name; pmb_expr; pmb_attributes; pmb_loc }
    method toplevel_phrase : 'ctx -> toplevel_phrase -> toplevel_phrase=
      fun ctx ->
        fun x ->
          match x with
          | Ptop_def a -> let a = self#structure ctx a in Ptop_def a
          | Ptop_dir a -> let a = self#toplevel_directive ctx a in Ptop_dir a
    method toplevel_directive :
      'ctx -> toplevel_directive -> toplevel_directive=
      fun ctx ->
        fun { pdir_name; pdir_arg; pdir_loc } ->
          let pdir_name = self#loc self#string ctx pdir_name in
          let pdir_arg = self#option self#directive_argument ctx pdir_arg in
          let pdir_loc = self#location ctx pdir_loc in
          { pdir_name; pdir_arg; pdir_loc }
    method directive_argument :
      'ctx -> directive_argument -> directive_argument=
      fun ctx ->
        fun { pdira_desc; pdira_loc } ->
          let pdira_desc = self#directive_argument_desc ctx pdira_desc in
          let pdira_loc = self#location ctx pdira_loc in
          { pdira_desc; pdira_loc }
    method directive_argument_desc :
      'ctx -> directive_argument_desc -> directive_argument_desc=
      fun ctx ->
        fun x ->
          match x with
          | Pdir_string a -> let a = self#string ctx a in Pdir_string a
          | Pdir_int (a, b) ->
              let a = self#string ctx a in
              let b = self#option self#char ctx b in Pdir_int (a, b)
          | Pdir_ident a -> let a = self#longident ctx a in Pdir_ident a
          | Pdir_bool a -> let a = self#bool ctx a in Pdir_bool a
    method cases : 'ctx -> cases -> cases= self#list self#case
  end
class virtual ['res] lift =
  object (self)
    method virtual  record : (string * 'res) list -> 'res
    method virtual  constr : string -> 'res list -> 'res
    method virtual  tuple : 'res list -> 'res
    method virtual  bool : bool -> 'res
    method virtual  char : char -> 'res
    method virtual  int : int -> 'res
    method virtual  list : 'a . ('a -> 'res) -> 'a list -> 'res
    method virtual  option : 'a . ('a -> 'res) -> 'a option -> 'res
    method virtual  string : string -> 'res
    method position : position -> 'res=
      fun { pos_fname; pos_lnum; pos_bol; pos_cnum } ->
        let pos_fname = self#string pos_fname in
        let pos_lnum = self#int pos_lnum in
        let pos_bol = self#int pos_bol in
        let pos_cnum = self#int pos_cnum in
        self#record
          [("pos_fname", pos_fname);
          ("pos_lnum", pos_lnum);
          ("pos_bol", pos_bol);
          ("pos_cnum", pos_cnum)]
    method location : location -> 'res=
      fun { loc_start; loc_end; loc_ghost } ->
        let loc_start = self#position loc_start in
        let loc_end = self#position loc_end in
        let loc_ghost = self#bool loc_ghost in
        self#record
          [("loc_start", loc_start);
          ("loc_end", loc_end);
          ("loc_ghost", loc_ghost)]
    method location_stack : location_stack -> 'res= self#list self#location
    method loc : 'a . ('a -> 'res) -> 'a loc -> 'res=
      fun _a ->
        fun { txt; loc } ->
          let txt = _a txt in
          let loc = self#location loc in
          self#record [("txt", txt); ("loc", loc)]
    method longident : longident -> 'res=
      fun x ->
        match x with
        | Lident a -> let a = self#string a in self#constr "Lident" [a]
        | Ldot (a, b) ->
            let a = self#longident a in
            let b = self#string b in self#constr "Ldot" [a; b]
        | Lapply (a, b) ->
            let a = self#longident a in
            let b = self#longident b in self#constr "Lapply" [a; b]
    method longident_loc : longident_loc -> 'res= self#loc self#longident
    method rec_flag : rec_flag -> 'res=
      fun x ->
        match x with
        | Nonrecursive -> self#constr "Nonrecursive" []
        | Recursive -> self#constr "Recursive" []
    method direction_flag : direction_flag -> 'res=
      fun x ->
        match x with
        | Upto -> self#constr "Upto" []
        | Downto -> self#constr "Downto" []
    method private_flag : private_flag -> 'res=
      fun x ->
        match x with
        | Private -> self#constr "Private" []
        | Public -> self#constr "Public" []
    method mutable_flag : mutable_flag -> 'res=
      fun x ->
        match x with
        | Immutable -> self#constr "Immutable" []
        | Mutable -> self#constr "Mutable" []
    method virtual_flag : virtual_flag -> 'res=
      fun x ->
        match x with
        | Virtual -> self#constr "Virtual" []
        | Concrete -> self#constr "Concrete" []
    method override_flag : override_flag -> 'res=
      fun x ->
        match x with
        | Override -> self#constr "Override" []
        | Fresh -> self#constr "Fresh" []
    method closed_flag : closed_flag -> 'res=
      fun x ->
        match x with
        | Closed -> self#constr "Closed" []
        | Open -> self#constr "Open" []
    method label : label -> 'res= self#string
    method arg_label : arg_label -> 'res=
      fun x ->
        match x with
        | Nolabel -> self#constr "Nolabel" []
        | Labelled a -> let a = self#string a in self#constr "Labelled" [a]
        | Optional a -> let a = self#string a in self#constr "Optional" [a]
    method variance : variance -> 'res=
      fun x ->
        match x with
        | Covariant -> self#constr "Covariant" []
        | Contravariant -> self#constr "Contravariant" []
        | NoVariance -> self#constr "NoVariance" []
    method injectivity : injectivity -> 'res=
      fun x ->
        match x with
        | Injective -> self#constr "Injective" []
        | NoInjectivity -> self#constr "NoInjectivity" []
    method constant : constant -> 'res=
      fun x ->
        match x with
        | Pconst_integer (a, b) ->
            let a = self#string a in
            let b = self#option self#char b in
            self#constr "Pconst_integer" [a; b]
        | Pconst_char a ->
            let a = self#char a in self#constr "Pconst_char" [a]
        | Pconst_string (a, b, c) ->
            let a = self#string a in
            let b = self#location b in
            let c = self#option self#string c in
            self#constr "Pconst_string" [a; b; c]
        | Pconst_float (a, b) ->
            let a = self#string a in
            let b = self#option self#char b in
            self#constr "Pconst_float" [a; b]
    method attribute : attribute -> 'res=
      fun { attr_name; attr_payload; attr_loc } ->
        let attr_name = self#loc self#string attr_name in
        let attr_payload = self#payload attr_payload in
        let attr_loc = self#location attr_loc in
        self#record
          [("attr_name", attr_name);
          ("attr_payload", attr_payload);
          ("attr_loc", attr_loc)]
    method extension : extension -> 'res=
      fun (a, b) ->
        let a = self#loc self#string a in
        let b = self#payload b in self#tuple [a; b]
    method attributes : attributes -> 'res= self#list self#attribute
    method payload : payload -> 'res=
      fun x ->
        match x with
        | PStr a -> let a = self#structure a in self#constr "PStr" [a]
        | PSig a -> let a = self#signature a in self#constr "PSig" [a]
        | PTyp a -> let a = self#core_type a in self#constr "PTyp" [a]
        | PPat (a, b) ->
            let a = self#pattern a in
            let b = self#option self#expression b in
            self#constr "PPat" [a; b]
    method core_type : core_type -> 'res=
      fun { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes } ->
        let ptyp_desc = self#core_type_desc ptyp_desc in
        let ptyp_loc = self#location ptyp_loc in
        let ptyp_loc_stack = self#location_stack ptyp_loc_stack in
        let ptyp_attributes = self#attributes ptyp_attributes in
        self#record
          [("ptyp_desc", ptyp_desc);
          ("ptyp_loc", ptyp_loc);
          ("ptyp_loc_stack", ptyp_loc_stack);
          ("ptyp_attributes", ptyp_attributes)]
    method core_type_desc : core_type_desc -> 'res=
      fun x ->
        match x with
        | Ptyp_any -> self#constr "Ptyp_any" []
        | Ptyp_var a -> let a = self#string a in self#constr "Ptyp_var" [a]
        | Ptyp_arrow (a, b, c) ->
            let a = self#arg_label a in
            let b = self#core_type b in
            let c = self#core_type c in self#constr "Ptyp_arrow" [a; b; c]
        | Ptyp_tuple a ->
            let a = self#list self#core_type a in
            self#constr "Ptyp_tuple" [a]
        | Ptyp_constr (a, b) ->
            let a = self#longident_loc a in
            let b = self#list self#core_type b in
            self#constr "Ptyp_constr" [a; b]
        | Ptyp_object (a, b) ->
            let a = self#list self#object_field a in
            let b = self#closed_flag b in self#constr "Ptyp_object" [a; b]
        | Ptyp_class (a, b) ->
            let a = self#longident_loc a in
            let b = self#list self#core_type b in
            self#constr "Ptyp_class" [a; b]
        | Ptyp_alias (a, b) ->
            let a = self#core_type a in
            let b = self#string b in self#constr "Ptyp_alias" [a; b]
        | Ptyp_variant (a, b, c) ->
            let a = self#list self#row_field a in
            let b = self#closed_flag b in
            let c = self#option (self#list self#label) c in
            self#constr "Ptyp_variant" [a; b; c]
        | Ptyp_poly (a, b) ->
            let a = self#list (self#loc self#string) a in
            let b = self#core_type b in self#constr "Ptyp_poly" [a; b]
        | Ptyp_package a ->
            let a = self#package_type a in self#constr "Ptyp_package" [a]
        | Ptyp_extension a ->
            let a = self#extension a in self#constr "Ptyp_extension" [a]
    method package_type : package_type -> 'res=
      fun (a, b) ->
        let a = self#longident_loc a in
        let b =
          self#list
            (fun (a, b) ->
               let a = self#longident_loc a in
               let b = self#core_type b in self#tuple [a; b]) b in
        self#tuple [a; b]
    method row_field : row_field -> 'res=
      fun { prf_desc; prf_loc; prf_attributes } ->
        let prf_desc = self#row_field_desc prf_desc in
        let prf_loc = self#location prf_loc in
        let prf_attributes = self#attributes prf_attributes in
        self#record
          [("prf_desc", prf_desc);
          ("prf_loc", prf_loc);
          ("prf_attributes", prf_attributes)]
    method row_field_desc : row_field_desc -> 'res=
      fun x ->
        match x with
        | Rtag (a, b, c) ->
            let a = self#loc self#label a in
            let b = self#bool b in
            let c = self#list self#core_type c in
            self#constr "Rtag" [a; b; c]
        | Rinherit a ->
            let a = self#core_type a in self#constr "Rinherit" [a]
    method object_field : object_field -> 'res=
      fun { pof_desc; pof_loc; pof_attributes } ->
        let pof_desc = self#object_field_desc pof_desc in
        let pof_loc = self#location pof_loc in
        let pof_attributes = self#attributes pof_attributes in
        self#record
          [("pof_desc", pof_desc);
          ("pof_loc", pof_loc);
          ("pof_attributes", pof_attributes)]
    method object_field_desc : object_field_desc -> 'res=
      fun x ->
        match x with
        | Otag (a, b) ->
            let a = self#loc self#label a in
            let b = self#core_type b in self#constr "Otag" [a; b]
        | Oinherit a ->
            let a = self#core_type a in self#constr "Oinherit" [a]
    method pattern : pattern -> 'res=
      fun { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes } ->
        let ppat_desc = self#pattern_desc ppat_desc in
        let ppat_loc = self#location ppat_loc in
        let ppat_loc_stack = self#location_stack ppat_loc_stack in
        let ppat_attributes = self#attributes ppat_attributes in
        self#record
          [("ppat_desc", ppat_desc);
          ("ppat_loc", ppat_loc);
          ("ppat_loc_stack", ppat_loc_stack);
          ("ppat_attributes", ppat_attributes)]
    method pattern_desc : pattern_desc -> 'res=
      fun x ->
        match x with
        | Ppat_any -> self#constr "Ppat_any" []
        | Ppat_var a ->
            let a = self#loc self#string a in self#constr "Ppat_var" [a]
        | Ppat_alias (a, b) ->
            let a = self#pattern a in
            let b = self#loc self#string b in self#constr "Ppat_alias" [a; b]
        | Ppat_constant a ->
            let a = self#constant a in self#constr "Ppat_constant" [a]
        | Ppat_interval (a, b) ->
            let a = self#constant a in
            let b = self#constant b in self#constr "Ppat_interval" [a; b]
        | Ppat_tuple a ->
            let a = self#list self#pattern a in self#constr "Ppat_tuple" [a]
        | Ppat_construct (a, b) ->
            let a = self#longident_loc a in
            let b =
              self#option
                (fun (a, b) ->
                   let a = self#list (self#loc self#string) a in
                   let b = self#pattern b in self#tuple [a; b]) b in
            self#constr "Ppat_construct" [a; b]
        | Ppat_variant (a, b) ->
            let a = self#label a in
            let b = self#option self#pattern b in
            self#constr "Ppat_variant" [a; b]
        | Ppat_record (a, b) ->
            let a =
              self#list
                (fun (a, b) ->
                   let a = self#longident_loc a in
                   let b = self#pattern b in self#tuple [a; b]) a in
            let b = self#closed_flag b in self#constr "Ppat_record" [a; b]
        | Ppat_array a ->
            let a = self#list self#pattern a in self#constr "Ppat_array" [a]
        | Ppat_or (a, b) ->
            let a = self#pattern a in
            let b = self#pattern b in self#constr "Ppat_or" [a; b]
        | Ppat_constraint (a, b) ->
            let a = self#pattern a in
            let b = self#core_type b in self#constr "Ppat_constraint" [a; b]
        | Ppat_type a ->
            let a = self#longident_loc a in self#constr "Ppat_type" [a]
        | Ppat_lazy a ->
            let a = self#pattern a in self#constr "Ppat_lazy" [a]
        | Ppat_unpack a ->
            let a = self#loc (self#option self#string) a in
            self#constr "Ppat_unpack" [a]
        | Ppat_exception a ->
            let a = self#pattern a in self#constr "Ppat_exception" [a]
        | Ppat_extension a ->
            let a = self#extension a in self#constr "Ppat_extension" [a]
        | Ppat_open (a, b) ->
            let a = self#longident_loc a in
            let b = self#pattern b in self#constr "Ppat_open" [a; b]
    method expression : expression -> 'res=
      fun { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes } ->
        let pexp_desc = self#expression_desc pexp_desc in
        let pexp_loc = self#location pexp_loc in
        let pexp_loc_stack = self#location_stack pexp_loc_stack in
        let pexp_attributes = self#attributes pexp_attributes in
        self#record
          [("pexp_desc", pexp_desc);
          ("pexp_loc", pexp_loc);
          ("pexp_loc_stack", pexp_loc_stack);
          ("pexp_attributes", pexp_attributes)]
    method expression_desc : expression_desc -> 'res=
      fun x ->
        match x with
        | Pexp_ident a ->
            let a = self#longident_loc a in self#constr "Pexp_ident" [a]
        | Pexp_constant a ->
            let a = self#constant a in self#constr "Pexp_constant" [a]
        | Pexp_let (a, b, c) ->
            let a = self#rec_flag a in
            let b = self#list self#value_binding b in
            let c = self#expression c in self#constr "Pexp_let" [a; b; c]
        | Pexp_function a ->
            let a = self#cases a in self#constr "Pexp_function" [a]
        | Pexp_fun (a, b, c, d) ->
            let a = self#arg_label a in
            let b = self#option self#expression b in
            let c = self#pattern c in
            let d = self#expression d in self#constr "Pexp_fun" [a; b; c; d]
        | Pexp_apply (a, b) ->
            let a = self#expression a in
            let b =
              self#list
                (fun (a, b) ->
                   let a = self#arg_label a in
                   let b = self#expression b in self#tuple [a; b]) b in
            self#constr "Pexp_apply" [a; b]
        | Pexp_match (a, b) ->
            let a = self#expression a in
            let b = self#cases b in self#constr "Pexp_match" [a; b]
        | Pexp_try (a, b) ->
            let a = self#expression a in
            let b = self#cases b in self#constr "Pexp_try" [a; b]
        | Pexp_tuple a ->
            let a = self#list self#expression a in
            self#constr "Pexp_tuple" [a]
        | Pexp_construct (a, b) ->
            let a = self#longident_loc a in
            let b = self#option self#expression b in
            self#constr "Pexp_construct" [a; b]
        | Pexp_variant (a, b) ->
            let a = self#label a in
            let b = self#option self#expression b in
            self#constr "Pexp_variant" [a; b]
        | Pexp_record (a, b) ->
            let a =
              self#list
                (fun (a, b) ->
                   let a = self#longident_loc a in
                   let b = self#expression b in self#tuple [a; b]) a in
            let b = self#option self#expression b in
            self#constr "Pexp_record" [a; b]
        | Pexp_field (a, b) ->
            let a = self#expression a in
            let b = self#longident_loc b in self#constr "Pexp_field" [a; b]
        | Pexp_setfield (a, b, c) ->
            let a = self#expression a in
            let b = self#longident_loc b in
            let c = self#expression c in
            self#constr "Pexp_setfield" [a; b; c]
        | Pexp_array a ->
            let a = self#list self#expression a in
            self#constr "Pexp_array" [a]
        | Pexp_ifthenelse (a, b, c) ->
            let a = self#expression a in
            let b = self#expression b in
            let c = self#option self#expression c in
            self#constr "Pexp_ifthenelse" [a; b; c]
        | Pexp_sequence (a, b) ->
            let a = self#expression a in
            let b = self#expression b in self#constr "Pexp_sequence" [a; b]
        | Pexp_while (a, b) ->
            let a = self#expression a in
            let b = self#expression b in self#constr "Pexp_while" [a; b]
        | Pexp_for (a, b, c, d, e) ->
            let a = self#pattern a in
            let b = self#expression b in
            let c = self#expression c in
            let d = self#direction_flag d in
            let e = self#expression e in
            self#constr "Pexp_for" [a; b; c; d; e]
        | Pexp_constraint (a, b) ->
            let a = self#expression a in
            let b = self#core_type b in self#constr "Pexp_constraint" [a; b]
        | Pexp_coerce (a, b, c) ->
            let a = self#expression a in
            let b = self#option self#core_type b in
            let c = self#core_type c in self#constr "Pexp_coerce" [a; b; c]
        | Pexp_send (a, b) ->
            let a = self#expression a in
            let b = self#loc self#label b in self#constr "Pexp_send" [a; b]
        | Pexp_new a ->
            let a = self#longident_loc a in self#constr "Pexp_new" [a]
        | Pexp_setinstvar (a, b) ->
            let a = self#loc self#label a in
            let b = self#expression b in self#constr "Pexp_setinstvar" [a; b]
        | Pexp_override a ->
            let a =
              self#list
                (fun (a, b) ->
                   let a = self#loc self#label a in
                   let b = self#expression b in self#tuple [a; b]) a in
            self#constr "Pexp_override" [a]
        | Pexp_letmodule (a, b, c) ->
            let a = self#loc (self#option self#string) a in
            let b = self#module_expr b in
            let c = self#expression c in
            self#constr "Pexp_letmodule" [a; b; c]
        | Pexp_letexception (a, b) ->
            let a = self#extension_constructor a in
            let b = self#expression b in
            self#constr "Pexp_letexception" [a; b]
        | Pexp_assert a ->
            let a = self#expression a in self#constr "Pexp_assert" [a]
        | Pexp_lazy a ->
            let a = self#expression a in self#constr "Pexp_lazy" [a]
        | Pexp_poly (a, b) ->
            let a = self#expression a in
            let b = self#option self#core_type b in
            self#constr "Pexp_poly" [a; b]
        | Pexp_object a ->
            let a = self#class_structure a in self#constr "Pexp_object" [a]
        | Pexp_newtype (a, b) ->
            let a = self#loc self#string a in
            let b = self#expression b in self#constr "Pexp_newtype" [a; b]
        | Pexp_pack a ->
            let a = self#module_expr a in self#constr "Pexp_pack" [a]
        | Pexp_open (a, b) ->
            let a = self#open_declaration a in
            let b = self#expression b in self#constr "Pexp_open" [a; b]
        | Pexp_letop a ->
            let a = self#letop a in self#constr "Pexp_letop" [a]
        | Pexp_extension a ->
            let a = self#extension a in self#constr "Pexp_extension" [a]
        | Pexp_unreachable -> self#constr "Pexp_unreachable" []
    method case : case -> 'res=
      fun { pc_lhs; pc_guard; pc_rhs } ->
        let pc_lhs = self#pattern pc_lhs in
        let pc_guard = self#option self#expression pc_guard in
        let pc_rhs = self#expression pc_rhs in
        self#record
          [("pc_lhs", pc_lhs); ("pc_guard", pc_guard); ("pc_rhs", pc_rhs)]
    method letop : letop -> 'res=
      fun { let_; ands; body } ->
        let let_ = self#binding_op let_ in
        let ands = self#list self#binding_op ands in
        let body = self#expression body in
        self#record [("let_", let_); ("ands", ands); ("body", body)]
    method binding_op : binding_op -> 'res=
      fun { pbop_op; pbop_pat; pbop_exp; pbop_loc } ->
        let pbop_op = self#loc self#string pbop_op in
        let pbop_pat = self#pattern pbop_pat in
        let pbop_exp = self#expression pbop_exp in
        let pbop_loc = self#location pbop_loc in
        self#record
          [("pbop_op", pbop_op);
          ("pbop_pat", pbop_pat);
          ("pbop_exp", pbop_exp);
          ("pbop_loc", pbop_loc)]
    method value_description : value_description -> 'res=
      fun { pval_name; pval_type; pval_prim; pval_attributes; pval_loc } ->
        let pval_name = self#loc self#string pval_name in
        let pval_type = self#core_type pval_type in
        let pval_prim = self#list self#string pval_prim in
        let pval_attributes = self#attributes pval_attributes in
        let pval_loc = self#location pval_loc in
        self#record
          [("pval_name", pval_name);
          ("pval_type", pval_type);
          ("pval_prim", pval_prim);
          ("pval_attributes", pval_attributes);
          ("pval_loc", pval_loc)]
    method type_declaration : type_declaration -> 'res=
      fun
        { ptype_name; ptype_params; ptype_cstrs; ptype_kind; ptype_private;
          ptype_manifest; ptype_attributes; ptype_loc }
        ->
        let ptype_name = self#loc self#string ptype_name in
        let ptype_params =
          self#list
            (fun (a, b) ->
               let a = self#core_type a in
               let b =
                 (fun (a, b) ->
                    let a = self#variance a in
                    let b = self#injectivity b in self#tuple [a; b]) b in
               self#tuple [a; b]) ptype_params in
        let ptype_cstrs =
          self#list
            (fun (a, b, c) ->
               let a = self#core_type a in
               let b = self#core_type b in
               let c = self#location c in self#tuple [a; b; c]) ptype_cstrs in
        let ptype_kind = self#type_kind ptype_kind in
        let ptype_private = self#private_flag ptype_private in
        let ptype_manifest = self#option self#core_type ptype_manifest in
        let ptype_attributes = self#attributes ptype_attributes in
        let ptype_loc = self#location ptype_loc in
        self#record
          [("ptype_name", ptype_name);
          ("ptype_params", ptype_params);
          ("ptype_cstrs", ptype_cstrs);
          ("ptype_kind", ptype_kind);
          ("ptype_private", ptype_private);
          ("ptype_manifest", ptype_manifest);
          ("ptype_attributes", ptype_attributes);
          ("ptype_loc", ptype_loc)]
    method type_kind : type_kind -> 'res=
      fun x ->
        match x with
        | Ptype_abstract -> self#constr "Ptype_abstract" []
        | Ptype_variant a ->
            let a = self#list self#constructor_declaration a in
            self#constr "Ptype_variant" [a]
        | Ptype_record a ->
            let a = self#list self#label_declaration a in
            self#constr "Ptype_record" [a]
        | Ptype_open -> self#constr "Ptype_open" []
    method label_declaration : label_declaration -> 'res=
      fun { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes } ->
        let pld_name = self#loc self#string pld_name in
        let pld_mutable = self#mutable_flag pld_mutable in
        let pld_type = self#core_type pld_type in
        let pld_loc = self#location pld_loc in
        let pld_attributes = self#attributes pld_attributes in
        self#record
          [("pld_name", pld_name);
          ("pld_mutable", pld_mutable);
          ("pld_type", pld_type);
          ("pld_loc", pld_loc);
          ("pld_attributes", pld_attributes)]
    method constructor_declaration : constructor_declaration -> 'res=
      fun { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
        ->
        let pcd_name = self#loc self#string pcd_name in
        let pcd_vars = self#list (self#loc self#string) pcd_vars in
        let pcd_args = self#constructor_arguments pcd_args in
        let pcd_res = self#option self#core_type pcd_res in
        let pcd_loc = self#location pcd_loc in
        let pcd_attributes = self#attributes pcd_attributes in
        self#record
          [("pcd_name", pcd_name);
          ("pcd_vars", pcd_vars);
          ("pcd_args", pcd_args);
          ("pcd_res", pcd_res);
          ("pcd_loc", pcd_loc);
          ("pcd_attributes", pcd_attributes)]
    method constructor_arguments : constructor_arguments -> 'res=
      fun x ->
        match x with
        | Pcstr_tuple a ->
            let a = self#list self#core_type a in
            self#constr "Pcstr_tuple" [a]
        | Pcstr_record a ->
            let a = self#list self#label_declaration a in
            self#constr "Pcstr_record" [a]
    method type_extension : type_extension -> 'res=
      fun
        { ptyext_path; ptyext_params; ptyext_constructors; ptyext_private;
          ptyext_loc; ptyext_attributes }
        ->
        let ptyext_path = self#longident_loc ptyext_path in
        let ptyext_params =
          self#list
            (fun (a, b) ->
               let a = self#core_type a in
               let b =
                 (fun (a, b) ->
                    let a = self#variance a in
                    let b = self#injectivity b in self#tuple [a; b]) b in
               self#tuple [a; b]) ptyext_params in
        let ptyext_constructors =
          self#list self#extension_constructor ptyext_constructors in
        let ptyext_private = self#private_flag ptyext_private in
        let ptyext_loc = self#location ptyext_loc in
        let ptyext_attributes = self#attributes ptyext_attributes in
        self#record
          [("ptyext_path", ptyext_path);
          ("ptyext_params", ptyext_params);
          ("ptyext_constructors", ptyext_constructors);
          ("ptyext_private", ptyext_private);
          ("ptyext_loc", ptyext_loc);
          ("ptyext_attributes", ptyext_attributes)]
    method extension_constructor : extension_constructor -> 'res=
      fun { pext_name; pext_kind; pext_loc; pext_attributes } ->
        let pext_name = self#loc self#string pext_name in
        let pext_kind = self#extension_constructor_kind pext_kind in
        let pext_loc = self#location pext_loc in
        let pext_attributes = self#attributes pext_attributes in
        self#record
          [("pext_name", pext_name);
          ("pext_kind", pext_kind);
          ("pext_loc", pext_loc);
          ("pext_attributes", pext_attributes)]
    method type_exception : type_exception -> 'res=
      fun { ptyexn_constructor; ptyexn_loc; ptyexn_attributes } ->
        let ptyexn_constructor =
          self#extension_constructor ptyexn_constructor in
        let ptyexn_loc = self#location ptyexn_loc in
        let ptyexn_attributes = self#attributes ptyexn_attributes in
        self#record
          [("ptyexn_constructor", ptyexn_constructor);
          ("ptyexn_loc", ptyexn_loc);
          ("ptyexn_attributes", ptyexn_attributes)]
    method extension_constructor_kind : extension_constructor_kind -> 'res=
      fun x ->
        match x with
        | Pext_decl (a, b, c) ->
            let a = self#list (self#loc self#string) a in
            let b = self#constructor_arguments b in
            let c = self#option self#core_type c in
            self#constr "Pext_decl" [a; b; c]
        | Pext_rebind a ->
            let a = self#longident_loc a in self#constr "Pext_rebind" [a]
    method class_type : class_type -> 'res=
      fun { pcty_desc; pcty_loc; pcty_attributes } ->
        let pcty_desc = self#class_type_desc pcty_desc in
        let pcty_loc = self#location pcty_loc in
        let pcty_attributes = self#attributes pcty_attributes in
        self#record
          [("pcty_desc", pcty_desc);
          ("pcty_loc", pcty_loc);
          ("pcty_attributes", pcty_attributes)]
    method class_type_desc : class_type_desc -> 'res=
      fun x ->
        match x with
        | Pcty_constr (a, b) ->
            let a = self#longident_loc a in
            let b = self#list self#core_type b in
            self#constr "Pcty_constr" [a; b]
        | Pcty_signature a ->
            let a = self#class_signature a in
            self#constr "Pcty_signature" [a]
        | Pcty_arrow (a, b, c) ->
            let a = self#arg_label a in
            let b = self#core_type b in
            let c = self#class_type c in self#constr "Pcty_arrow" [a; b; c]
        | Pcty_extension a ->
            let a = self#extension a in self#constr "Pcty_extension" [a]
        | Pcty_open (a, b) ->
            let a = self#open_description a in
            let b = self#class_type b in self#constr "Pcty_open" [a; b]
    method class_signature : class_signature -> 'res=
      fun { pcsig_self; pcsig_fields } ->
        let pcsig_self = self#core_type pcsig_self in
        let pcsig_fields = self#list self#class_type_field pcsig_fields in
        self#record
          [("pcsig_self", pcsig_self); ("pcsig_fields", pcsig_fields)]
    method class_type_field : class_type_field -> 'res=
      fun { pctf_desc; pctf_loc; pctf_attributes } ->
        let pctf_desc = self#class_type_field_desc pctf_desc in
        let pctf_loc = self#location pctf_loc in
        let pctf_attributes = self#attributes pctf_attributes in
        self#record
          [("pctf_desc", pctf_desc);
          ("pctf_loc", pctf_loc);
          ("pctf_attributes", pctf_attributes)]
    method class_type_field_desc : class_type_field_desc -> 'res=
      fun x ->
        match x with
        | Pctf_inherit a ->
            let a = self#class_type a in self#constr "Pctf_inherit" [a]
        | Pctf_val a ->
            let a =
              (fun (a, b, c, d) ->
                 let a = self#loc self#label a in
                 let b = self#mutable_flag b in
                 let c = self#virtual_flag c in
                 let d = self#core_type d in self#tuple [a; b; c; d]) a in
            self#constr "Pctf_val" [a]
        | Pctf_method a ->
            let a =
              (fun (a, b, c, d) ->
                 let a = self#loc self#label a in
                 let b = self#private_flag b in
                 let c = self#virtual_flag c in
                 let d = self#core_type d in self#tuple [a; b; c; d]) a in
            self#constr "Pctf_method" [a]
        | Pctf_constraint a ->
            let a =
              (fun (a, b) ->
                 let a = self#core_type a in
                 let b = self#core_type b in self#tuple [a; b]) a in
            self#constr "Pctf_constraint" [a]
        | Pctf_attribute a ->
            let a = self#attribute a in self#constr "Pctf_attribute" [a]
        | Pctf_extension a ->
            let a = self#extension a in self#constr "Pctf_extension" [a]
    method class_infos : 'a . ('a -> 'res) -> 'a class_infos -> 'res=
      fun _a ->
        fun
          { pci_virt; pci_params; pci_name; pci_expr; pci_loc; pci_attributes
            }
          ->
          let pci_virt = self#virtual_flag pci_virt in
          let pci_params =
            self#list
              (fun (a, b) ->
                 let a = self#core_type a in
                 let b =
                   (fun (a, b) ->
                      let a = self#variance a in
                      let b = self#injectivity b in self#tuple [a; b]) b in
                 self#tuple [a; b]) pci_params in
          let pci_name = self#loc self#string pci_name in
          let pci_expr = _a pci_expr in
          let pci_loc = self#location pci_loc in
          let pci_attributes = self#attributes pci_attributes in
          self#record
            [("pci_virt", pci_virt);
            ("pci_params", pci_params);
            ("pci_name", pci_name);
            ("pci_expr", pci_expr);
            ("pci_loc", pci_loc);
            ("pci_attributes", pci_attributes)]
    method class_description : class_description -> 'res=
      self#class_infos self#class_type
    method class_type_declaration : class_type_declaration -> 'res=
      self#class_infos self#class_type
    method class_expr : class_expr -> 'res=
      fun { pcl_desc; pcl_loc; pcl_attributes } ->
        let pcl_desc = self#class_expr_desc pcl_desc in
        let pcl_loc = self#location pcl_loc in
        let pcl_attributes = self#attributes pcl_attributes in
        self#record
          [("pcl_desc", pcl_desc);
          ("pcl_loc", pcl_loc);
          ("pcl_attributes", pcl_attributes)]
    method class_expr_desc : class_expr_desc -> 'res=
      fun x ->
        match x with
        | Pcl_constr (a, b) ->
            let a = self#longident_loc a in
            let b = self#list self#core_type b in
            self#constr "Pcl_constr" [a; b]
        | Pcl_structure a ->
            let a = self#class_structure a in self#constr "Pcl_structure" [a]
        | Pcl_fun (a, b, c, d) ->
            let a = self#arg_label a in
            let b = self#option self#expression b in
            let c = self#pattern c in
            let d = self#class_expr d in self#constr "Pcl_fun" [a; b; c; d]
        | Pcl_apply (a, b) ->
            let a = self#class_expr a in
            let b =
              self#list
                (fun (a, b) ->
                   let a = self#arg_label a in
                   let b = self#expression b in self#tuple [a; b]) b in
            self#constr "Pcl_apply" [a; b]
        | Pcl_let (a, b, c) ->
            let a = self#rec_flag a in
            let b = self#list self#value_binding b in
            let c = self#class_expr c in self#constr "Pcl_let" [a; b; c]
        | Pcl_constraint (a, b) ->
            let a = self#class_expr a in
            let b = self#class_type b in self#constr "Pcl_constraint" [a; b]
        | Pcl_extension a ->
            let a = self#extension a in self#constr "Pcl_extension" [a]
        | Pcl_open (a, b) ->
            let a = self#open_description a in
            let b = self#class_expr b in self#constr "Pcl_open" [a; b]
    method class_structure : class_structure -> 'res=
      fun { pcstr_self; pcstr_fields } ->
        let pcstr_self = self#pattern pcstr_self in
        let pcstr_fields = self#list self#class_field pcstr_fields in
        self#record
          [("pcstr_self", pcstr_self); ("pcstr_fields", pcstr_fields)]
    method class_field : class_field -> 'res=
      fun { pcf_desc; pcf_loc; pcf_attributes } ->
        let pcf_desc = self#class_field_desc pcf_desc in
        let pcf_loc = self#location pcf_loc in
        let pcf_attributes = self#attributes pcf_attributes in
        self#record
          [("pcf_desc", pcf_desc);
          ("pcf_loc", pcf_loc);
          ("pcf_attributes", pcf_attributes)]
    method class_field_desc : class_field_desc -> 'res=
      fun x ->
        match x with
        | Pcf_inherit (a, b, c) ->
            let a = self#override_flag a in
            let b = self#class_expr b in
            let c = self#option (self#loc self#string) c in
            self#constr "Pcf_inherit" [a; b; c]
        | Pcf_val a ->
            let a =
              (fun (a, b, c) ->
                 let a = self#loc self#label a in
                 let b = self#mutable_flag b in
                 let c = self#class_field_kind c in self#tuple [a; b; c]) a in
            self#constr "Pcf_val" [a]
        | Pcf_method a ->
            let a =
              (fun (a, b, c) ->
                 let a = self#loc self#label a in
                 let b = self#private_flag b in
                 let c = self#class_field_kind c in self#tuple [a; b; c]) a in
            self#constr "Pcf_method" [a]
        | Pcf_constraint a ->
            let a =
              (fun (a, b) ->
                 let a = self#core_type a in
                 let b = self#core_type b in self#tuple [a; b]) a in
            self#constr "Pcf_constraint" [a]
        | Pcf_initializer a ->
            let a = self#expression a in self#constr "Pcf_initializer" [a]
        | Pcf_attribute a ->
            let a = self#attribute a in self#constr "Pcf_attribute" [a]
        | Pcf_extension a ->
            let a = self#extension a in self#constr "Pcf_extension" [a]
    method class_field_kind : class_field_kind -> 'res=
      fun x ->
        match x with
        | Cfk_virtual a ->
            let a = self#core_type a in self#constr "Cfk_virtual" [a]
        | Cfk_concrete (a, b) ->
            let a = self#override_flag a in
            let b = self#expression b in self#constr "Cfk_concrete" [a; b]
    method class_declaration : class_declaration -> 'res=
      self#class_infos self#class_expr
    method module_type : module_type -> 'res=
      fun { pmty_desc; pmty_loc; pmty_attributes } ->
        let pmty_desc = self#module_type_desc pmty_desc in
        let pmty_loc = self#location pmty_loc in
        let pmty_attributes = self#attributes pmty_attributes in
        self#record
          [("pmty_desc", pmty_desc);
          ("pmty_loc", pmty_loc);
          ("pmty_attributes", pmty_attributes)]
    method module_type_desc : module_type_desc -> 'res=
      fun x ->
        match x with
        | Pmty_ident a ->
            let a = self#longident_loc a in self#constr "Pmty_ident" [a]
        | Pmty_signature a ->
            let a = self#signature a in self#constr "Pmty_signature" [a]
        | Pmty_functor (a, b) ->
            let a = self#functor_parameter a in
            let b = self#module_type b in self#constr "Pmty_functor" [a; b]
        | Pmty_with (a, b) ->
            let a = self#module_type a in
            let b = self#list self#with_constraint b in
            self#constr "Pmty_with" [a; b]
        | Pmty_typeof a ->
            let a = self#module_expr a in self#constr "Pmty_typeof" [a]
        | Pmty_extension a ->
            let a = self#extension a in self#constr "Pmty_extension" [a]
        | Pmty_alias a ->
            let a = self#longident_loc a in self#constr "Pmty_alias" [a]
    method functor_parameter : functor_parameter -> 'res=
      fun x ->
        match x with
        | Unit -> self#constr "Unit" []
        | Named (a, b) ->
            let a = self#loc (self#option self#string) a in
            let b = self#module_type b in self#constr "Named" [a; b]
    method signature : signature -> 'res= self#list self#signature_item
    method signature_item : signature_item -> 'res=
      fun { psig_desc; psig_loc } ->
        let psig_desc = self#signature_item_desc psig_desc in
        let psig_loc = self#location psig_loc in
        self#record [("psig_desc", psig_desc); ("psig_loc", psig_loc)]
    method signature_item_desc : signature_item_desc -> 'res=
      fun x ->
        match x with
        | Psig_value a ->
            let a = self#value_description a in self#constr "Psig_value" [a]
        | Psig_type (a, b) ->
            let a = self#rec_flag a in
            let b = self#list self#type_declaration b in
            self#constr "Psig_type" [a; b]
        | Psig_typesubst a ->
            let a = self#list self#type_declaration a in
            self#constr "Psig_typesubst" [a]
        | Psig_typext a ->
            let a = self#type_extension a in self#constr "Psig_typext" [a]
        | Psig_exception a ->
            let a = self#type_exception a in self#constr "Psig_exception" [a]
        | Psig_module a ->
            let a = self#module_declaration a in
            self#constr "Psig_module" [a]
        | Psig_modsubst a ->
            let a = self#module_substitution a in
            self#constr "Psig_modsubst" [a]
        | Psig_recmodule a ->
            let a = self#list self#module_declaration a in
            self#constr "Psig_recmodule" [a]
        | Psig_modtype a ->
            let a = self#module_type_declaration a in
            self#constr "Psig_modtype" [a]
        | Psig_modtypesubst a ->
            let a = self#module_type_declaration a in
            self#constr "Psig_modtypesubst" [a]
        | Psig_open a ->
            let a = self#open_description a in self#constr "Psig_open" [a]
        | Psig_include a ->
            let a = self#include_description a in
            self#constr "Psig_include" [a]
        | Psig_class a ->
            let a = self#list self#class_description a in
            self#constr "Psig_class" [a]
        | Psig_class_type a ->
            let a = self#list self#class_type_declaration a in
            self#constr "Psig_class_type" [a]
        | Psig_attribute a ->
            let a = self#attribute a in self#constr "Psig_attribute" [a]
        | Psig_extension (a, b) ->
            let a = self#extension a in
            let b = self#attributes b in self#constr "Psig_extension" [a; b]
    method module_declaration : module_declaration -> 'res=
      fun { pmd_name; pmd_type; pmd_attributes; pmd_loc } ->
        let pmd_name = self#loc (self#option self#string) pmd_name in
        let pmd_type = self#module_type pmd_type in
        let pmd_attributes = self#attributes pmd_attributes in
        let pmd_loc = self#location pmd_loc in
        self#record
          [("pmd_name", pmd_name);
          ("pmd_type", pmd_type);
          ("pmd_attributes", pmd_attributes);
          ("pmd_loc", pmd_loc)]
    method module_substitution : module_substitution -> 'res=
      fun { pms_name; pms_manifest; pms_attributes; pms_loc } ->
        let pms_name = self#loc self#string pms_name in
        let pms_manifest = self#longident_loc pms_manifest in
        let pms_attributes = self#attributes pms_attributes in
        let pms_loc = self#location pms_loc in
        self#record
          [("pms_name", pms_name);
          ("pms_manifest", pms_manifest);
          ("pms_attributes", pms_attributes);
          ("pms_loc", pms_loc)]
    method module_type_declaration : module_type_declaration -> 'res=
      fun { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc } ->
        let pmtd_name = self#loc self#string pmtd_name in
        let pmtd_type = self#option self#module_type pmtd_type in
        let pmtd_attributes = self#attributes pmtd_attributes in
        let pmtd_loc = self#location pmtd_loc in
        self#record
          [("pmtd_name", pmtd_name);
          ("pmtd_type", pmtd_type);
          ("pmtd_attributes", pmtd_attributes);
          ("pmtd_loc", pmtd_loc)]
    method open_infos : 'a . ('a -> 'res) -> 'a open_infos -> 'res=
      fun _a ->
        fun { popen_expr; popen_override; popen_loc; popen_attributes } ->
          let popen_expr = _a popen_expr in
          let popen_override = self#override_flag popen_override in
          let popen_loc = self#location popen_loc in
          let popen_attributes = self#attributes popen_attributes in
          self#record
            [("popen_expr", popen_expr);
            ("popen_override", popen_override);
            ("popen_loc", popen_loc);
            ("popen_attributes", popen_attributes)]
    method open_description : open_description -> 'res=
      self#open_infos self#longident_loc
    method open_declaration : open_declaration -> 'res=
      self#open_infos self#module_expr
    method include_infos : 'a . ('a -> 'res) -> 'a include_infos -> 'res=
      fun _a ->
        fun { pincl_mod; pincl_loc; pincl_attributes } ->
          let pincl_mod = _a pincl_mod in
          let pincl_loc = self#location pincl_loc in
          let pincl_attributes = self#attributes pincl_attributes in
          self#record
            [("pincl_mod", pincl_mod);
            ("pincl_loc", pincl_loc);
            ("pincl_attributes", pincl_attributes)]
    method include_description : include_description -> 'res=
      self#include_infos self#module_type
    method include_declaration : include_declaration -> 'res=
      self#include_infos self#module_expr
    method with_constraint : with_constraint -> 'res=
      fun x ->
        match x with
        | Pwith_type (a, b) ->
            let a = self#longident_loc a in
            let b = self#type_declaration b in
            self#constr "Pwith_type" [a; b]
        | Pwith_module (a, b) ->
            let a = self#longident_loc a in
            let b = self#longident_loc b in self#constr "Pwith_module" [a; b]
        | Pwith_modtype (a, b) ->
            let a = self#longident_loc a in
            let b = self#module_type b in self#constr "Pwith_modtype" [a; b]
        | Pwith_modtypesubst (a, b) ->
            let a = self#longident_loc a in
            let b = self#module_type b in
            self#constr "Pwith_modtypesubst" [a; b]
        | Pwith_typesubst (a, b) ->
            let a = self#longident_loc a in
            let b = self#type_declaration b in
            self#constr "Pwith_typesubst" [a; b]
        | Pwith_modsubst (a, b) ->
            let a = self#longident_loc a in
            let b = self#longident_loc b in
            self#constr "Pwith_modsubst" [a; b]
    method module_expr : module_expr -> 'res=
      fun { pmod_desc; pmod_loc; pmod_attributes } ->
        let pmod_desc = self#module_expr_desc pmod_desc in
        let pmod_loc = self#location pmod_loc in
        let pmod_attributes = self#attributes pmod_attributes in
        self#record
          [("pmod_desc", pmod_desc);
          ("pmod_loc", pmod_loc);
          ("pmod_attributes", pmod_attributes)]
    method module_expr_desc : module_expr_desc -> 'res=
      fun x ->
        match x with
        | Pmod_ident a ->
            let a = self#longident_loc a in self#constr "Pmod_ident" [a]
        | Pmod_structure a ->
            let a = self#structure a in self#constr "Pmod_structure" [a]
        | Pmod_functor (a, b) ->
            let a = self#functor_parameter a in
            let b = self#module_expr b in self#constr "Pmod_functor" [a; b]
        | Pmod_apply (a, b) ->
            let a = self#module_expr a in
            let b = self#module_expr b in self#constr "Pmod_apply" [a; b]
        | Pmod_constraint (a, b) ->
            let a = self#module_expr a in
            let b = self#module_type b in
            self#constr "Pmod_constraint" [a; b]
        | Pmod_unpack a ->
            let a = self#expression a in self#constr "Pmod_unpack" [a]
        | Pmod_extension a ->
            let a = self#extension a in self#constr "Pmod_extension" [a]
    method structure : structure -> 'res= self#list self#structure_item
    method structure_item : structure_item -> 'res=
      fun { pstr_desc; pstr_loc } ->
        let pstr_desc = self#structure_item_desc pstr_desc in
        let pstr_loc = self#location pstr_loc in
        self#record [("pstr_desc", pstr_desc); ("pstr_loc", pstr_loc)]
    method structure_item_desc : structure_item_desc -> 'res=
      fun x ->
        match x with
        | Pstr_eval (a, b) ->
            let a = self#expression a in
            let b = self#attributes b in self#constr "Pstr_eval" [a; b]
        | Pstr_value (a, b) ->
            let a = self#rec_flag a in
            let b = self#list self#value_binding b in
            self#constr "Pstr_value" [a; b]
        | Pstr_primitive a ->
            let a = self#value_description a in
            self#constr "Pstr_primitive" [a]
        | Pstr_type (a, b) ->
            let a = self#rec_flag a in
            let b = self#list self#type_declaration b in
            self#constr "Pstr_type" [a; b]
        | Pstr_typext a ->
            let a = self#type_extension a in self#constr "Pstr_typext" [a]
        | Pstr_exception a ->
            let a = self#type_exception a in self#constr "Pstr_exception" [a]
        | Pstr_module a ->
            let a = self#module_binding a in self#constr "Pstr_module" [a]
        | Pstr_recmodule a ->
            let a = self#list self#module_binding a in
            self#constr "Pstr_recmodule" [a]
        | Pstr_modtype a ->
            let a = self#module_type_declaration a in
            self#constr "Pstr_modtype" [a]
        | Pstr_open a ->
            let a = self#open_declaration a in self#constr "Pstr_open" [a]
        | Pstr_class a ->
            let a = self#list self#class_declaration a in
            self#constr "Pstr_class" [a]
        | Pstr_class_type a ->
            let a = self#list self#class_type_declaration a in
            self#constr "Pstr_class_type" [a]
        | Pstr_include a ->
            let a = self#include_declaration a in
            self#constr "Pstr_include" [a]
        | Pstr_attribute a ->
            let a = self#attribute a in self#constr "Pstr_attribute" [a]
        | Pstr_extension (a, b) ->
            let a = self#extension a in
            let b = self#attributes b in self#constr "Pstr_extension" [a; b]
    method value_binding : value_binding -> 'res=
      fun { pvb_pat; pvb_expr; pvb_attributes; pvb_loc } ->
        let pvb_pat = self#pattern pvb_pat in
        let pvb_expr = self#expression pvb_expr in
        let pvb_attributes = self#attributes pvb_attributes in
        let pvb_loc = self#location pvb_loc in
        self#record
          [("pvb_pat", pvb_pat);
          ("pvb_expr", pvb_expr);
          ("pvb_attributes", pvb_attributes);
          ("pvb_loc", pvb_loc)]
    method module_binding : module_binding -> 'res=
      fun { pmb_name; pmb_expr; pmb_attributes; pmb_loc } ->
        let pmb_name = self#loc (self#option self#string) pmb_name in
        let pmb_expr = self#module_expr pmb_expr in
        let pmb_attributes = self#attributes pmb_attributes in
        let pmb_loc = self#location pmb_loc in
        self#record
          [("pmb_name", pmb_name);
          ("pmb_expr", pmb_expr);
          ("pmb_attributes", pmb_attributes);
          ("pmb_loc", pmb_loc)]
    method toplevel_phrase : toplevel_phrase -> 'res=
      fun x ->
        match x with
        | Ptop_def a ->
            let a = self#structure a in self#constr "Ptop_def" [a]
        | Ptop_dir a ->
            let a = self#toplevel_directive a in self#constr "Ptop_dir" [a]
    method toplevel_directive : toplevel_directive -> 'res=
      fun { pdir_name; pdir_arg; pdir_loc } ->
        let pdir_name = self#loc self#string pdir_name in
        let pdir_arg = self#option self#directive_argument pdir_arg in
        let pdir_loc = self#location pdir_loc in
        self#record
          [("pdir_name", pdir_name);
          ("pdir_arg", pdir_arg);
          ("pdir_loc", pdir_loc)]
    method directive_argument : directive_argument -> 'res=
      fun { pdira_desc; pdira_loc } ->
        let pdira_desc = self#directive_argument_desc pdira_desc in
        let pdira_loc = self#location pdira_loc in
        self#record [("pdira_desc", pdira_desc); ("pdira_loc", pdira_loc)]
    method directive_argument_desc : directive_argument_desc -> 'res=
      fun x ->
        match x with
        | Pdir_string a ->
            let a = self#string a in self#constr "Pdir_string" [a]
        | Pdir_int (a, b) ->
            let a = self#string a in
            let b = self#option self#char b in self#constr "Pdir_int" [a; b]
        | Pdir_ident a ->
            let a = self#longident a in self#constr "Pdir_ident" [a]
        | Pdir_bool a -> let a = self#bool a in self#constr "Pdir_bool" [a]
    method cases : cases -> 'res= self#list self#case
  end
class virtual ['ctx,'res] lift_map_with_context =
  object (self)
    method virtual  record : 'ctx -> (string * 'res) list -> 'res
    method virtual  constr : 'ctx -> string -> 'res list -> 'res
    method virtual  tuple : 'ctx -> 'res list -> 'res
    method virtual  other : 'a . 'ctx -> 'a -> 'res
    method virtual  bool : 'ctx -> bool -> (bool * 'res)
    method virtual  char : 'ctx -> char -> (char * 'res)
    method virtual  int : 'ctx -> int -> (int * 'res)
    method virtual  list :
      'a . ('ctx -> 'a -> ('a * 'res)) -> 'ctx -> 'a list -> ('a list * 'res)
    method virtual  option :
      'a .
        ('ctx -> 'a -> ('a * 'res)) ->
          'ctx -> 'a option -> ('a option * 'res)
    method virtual  string : 'ctx -> string -> (string * 'res)
    method position : 'ctx -> position -> (position * 'res)=
      fun ctx ->
        fun { pos_fname; pos_lnum; pos_bol; pos_cnum } ->
          let pos_fname = self#string ctx pos_fname in
          let pos_lnum = self#int ctx pos_lnum in
          let pos_bol = self#int ctx pos_bol in
          let pos_cnum = self#int ctx pos_cnum in
          ({
             pos_fname = (Stdlib.fst pos_fname);
             pos_lnum = (Stdlib.fst pos_lnum);
             pos_bol = (Stdlib.fst pos_bol);
             pos_cnum = (Stdlib.fst pos_cnum)
           },
            (self#record ctx
               [("pos_fname", (Stdlib.snd pos_fname));
               ("pos_lnum", (Stdlib.snd pos_lnum));
               ("pos_bol", (Stdlib.snd pos_bol));
               ("pos_cnum", (Stdlib.snd pos_cnum))]))
    method location : 'ctx -> location -> (location * 'res)=
      fun ctx ->
        fun { loc_start; loc_end; loc_ghost } ->
          let loc_start = self#position ctx loc_start in
          let loc_end = self#position ctx loc_end in
          let loc_ghost = self#bool ctx loc_ghost in
          ({
             loc_start = (Stdlib.fst loc_start);
             loc_end = (Stdlib.fst loc_end);
             loc_ghost = (Stdlib.fst loc_ghost)
           },
            (self#record ctx
               [("loc_start", (Stdlib.snd loc_start));
               ("loc_end", (Stdlib.snd loc_end));
               ("loc_ghost", (Stdlib.snd loc_ghost))]))
    method location_stack :
      'ctx -> location_stack -> (location_stack * 'res)=
      self#list self#location
    method loc :
      'a . ('ctx -> 'a -> ('a * 'res)) -> 'ctx -> 'a loc -> ('a loc * 'res)=
      fun _a ->
        fun ctx ->
          fun { txt; loc } ->
            let txt = _a ctx txt in
            let loc = self#location ctx loc in
            ({ txt = (Stdlib.fst txt); loc = (Stdlib.fst loc) },
              (self#record ctx
                 [("txt", (Stdlib.snd txt)); ("loc", (Stdlib.snd loc))]))
    method longident : 'ctx -> longident -> (longident * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Lident a ->
              let a = self#string ctx a in
              ((Lident (Stdlib.fst a)),
                (self#constr ctx "Lident" [Stdlib.snd a]))
          | Ldot (a, b) ->
              let a = self#longident ctx a in
              let b = self#string ctx b in
              ((Ldot ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ldot" [Stdlib.snd a; Stdlib.snd b]))
          | Lapply (a, b) ->
              let a = self#longident ctx a in
              let b = self#longident ctx b in
              ((Lapply ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Lapply" [Stdlib.snd a; Stdlib.snd b]))
    method longident_loc : 'ctx -> longident_loc -> (longident_loc * 'res)=
      self#loc self#longident
    method rec_flag : 'ctx -> rec_flag -> (rec_flag * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method direction_flag :
      'ctx -> direction_flag -> (direction_flag * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method private_flag : 'ctx -> private_flag -> (private_flag * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method mutable_flag : 'ctx -> mutable_flag -> (mutable_flag * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method virtual_flag : 'ctx -> virtual_flag -> (virtual_flag * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method override_flag : 'ctx -> override_flag -> (override_flag * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method closed_flag : 'ctx -> closed_flag -> (closed_flag * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method label : 'ctx -> label -> (label * 'res)= self#string
    method arg_label : 'ctx -> arg_label -> (arg_label * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Nolabel -> (Nolabel, (self#constr ctx "Nolabel" []))
          | Labelled a ->
              let a = self#string ctx a in
              ((Labelled (Stdlib.fst a)),
                (self#constr ctx "Labelled" [Stdlib.snd a]))
          | Optional a ->
              let a = self#string ctx a in
              ((Optional (Stdlib.fst a)),
                (self#constr ctx "Optional" [Stdlib.snd a]))
    method variance : 'ctx -> variance -> (variance * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method injectivity : 'ctx -> injectivity -> (injectivity * 'res)=
      fun ctx -> fun x -> (x, (self#other ctx x))
    method constant : 'ctx -> constant -> (constant * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pconst_integer (a, b) ->
              let a = self#string ctx a in
              let b = self#option self#char ctx b in
              ((Pconst_integer ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pconst_integer"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pconst_char a ->
              let a = self#char ctx a in
              ((Pconst_char (Stdlib.fst a)),
                (self#constr ctx "Pconst_char" [Stdlib.snd a]))
          | Pconst_string (a, b, c) ->
              let a = self#string ctx a in
              let b = self#location ctx b in
              let c = self#option self#string ctx c in
              ((Pconst_string
                  ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pconst_string"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pconst_float (a, b) ->
              let a = self#string ctx a in
              let b = self#option self#char ctx b in
              ((Pconst_float ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pconst_float" [Stdlib.snd a; Stdlib.snd b]))
    method attribute : 'ctx -> attribute -> (attribute * 'res)=
      fun ctx ->
        fun { attr_name; attr_payload; attr_loc } ->
          let attr_name = self#loc self#string ctx attr_name in
          let attr_payload = self#payload ctx attr_payload in
          let attr_loc = self#location ctx attr_loc in
          ({
             attr_name = (Stdlib.fst attr_name);
             attr_payload = (Stdlib.fst attr_payload);
             attr_loc = (Stdlib.fst attr_loc)
           },
            (self#record ctx
               [("attr_name", (Stdlib.snd attr_name));
               ("attr_payload", (Stdlib.snd attr_payload));
               ("attr_loc", (Stdlib.snd attr_loc))]))
    method extension : 'ctx -> extension -> (extension * 'res)=
      fun ctx ->
        fun (a, b) ->
          let a = self#loc self#string ctx a in
          let b = self#payload ctx b in
          (((Stdlib.fst a), (Stdlib.fst b)),
            (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))
    method attributes : 'ctx -> attributes -> (attributes * 'res)=
      self#list self#attribute
    method payload : 'ctx -> payload -> (payload * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | PStr a ->
              let a = self#structure ctx a in
              ((PStr (Stdlib.fst a)),
                (self#constr ctx "PStr" [Stdlib.snd a]))
          | PSig a ->
              let a = self#signature ctx a in
              ((PSig (Stdlib.fst a)),
                (self#constr ctx "PSig" [Stdlib.snd a]))
          | PTyp a ->
              let a = self#core_type ctx a in
              ((PTyp (Stdlib.fst a)),
                (self#constr ctx "PTyp" [Stdlib.snd a]))
          | PPat (a, b) ->
              let a = self#pattern ctx a in
              let b = self#option self#expression ctx b in
              ((PPat ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "PPat" [Stdlib.snd a; Stdlib.snd b]))
    method core_type : 'ctx -> core_type -> (core_type * 'res)=
      fun ctx ->
        fun { ptyp_desc; ptyp_loc; ptyp_loc_stack; ptyp_attributes } ->
          let ptyp_desc = self#core_type_desc ctx ptyp_desc in
          let ptyp_loc = self#location ctx ptyp_loc in
          let ptyp_loc_stack = self#location_stack ctx ptyp_loc_stack in
          let ptyp_attributes = self#attributes ctx ptyp_attributes in
          ({
             ptyp_desc = (Stdlib.fst ptyp_desc);
             ptyp_loc = (Stdlib.fst ptyp_loc);
             ptyp_loc_stack = (Stdlib.fst ptyp_loc_stack);
             ptyp_attributes = (Stdlib.fst ptyp_attributes)
           },
            (self#record ctx
               [("ptyp_desc", (Stdlib.snd ptyp_desc));
               ("ptyp_loc", (Stdlib.snd ptyp_loc));
               ("ptyp_loc_stack", (Stdlib.snd ptyp_loc_stack));
               ("ptyp_attributes", (Stdlib.snd ptyp_attributes))]))
    method core_type_desc :
      'ctx -> core_type_desc -> (core_type_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Ptyp_any -> (Ptyp_any, (self#constr ctx "Ptyp_any" []))
          | Ptyp_var a ->
              let a = self#string ctx a in
              ((Ptyp_var (Stdlib.fst a)),
                (self#constr ctx "Ptyp_var" [Stdlib.snd a]))
          | Ptyp_arrow (a, b, c) ->
              let a = self#arg_label ctx a in
              let b = self#core_type ctx b in
              let c = self#core_type ctx c in
              ((Ptyp_arrow ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Ptyp_arrow"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Ptyp_tuple a ->
              let a = self#list self#core_type ctx a in
              ((Ptyp_tuple (Stdlib.fst a)),
                (self#constr ctx "Ptyp_tuple" [Stdlib.snd a]))
          | Ptyp_constr (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#list self#core_type ctx b in
              ((Ptyp_constr ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ptyp_constr" [Stdlib.snd a; Stdlib.snd b]))
          | Ptyp_object (a, b) ->
              let a = self#list self#object_field ctx a in
              let b = self#closed_flag ctx b in
              ((Ptyp_object ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ptyp_object" [Stdlib.snd a; Stdlib.snd b]))
          | Ptyp_class (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#list self#core_type ctx b in
              ((Ptyp_class ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ptyp_class" [Stdlib.snd a; Stdlib.snd b]))
          | Ptyp_alias (a, b) ->
              let a = self#core_type ctx a in
              let b = self#string ctx b in
              ((Ptyp_alias ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ptyp_alias" [Stdlib.snd a; Stdlib.snd b]))
          | Ptyp_variant (a, b, c) ->
              let a = self#list self#row_field ctx a in
              let b = self#closed_flag ctx b in
              let c = self#option (self#list self#label) ctx c in
              ((Ptyp_variant ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Ptyp_variant"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Ptyp_poly (a, b) ->
              let a = self#list (self#loc self#string) ctx a in
              let b = self#core_type ctx b in
              ((Ptyp_poly ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ptyp_poly" [Stdlib.snd a; Stdlib.snd b]))
          | Ptyp_package a ->
              let a = self#package_type ctx a in
              ((Ptyp_package (Stdlib.fst a)),
                (self#constr ctx "Ptyp_package" [Stdlib.snd a]))
          | Ptyp_extension a ->
              let a = self#extension ctx a in
              ((Ptyp_extension (Stdlib.fst a)),
                (self#constr ctx "Ptyp_extension" [Stdlib.snd a]))
    method package_type : 'ctx -> package_type -> (package_type * 'res)=
      fun ctx ->
        fun (a, b) ->
          let a = self#longident_loc ctx a in
          let b =
            self#list
              (fun ctx ->
                 fun (a, b) ->
                   let a = self#longident_loc ctx a in
                   let b = self#core_type ctx b in
                   (((Stdlib.fst a), (Stdlib.fst b)),
                     (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx b in
          (((Stdlib.fst a), (Stdlib.fst b)),
            (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))
    method row_field : 'ctx -> row_field -> (row_field * 'res)=
      fun ctx ->
        fun { prf_desc; prf_loc; prf_attributes } ->
          let prf_desc = self#row_field_desc ctx prf_desc in
          let prf_loc = self#location ctx prf_loc in
          let prf_attributes = self#attributes ctx prf_attributes in
          ({
             prf_desc = (Stdlib.fst prf_desc);
             prf_loc = (Stdlib.fst prf_loc);
             prf_attributes = (Stdlib.fst prf_attributes)
           },
            (self#record ctx
               [("prf_desc", (Stdlib.snd prf_desc));
               ("prf_loc", (Stdlib.snd prf_loc));
               ("prf_attributes", (Stdlib.snd prf_attributes))]))
    method row_field_desc :
      'ctx -> row_field_desc -> (row_field_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Rtag (a, b, c) ->
              let a = self#loc self#label ctx a in
              let b = self#bool ctx b in
              let c = self#list self#core_type ctx c in
              ((Rtag ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Rtag"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Rinherit a ->
              let a = self#core_type ctx a in
              ((Rinherit (Stdlib.fst a)),
                (self#constr ctx "Rinherit" [Stdlib.snd a]))
    method object_field : 'ctx -> object_field -> (object_field * 'res)=
      fun ctx ->
        fun { pof_desc; pof_loc; pof_attributes } ->
          let pof_desc = self#object_field_desc ctx pof_desc in
          let pof_loc = self#location ctx pof_loc in
          let pof_attributes = self#attributes ctx pof_attributes in
          ({
             pof_desc = (Stdlib.fst pof_desc);
             pof_loc = (Stdlib.fst pof_loc);
             pof_attributes = (Stdlib.fst pof_attributes)
           },
            (self#record ctx
               [("pof_desc", (Stdlib.snd pof_desc));
               ("pof_loc", (Stdlib.snd pof_loc));
               ("pof_attributes", (Stdlib.snd pof_attributes))]))
    method object_field_desc :
      'ctx -> object_field_desc -> (object_field_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Otag (a, b) ->
              let a = self#loc self#label ctx a in
              let b = self#core_type ctx b in
              ((Otag ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Otag" [Stdlib.snd a; Stdlib.snd b]))
          | Oinherit a ->
              let a = self#core_type ctx a in
              ((Oinherit (Stdlib.fst a)),
                (self#constr ctx "Oinherit" [Stdlib.snd a]))
    method pattern : 'ctx -> pattern -> (pattern * 'res)=
      fun ctx ->
        fun { ppat_desc; ppat_loc; ppat_loc_stack; ppat_attributes } ->
          let ppat_desc = self#pattern_desc ctx ppat_desc in
          let ppat_loc = self#location ctx ppat_loc in
          let ppat_loc_stack = self#location_stack ctx ppat_loc_stack in
          let ppat_attributes = self#attributes ctx ppat_attributes in
          ({
             ppat_desc = (Stdlib.fst ppat_desc);
             ppat_loc = (Stdlib.fst ppat_loc);
             ppat_loc_stack = (Stdlib.fst ppat_loc_stack);
             ppat_attributes = (Stdlib.fst ppat_attributes)
           },
            (self#record ctx
               [("ppat_desc", (Stdlib.snd ppat_desc));
               ("ppat_loc", (Stdlib.snd ppat_loc));
               ("ppat_loc_stack", (Stdlib.snd ppat_loc_stack));
               ("ppat_attributes", (Stdlib.snd ppat_attributes))]))
    method pattern_desc : 'ctx -> pattern_desc -> (pattern_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Ppat_any -> (Ppat_any, (self#constr ctx "Ppat_any" []))
          | Ppat_var a ->
              let a = self#loc self#string ctx a in
              ((Ppat_var (Stdlib.fst a)),
                (self#constr ctx "Ppat_var" [Stdlib.snd a]))
          | Ppat_alias (a, b) ->
              let a = self#pattern ctx a in
              let b = self#loc self#string ctx b in
              ((Ppat_alias ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ppat_alias" [Stdlib.snd a; Stdlib.snd b]))
          | Ppat_constant a ->
              let a = self#constant ctx a in
              ((Ppat_constant (Stdlib.fst a)),
                (self#constr ctx "Ppat_constant" [Stdlib.snd a]))
          | Ppat_interval (a, b) ->
              let a = self#constant ctx a in
              let b = self#constant ctx b in
              ((Ppat_interval ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ppat_interval" [Stdlib.snd a; Stdlib.snd b]))
          | Ppat_tuple a ->
              let a = self#list self#pattern ctx a in
              ((Ppat_tuple (Stdlib.fst a)),
                (self#constr ctx "Ppat_tuple" [Stdlib.snd a]))
          | Ppat_construct (a, b) ->
              let a = self#longident_loc ctx a in
              let b =
                self#option
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#list (self#loc self#string) ctx a in
                       let b = self#pattern ctx b in
                       (((Stdlib.fst a), (Stdlib.fst b)),
                         (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
                  b in
              ((Ppat_construct ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ppat_construct"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Ppat_variant (a, b) ->
              let a = self#label ctx a in
              let b = self#option self#pattern ctx b in
              ((Ppat_variant ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ppat_variant" [Stdlib.snd a; Stdlib.snd b]))
          | Ppat_record (a, b) ->
              let a =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#longident_loc ctx a in
                       let b = self#pattern ctx b in
                       (((Stdlib.fst a), (Stdlib.fst b)),
                         (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
                  a in
              let b = self#closed_flag ctx b in
              ((Ppat_record ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ppat_record" [Stdlib.snd a; Stdlib.snd b]))
          | Ppat_array a ->
              let a = self#list self#pattern ctx a in
              ((Ppat_array (Stdlib.fst a)),
                (self#constr ctx "Ppat_array" [Stdlib.snd a]))
          | Ppat_or (a, b) ->
              let a = self#pattern ctx a in
              let b = self#pattern ctx b in
              ((Ppat_or ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ppat_or" [Stdlib.snd a; Stdlib.snd b]))
          | Ppat_constraint (a, b) ->
              let a = self#pattern ctx a in
              let b = self#core_type ctx b in
              ((Ppat_constraint ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ppat_constraint"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Ppat_type a ->
              let a = self#longident_loc ctx a in
              ((Ppat_type (Stdlib.fst a)),
                (self#constr ctx "Ppat_type" [Stdlib.snd a]))
          | Ppat_lazy a ->
              let a = self#pattern ctx a in
              ((Ppat_lazy (Stdlib.fst a)),
                (self#constr ctx "Ppat_lazy" [Stdlib.snd a]))
          | Ppat_unpack a ->
              let a = self#loc (self#option self#string) ctx a in
              ((Ppat_unpack (Stdlib.fst a)),
                (self#constr ctx "Ppat_unpack" [Stdlib.snd a]))
          | Ppat_exception a ->
              let a = self#pattern ctx a in
              ((Ppat_exception (Stdlib.fst a)),
                (self#constr ctx "Ppat_exception" [Stdlib.snd a]))
          | Ppat_extension a ->
              let a = self#extension ctx a in
              ((Ppat_extension (Stdlib.fst a)),
                (self#constr ctx "Ppat_extension" [Stdlib.snd a]))
          | Ppat_open (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#pattern ctx b in
              ((Ppat_open ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Ppat_open" [Stdlib.snd a; Stdlib.snd b]))
    method expression : 'ctx -> expression -> (expression * 'res)=
      fun ctx ->
        fun { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes } ->
          let pexp_desc = self#expression_desc ctx pexp_desc in
          let pexp_loc = self#location ctx pexp_loc in
          let pexp_loc_stack = self#location_stack ctx pexp_loc_stack in
          let pexp_attributes = self#attributes ctx pexp_attributes in
          ({
             pexp_desc = (Stdlib.fst pexp_desc);
             pexp_loc = (Stdlib.fst pexp_loc);
             pexp_loc_stack = (Stdlib.fst pexp_loc_stack);
             pexp_attributes = (Stdlib.fst pexp_attributes)
           },
            (self#record ctx
               [("pexp_desc", (Stdlib.snd pexp_desc));
               ("pexp_loc", (Stdlib.snd pexp_loc));
               ("pexp_loc_stack", (Stdlib.snd pexp_loc_stack));
               ("pexp_attributes", (Stdlib.snd pexp_attributes))]))
    method expression_desc :
      'ctx -> expression_desc -> (expression_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pexp_ident a ->
              let a = self#longident_loc ctx a in
              ((Pexp_ident (Stdlib.fst a)),
                (self#constr ctx "Pexp_ident" [Stdlib.snd a]))
          | Pexp_constant a ->
              let a = self#constant ctx a in
              ((Pexp_constant (Stdlib.fst a)),
                (self#constr ctx "Pexp_constant" [Stdlib.snd a]))
          | Pexp_let (a, b, c) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#value_binding ctx b in
              let c = self#expression ctx c in
              ((Pexp_let ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pexp_let"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pexp_function a ->
              let a = self#cases ctx a in
              ((Pexp_function (Stdlib.fst a)),
                (self#constr ctx "Pexp_function" [Stdlib.snd a]))
          | Pexp_fun (a, b, c, d) ->
              let a = self#arg_label ctx a in
              let b = self#option self#expression ctx b in
              let c = self#pattern ctx c in
              let d = self#expression ctx d in
              ((Pexp_fun
                  ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c),
                    (Stdlib.fst d))),
                (self#constr ctx "Pexp_fun"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c; Stdlib.snd d]))
          | Pexp_apply (a, b) ->
              let a = self#expression ctx a in
              let b =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#arg_label ctx a in
                       let b = self#expression ctx b in
                       (((Stdlib.fst a), (Stdlib.fst b)),
                         (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
                  b in
              ((Pexp_apply ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_apply" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_match (a, b) ->
              let a = self#expression ctx a in
              let b = self#cases ctx b in
              ((Pexp_match ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_match" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_try (a, b) ->
              let a = self#expression ctx a in
              let b = self#cases ctx b in
              ((Pexp_try ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_try" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_tuple a ->
              let a = self#list self#expression ctx a in
              ((Pexp_tuple (Stdlib.fst a)),
                (self#constr ctx "Pexp_tuple" [Stdlib.snd a]))
          | Pexp_construct (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#option self#expression ctx b in
              ((Pexp_construct ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_construct"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_variant (a, b) ->
              let a = self#label ctx a in
              let b = self#option self#expression ctx b in
              ((Pexp_variant ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_variant" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_record (a, b) ->
              let a =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#longident_loc ctx a in
                       let b = self#expression ctx b in
                       (((Stdlib.fst a), (Stdlib.fst b)),
                         (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
                  a in
              let b = self#option self#expression ctx b in
              ((Pexp_record ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_record" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_field (a, b) ->
              let a = self#expression ctx a in
              let b = self#longident_loc ctx b in
              ((Pexp_field ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_field" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_setfield (a, b, c) ->
              let a = self#expression ctx a in
              let b = self#longident_loc ctx b in
              let c = self#expression ctx c in
              ((Pexp_setfield
                  ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pexp_setfield"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pexp_array a ->
              let a = self#list self#expression ctx a in
              ((Pexp_array (Stdlib.fst a)),
                (self#constr ctx "Pexp_array" [Stdlib.snd a]))
          | Pexp_ifthenelse (a, b, c) ->
              let a = self#expression ctx a in
              let b = self#expression ctx b in
              let c = self#option self#expression ctx c in
              ((Pexp_ifthenelse
                  ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pexp_ifthenelse"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pexp_sequence (a, b) ->
              let a = self#expression ctx a in
              let b = self#expression ctx b in
              ((Pexp_sequence ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_sequence" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_while (a, b) ->
              let a = self#expression ctx a in
              let b = self#expression ctx b in
              ((Pexp_while ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_while" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_for (a, b, c, d, e) ->
              let a = self#pattern ctx a in
              let b = self#expression ctx b in
              let c = self#expression ctx c in
              let d = self#direction_flag ctx d in
              let e = self#expression ctx e in
              ((Pexp_for
                  ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c),
                    (Stdlib.fst d), (Stdlib.fst e))),
                (self#constr ctx "Pexp_for"
                   [Stdlib.snd a;
                   Stdlib.snd b;
                   Stdlib.snd c;
                   Stdlib.snd d;
                   Stdlib.snd e]))
          | Pexp_constraint (a, b) ->
              let a = self#expression ctx a in
              let b = self#core_type ctx b in
              ((Pexp_constraint ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_constraint"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_coerce (a, b, c) ->
              let a = self#expression ctx a in
              let b = self#option self#core_type ctx b in
              let c = self#core_type ctx c in
              ((Pexp_coerce ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pexp_coerce"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pexp_send (a, b) ->
              let a = self#expression ctx a in
              let b = self#loc self#label ctx b in
              ((Pexp_send ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_send" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_new a ->
              let a = self#longident_loc ctx a in
              ((Pexp_new (Stdlib.fst a)),
                (self#constr ctx "Pexp_new" [Stdlib.snd a]))
          | Pexp_setinstvar (a, b) ->
              let a = self#loc self#label ctx a in
              let b = self#expression ctx b in
              ((Pexp_setinstvar ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_setinstvar"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_override a ->
              let a =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#loc self#label ctx a in
                       let b = self#expression ctx b in
                       (((Stdlib.fst a), (Stdlib.fst b)),
                         (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
                  a in
              ((Pexp_override (Stdlib.fst a)),
                (self#constr ctx "Pexp_override" [Stdlib.snd a]))
          | Pexp_letmodule (a, b, c) ->
              let a = self#loc (self#option self#string) ctx a in
              let b = self#module_expr ctx b in
              let c = self#expression ctx c in
              ((Pexp_letmodule
                  ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pexp_letmodule"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pexp_letexception (a, b) ->
              let a = self#extension_constructor ctx a in
              let b = self#expression ctx b in
              ((Pexp_letexception ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_letexception"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_assert a ->
              let a = self#expression ctx a in
              ((Pexp_assert (Stdlib.fst a)),
                (self#constr ctx "Pexp_assert" [Stdlib.snd a]))
          | Pexp_lazy a ->
              let a = self#expression ctx a in
              ((Pexp_lazy (Stdlib.fst a)),
                (self#constr ctx "Pexp_lazy" [Stdlib.snd a]))
          | Pexp_poly (a, b) ->
              let a = self#expression ctx a in
              let b = self#option self#core_type ctx b in
              ((Pexp_poly ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_poly" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_object a ->
              let a = self#class_structure ctx a in
              ((Pexp_object (Stdlib.fst a)),
                (self#constr ctx "Pexp_object" [Stdlib.snd a]))
          | Pexp_newtype (a, b) ->
              let a = self#loc self#string ctx a in
              let b = self#expression ctx b in
              ((Pexp_newtype ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_newtype" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_pack a ->
              let a = self#module_expr ctx a in
              ((Pexp_pack (Stdlib.fst a)),
                (self#constr ctx "Pexp_pack" [Stdlib.snd a]))
          | Pexp_open (a, b) ->
              let a = self#open_declaration ctx a in
              let b = self#expression ctx b in
              ((Pexp_open ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pexp_open" [Stdlib.snd a; Stdlib.snd b]))
          | Pexp_letop a ->
              let a = self#letop ctx a in
              ((Pexp_letop (Stdlib.fst a)),
                (self#constr ctx "Pexp_letop" [Stdlib.snd a]))
          | Pexp_extension a ->
              let a = self#extension ctx a in
              ((Pexp_extension (Stdlib.fst a)),
                (self#constr ctx "Pexp_extension" [Stdlib.snd a]))
          | Pexp_unreachable ->
              (Pexp_unreachable, (self#constr ctx "Pexp_unreachable" []))
    method case : 'ctx -> case -> (case * 'res)=
      fun ctx ->
        fun { pc_lhs; pc_guard; pc_rhs } ->
          let pc_lhs = self#pattern ctx pc_lhs in
          let pc_guard = self#option self#expression ctx pc_guard in
          let pc_rhs = self#expression ctx pc_rhs in
          ({
             pc_lhs = (Stdlib.fst pc_lhs);
             pc_guard = (Stdlib.fst pc_guard);
             pc_rhs = (Stdlib.fst pc_rhs)
           },
            (self#record ctx
               [("pc_lhs", (Stdlib.snd pc_lhs));
               ("pc_guard", (Stdlib.snd pc_guard));
               ("pc_rhs", (Stdlib.snd pc_rhs))]))
    method letop : 'ctx -> letop -> (letop * 'res)=
      fun ctx ->
        fun { let_; ands; body } ->
          let let_ = self#binding_op ctx let_ in
          let ands = self#list self#binding_op ctx ands in
          let body = self#expression ctx body in
          ({
             let_ = (Stdlib.fst let_);
             ands = (Stdlib.fst ands);
             body = (Stdlib.fst body)
           },
            (self#record ctx
               [("let_", (Stdlib.snd let_));
               ("ands", (Stdlib.snd ands));
               ("body", (Stdlib.snd body))]))
    method binding_op : 'ctx -> binding_op -> (binding_op * 'res)=
      fun ctx ->
        fun { pbop_op; pbop_pat; pbop_exp; pbop_loc } ->
          let pbop_op = self#loc self#string ctx pbop_op in
          let pbop_pat = self#pattern ctx pbop_pat in
          let pbop_exp = self#expression ctx pbop_exp in
          let pbop_loc = self#location ctx pbop_loc in
          ({
             pbop_op = (Stdlib.fst pbop_op);
             pbop_pat = (Stdlib.fst pbop_pat);
             pbop_exp = (Stdlib.fst pbop_exp);
             pbop_loc = (Stdlib.fst pbop_loc)
           },
            (self#record ctx
               [("pbop_op", (Stdlib.snd pbop_op));
               ("pbop_pat", (Stdlib.snd pbop_pat));
               ("pbop_exp", (Stdlib.snd pbop_exp));
               ("pbop_loc", (Stdlib.snd pbop_loc))]))
    method value_description :
      'ctx -> value_description -> (value_description * 'res)=
      fun ctx ->
        fun { pval_name; pval_type; pval_prim; pval_attributes; pval_loc } ->
          let pval_name = self#loc self#string ctx pval_name in
          let pval_type = self#core_type ctx pval_type in
          let pval_prim = self#list self#string ctx pval_prim in
          let pval_attributes = self#attributes ctx pval_attributes in
          let pval_loc = self#location ctx pval_loc in
          ({
             pval_name = (Stdlib.fst pval_name);
             pval_type = (Stdlib.fst pval_type);
             pval_prim = (Stdlib.fst pval_prim);
             pval_attributes = (Stdlib.fst pval_attributes);
             pval_loc = (Stdlib.fst pval_loc)
           },
            (self#record ctx
               [("pval_name", (Stdlib.snd pval_name));
               ("pval_type", (Stdlib.snd pval_type));
               ("pval_prim", (Stdlib.snd pval_prim));
               ("pval_attributes", (Stdlib.snd pval_attributes));
               ("pval_loc", (Stdlib.snd pval_loc))]))
    method type_declaration :
      'ctx -> type_declaration -> (type_declaration * 'res)=
      fun ctx ->
        fun
          { ptype_name; ptype_params; ptype_cstrs; ptype_kind; ptype_private;
            ptype_manifest; ptype_attributes; ptype_loc }
          ->
          let ptype_name = self#loc self#string ctx ptype_name in
          let ptype_params =
            self#list
              (fun ctx ->
                 fun (a, b) ->
                   let a = self#core_type ctx a in
                   let b =
                     (fun ctx ->
                        fun (a, b) ->
                          let a = self#variance ctx a in
                          let b = self#injectivity ctx b in
                          (((Stdlib.fst a), (Stdlib.fst b)),
                            (self#tuple ctx [Stdlib.snd a; Stdlib.snd b])))
                       ctx b in
                   (((Stdlib.fst a), (Stdlib.fst b)),
                     (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
              ptype_params in
          let ptype_cstrs =
            self#list
              (fun ctx ->
                 fun (a, b, c) ->
                   let a = self#core_type ctx a in
                   let b = self#core_type ctx b in
                   let c = self#location ctx c in
                   (((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c)),
                     (self#tuple ctx
                        [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))) ctx
              ptype_cstrs in
          let ptype_kind = self#type_kind ctx ptype_kind in
          let ptype_private = self#private_flag ctx ptype_private in
          let ptype_manifest = self#option self#core_type ctx ptype_manifest in
          let ptype_attributes = self#attributes ctx ptype_attributes in
          let ptype_loc = self#location ctx ptype_loc in
          ({
             ptype_name = (Stdlib.fst ptype_name);
             ptype_params = (Stdlib.fst ptype_params);
             ptype_cstrs = (Stdlib.fst ptype_cstrs);
             ptype_kind = (Stdlib.fst ptype_kind);
             ptype_private = (Stdlib.fst ptype_private);
             ptype_manifest = (Stdlib.fst ptype_manifest);
             ptype_attributes = (Stdlib.fst ptype_attributes);
             ptype_loc = (Stdlib.fst ptype_loc)
           },
            (self#record ctx
               [("ptype_name", (Stdlib.snd ptype_name));
               ("ptype_params", (Stdlib.snd ptype_params));
               ("ptype_cstrs", (Stdlib.snd ptype_cstrs));
               ("ptype_kind", (Stdlib.snd ptype_kind));
               ("ptype_private", (Stdlib.snd ptype_private));
               ("ptype_manifest", (Stdlib.snd ptype_manifest));
               ("ptype_attributes", (Stdlib.snd ptype_attributes));
               ("ptype_loc", (Stdlib.snd ptype_loc))]))
    method type_kind : 'ctx -> type_kind -> (type_kind * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Ptype_abstract ->
              (Ptype_abstract, (self#constr ctx "Ptype_abstract" []))
          | Ptype_variant a ->
              let a = self#list self#constructor_declaration ctx a in
              ((Ptype_variant (Stdlib.fst a)),
                (self#constr ctx "Ptype_variant" [Stdlib.snd a]))
          | Ptype_record a ->
              let a = self#list self#label_declaration ctx a in
              ((Ptype_record (Stdlib.fst a)),
                (self#constr ctx "Ptype_record" [Stdlib.snd a]))
          | Ptype_open -> (Ptype_open, (self#constr ctx "Ptype_open" []))
    method label_declaration :
      'ctx -> label_declaration -> (label_declaration * 'res)=
      fun ctx ->
        fun { pld_name; pld_mutable; pld_type; pld_loc; pld_attributes } ->
          let pld_name = self#loc self#string ctx pld_name in
          let pld_mutable = self#mutable_flag ctx pld_mutable in
          let pld_type = self#core_type ctx pld_type in
          let pld_loc = self#location ctx pld_loc in
          let pld_attributes = self#attributes ctx pld_attributes in
          ({
             pld_name = (Stdlib.fst pld_name);
             pld_mutable = (Stdlib.fst pld_mutable);
             pld_type = (Stdlib.fst pld_type);
             pld_loc = (Stdlib.fst pld_loc);
             pld_attributes = (Stdlib.fst pld_attributes)
           },
            (self#record ctx
               [("pld_name", (Stdlib.snd pld_name));
               ("pld_mutable", (Stdlib.snd pld_mutable));
               ("pld_type", (Stdlib.snd pld_type));
               ("pld_loc", (Stdlib.snd pld_loc));
               ("pld_attributes", (Stdlib.snd pld_attributes))]))
    method constructor_declaration :
      'ctx -> constructor_declaration -> (constructor_declaration * 'res)=
      fun ctx ->
        fun
          { pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc; pcd_attributes }
          ->
          let pcd_name = self#loc self#string ctx pcd_name in
          let pcd_vars = self#list (self#loc self#string) ctx pcd_vars in
          let pcd_args = self#constructor_arguments ctx pcd_args in
          let pcd_res = self#option self#core_type ctx pcd_res in
          let pcd_loc = self#location ctx pcd_loc in
          let pcd_attributes = self#attributes ctx pcd_attributes in
          ({
             pcd_name = (Stdlib.fst pcd_name);
             pcd_vars = (Stdlib.fst pcd_vars);
             pcd_args = (Stdlib.fst pcd_args);
             pcd_res = (Stdlib.fst pcd_res);
             pcd_loc = (Stdlib.fst pcd_loc);
             pcd_attributes = (Stdlib.fst pcd_attributes)
           },
            (self#record ctx
               [("pcd_name", (Stdlib.snd pcd_name));
               ("pcd_vars", (Stdlib.snd pcd_vars));
               ("pcd_args", (Stdlib.snd pcd_args));
               ("pcd_res", (Stdlib.snd pcd_res));
               ("pcd_loc", (Stdlib.snd pcd_loc));
               ("pcd_attributes", (Stdlib.snd pcd_attributes))]))
    method constructor_arguments :
      'ctx -> constructor_arguments -> (constructor_arguments * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pcstr_tuple a ->
              let a = self#list self#core_type ctx a in
              ((Pcstr_tuple (Stdlib.fst a)),
                (self#constr ctx "Pcstr_tuple" [Stdlib.snd a]))
          | Pcstr_record a ->
              let a = self#list self#label_declaration ctx a in
              ((Pcstr_record (Stdlib.fst a)),
                (self#constr ctx "Pcstr_record" [Stdlib.snd a]))
    method type_extension :
      'ctx -> type_extension -> (type_extension * 'res)=
      fun ctx ->
        fun
          { ptyext_path; ptyext_params; ptyext_constructors; ptyext_private;
            ptyext_loc; ptyext_attributes }
          ->
          let ptyext_path = self#longident_loc ctx ptyext_path in
          let ptyext_params =
            self#list
              (fun ctx ->
                 fun (a, b) ->
                   let a = self#core_type ctx a in
                   let b =
                     (fun ctx ->
                        fun (a, b) ->
                          let a = self#variance ctx a in
                          let b = self#injectivity ctx b in
                          (((Stdlib.fst a), (Stdlib.fst b)),
                            (self#tuple ctx [Stdlib.snd a; Stdlib.snd b])))
                       ctx b in
                   (((Stdlib.fst a), (Stdlib.fst b)),
                     (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
              ptyext_params in
          let ptyext_constructors =
            self#list self#extension_constructor ctx ptyext_constructors in
          let ptyext_private = self#private_flag ctx ptyext_private in
          let ptyext_loc = self#location ctx ptyext_loc in
          let ptyext_attributes = self#attributes ctx ptyext_attributes in
          ({
             ptyext_path = (Stdlib.fst ptyext_path);
             ptyext_params = (Stdlib.fst ptyext_params);
             ptyext_constructors = (Stdlib.fst ptyext_constructors);
             ptyext_private = (Stdlib.fst ptyext_private);
             ptyext_loc = (Stdlib.fst ptyext_loc);
             ptyext_attributes = (Stdlib.fst ptyext_attributes)
           },
            (self#record ctx
               [("ptyext_path", (Stdlib.snd ptyext_path));
               ("ptyext_params", (Stdlib.snd ptyext_params));
               ("ptyext_constructors", (Stdlib.snd ptyext_constructors));
               ("ptyext_private", (Stdlib.snd ptyext_private));
               ("ptyext_loc", (Stdlib.snd ptyext_loc));
               ("ptyext_attributes", (Stdlib.snd ptyext_attributes))]))
    method extension_constructor :
      'ctx -> extension_constructor -> (extension_constructor * 'res)=
      fun ctx ->
        fun { pext_name; pext_kind; pext_loc; pext_attributes } ->
          let pext_name = self#loc self#string ctx pext_name in
          let pext_kind = self#extension_constructor_kind ctx pext_kind in
          let pext_loc = self#location ctx pext_loc in
          let pext_attributes = self#attributes ctx pext_attributes in
          ({
             pext_name = (Stdlib.fst pext_name);
             pext_kind = (Stdlib.fst pext_kind);
             pext_loc = (Stdlib.fst pext_loc);
             pext_attributes = (Stdlib.fst pext_attributes)
           },
            (self#record ctx
               [("pext_name", (Stdlib.snd pext_name));
               ("pext_kind", (Stdlib.snd pext_kind));
               ("pext_loc", (Stdlib.snd pext_loc));
               ("pext_attributes", (Stdlib.snd pext_attributes))]))
    method type_exception :
      'ctx -> type_exception -> (type_exception * 'res)=
      fun ctx ->
        fun { ptyexn_constructor; ptyexn_loc; ptyexn_attributes } ->
          let ptyexn_constructor =
            self#extension_constructor ctx ptyexn_constructor in
          let ptyexn_loc = self#location ctx ptyexn_loc in
          let ptyexn_attributes = self#attributes ctx ptyexn_attributes in
          ({
             ptyexn_constructor = (Stdlib.fst ptyexn_constructor);
             ptyexn_loc = (Stdlib.fst ptyexn_loc);
             ptyexn_attributes = (Stdlib.fst ptyexn_attributes)
           },
            (self#record ctx
               [("ptyexn_constructor", (Stdlib.snd ptyexn_constructor));
               ("ptyexn_loc", (Stdlib.snd ptyexn_loc));
               ("ptyexn_attributes", (Stdlib.snd ptyexn_attributes))]))
    method extension_constructor_kind :
      'ctx ->
        extension_constructor_kind -> (extension_constructor_kind * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pext_decl (a, b, c) ->
              let a = self#list (self#loc self#string) ctx a in
              let b = self#constructor_arguments ctx b in
              let c = self#option self#core_type ctx c in
              ((Pext_decl ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pext_decl"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pext_rebind a ->
              let a = self#longident_loc ctx a in
              ((Pext_rebind (Stdlib.fst a)),
                (self#constr ctx "Pext_rebind" [Stdlib.snd a]))
    method class_type : 'ctx -> class_type -> (class_type * 'res)=
      fun ctx ->
        fun { pcty_desc; pcty_loc; pcty_attributes } ->
          let pcty_desc = self#class_type_desc ctx pcty_desc in
          let pcty_loc = self#location ctx pcty_loc in
          let pcty_attributes = self#attributes ctx pcty_attributes in
          ({
             pcty_desc = (Stdlib.fst pcty_desc);
             pcty_loc = (Stdlib.fst pcty_loc);
             pcty_attributes = (Stdlib.fst pcty_attributes)
           },
            (self#record ctx
               [("pcty_desc", (Stdlib.snd pcty_desc));
               ("pcty_loc", (Stdlib.snd pcty_loc));
               ("pcty_attributes", (Stdlib.snd pcty_attributes))]))
    method class_type_desc :
      'ctx -> class_type_desc -> (class_type_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pcty_constr (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#list self#core_type ctx b in
              ((Pcty_constr ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pcty_constr" [Stdlib.snd a; Stdlib.snd b]))
          | Pcty_signature a ->
              let a = self#class_signature ctx a in
              ((Pcty_signature (Stdlib.fst a)),
                (self#constr ctx "Pcty_signature" [Stdlib.snd a]))
          | Pcty_arrow (a, b, c) ->
              let a = self#arg_label ctx a in
              let b = self#core_type ctx b in
              let c = self#class_type ctx c in
              ((Pcty_arrow ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pcty_arrow"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pcty_extension a ->
              let a = self#extension ctx a in
              ((Pcty_extension (Stdlib.fst a)),
                (self#constr ctx "Pcty_extension" [Stdlib.snd a]))
          | Pcty_open (a, b) ->
              let a = self#open_description ctx a in
              let b = self#class_type ctx b in
              ((Pcty_open ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pcty_open" [Stdlib.snd a; Stdlib.snd b]))
    method class_signature :
      'ctx -> class_signature -> (class_signature * 'res)=
      fun ctx ->
        fun { pcsig_self; pcsig_fields } ->
          let pcsig_self = self#core_type ctx pcsig_self in
          let pcsig_fields = self#list self#class_type_field ctx pcsig_fields in
          ({
             pcsig_self = (Stdlib.fst pcsig_self);
             pcsig_fields = (Stdlib.fst pcsig_fields)
           },
            (self#record ctx
               [("pcsig_self", (Stdlib.snd pcsig_self));
               ("pcsig_fields", (Stdlib.snd pcsig_fields))]))
    method class_type_field :
      'ctx -> class_type_field -> (class_type_field * 'res)=
      fun ctx ->
        fun { pctf_desc; pctf_loc; pctf_attributes } ->
          let pctf_desc = self#class_type_field_desc ctx pctf_desc in
          let pctf_loc = self#location ctx pctf_loc in
          let pctf_attributes = self#attributes ctx pctf_attributes in
          ({
             pctf_desc = (Stdlib.fst pctf_desc);
             pctf_loc = (Stdlib.fst pctf_loc);
             pctf_attributes = (Stdlib.fst pctf_attributes)
           },
            (self#record ctx
               [("pctf_desc", (Stdlib.snd pctf_desc));
               ("pctf_loc", (Stdlib.snd pctf_loc));
               ("pctf_attributes", (Stdlib.snd pctf_attributes))]))
    method class_type_field_desc :
      'ctx -> class_type_field_desc -> (class_type_field_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pctf_inherit a ->
              let a = self#class_type ctx a in
              ((Pctf_inherit (Stdlib.fst a)),
                (self#constr ctx "Pctf_inherit" [Stdlib.snd a]))
          | Pctf_val a ->
              let a =
                (fun ctx ->
                   fun (a, b, c, d) ->
                     let a = self#loc self#label ctx a in
                     let b = self#mutable_flag ctx b in
                     let c = self#virtual_flag ctx c in
                     let d = self#core_type ctx d in
                     (((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c),
                        (Stdlib.fst d)),
                       (self#tuple ctx
                          [Stdlib.snd a;
                          Stdlib.snd b;
                          Stdlib.snd c;
                          Stdlib.snd d]))) ctx a in
              ((Pctf_val (Stdlib.fst a)),
                (self#constr ctx "Pctf_val" [Stdlib.snd a]))
          | Pctf_method a ->
              let a =
                (fun ctx ->
                   fun (a, b, c, d) ->
                     let a = self#loc self#label ctx a in
                     let b = self#private_flag ctx b in
                     let c = self#virtual_flag ctx c in
                     let d = self#core_type ctx d in
                     (((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c),
                        (Stdlib.fst d)),
                       (self#tuple ctx
                          [Stdlib.snd a;
                          Stdlib.snd b;
                          Stdlib.snd c;
                          Stdlib.snd d]))) ctx a in
              ((Pctf_method (Stdlib.fst a)),
                (self#constr ctx "Pctf_method" [Stdlib.snd a]))
          | Pctf_constraint a ->
              let a =
                (fun ctx ->
                   fun (a, b) ->
                     let a = self#core_type ctx a in
                     let b = self#core_type ctx b in
                     (((Stdlib.fst a), (Stdlib.fst b)),
                       (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx a in
              ((Pctf_constraint (Stdlib.fst a)),
                (self#constr ctx "Pctf_constraint" [Stdlib.snd a]))
          | Pctf_attribute a ->
              let a = self#attribute ctx a in
              ((Pctf_attribute (Stdlib.fst a)),
                (self#constr ctx "Pctf_attribute" [Stdlib.snd a]))
          | Pctf_extension a ->
              let a = self#extension ctx a in
              ((Pctf_extension (Stdlib.fst a)),
                (self#constr ctx "Pctf_extension" [Stdlib.snd a]))
    method class_infos :
      'a .
        ('ctx -> 'a -> ('a * 'res)) ->
          'ctx -> 'a class_infos -> ('a class_infos * 'res)=
      fun _a ->
        fun ctx ->
          fun
            { pci_virt; pci_params; pci_name; pci_expr; pci_loc;
              pci_attributes }
            ->
            let pci_virt = self#virtual_flag ctx pci_virt in
            let pci_params =
              self#list
                (fun ctx ->
                   fun (a, b) ->
                     let a = self#core_type ctx a in
                     let b =
                       (fun ctx ->
                          fun (a, b) ->
                            let a = self#variance ctx a in
                            let b = self#injectivity ctx b in
                            (((Stdlib.fst a), (Stdlib.fst b)),
                              (self#tuple ctx [Stdlib.snd a; Stdlib.snd b])))
                         ctx b in
                     (((Stdlib.fst a), (Stdlib.fst b)),
                       (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
                pci_params in
            let pci_name = self#loc self#string ctx pci_name in
            let pci_expr = _a ctx pci_expr in
            let pci_loc = self#location ctx pci_loc in
            let pci_attributes = self#attributes ctx pci_attributes in
            ({
               pci_virt = (Stdlib.fst pci_virt);
               pci_params = (Stdlib.fst pci_params);
               pci_name = (Stdlib.fst pci_name);
               pci_expr = (Stdlib.fst pci_expr);
               pci_loc = (Stdlib.fst pci_loc);
               pci_attributes = (Stdlib.fst pci_attributes)
             },
              (self#record ctx
                 [("pci_virt", (Stdlib.snd pci_virt));
                 ("pci_params", (Stdlib.snd pci_params));
                 ("pci_name", (Stdlib.snd pci_name));
                 ("pci_expr", (Stdlib.snd pci_expr));
                 ("pci_loc", (Stdlib.snd pci_loc));
                 ("pci_attributes", (Stdlib.snd pci_attributes))]))
    method class_description :
      'ctx -> class_description -> (class_description * 'res)=
      self#class_infos self#class_type
    method class_type_declaration :
      'ctx -> class_type_declaration -> (class_type_declaration * 'res)=
      self#class_infos self#class_type
    method class_expr : 'ctx -> class_expr -> (class_expr * 'res)=
      fun ctx ->
        fun { pcl_desc; pcl_loc; pcl_attributes } ->
          let pcl_desc = self#class_expr_desc ctx pcl_desc in
          let pcl_loc = self#location ctx pcl_loc in
          let pcl_attributes = self#attributes ctx pcl_attributes in
          ({
             pcl_desc = (Stdlib.fst pcl_desc);
             pcl_loc = (Stdlib.fst pcl_loc);
             pcl_attributes = (Stdlib.fst pcl_attributes)
           },
            (self#record ctx
               [("pcl_desc", (Stdlib.snd pcl_desc));
               ("pcl_loc", (Stdlib.snd pcl_loc));
               ("pcl_attributes", (Stdlib.snd pcl_attributes))]))
    method class_expr_desc :
      'ctx -> class_expr_desc -> (class_expr_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pcl_constr (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#list self#core_type ctx b in
              ((Pcl_constr ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pcl_constr" [Stdlib.snd a; Stdlib.snd b]))
          | Pcl_structure a ->
              let a = self#class_structure ctx a in
              ((Pcl_structure (Stdlib.fst a)),
                (self#constr ctx "Pcl_structure" [Stdlib.snd a]))
          | Pcl_fun (a, b, c, d) ->
              let a = self#arg_label ctx a in
              let b = self#option self#expression ctx b in
              let c = self#pattern ctx c in
              let d = self#class_expr ctx d in
              ((Pcl_fun
                  ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c),
                    (Stdlib.fst d))),
                (self#constr ctx "Pcl_fun"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c; Stdlib.snd d]))
          | Pcl_apply (a, b) ->
              let a = self#class_expr ctx a in
              let b =
                self#list
                  (fun ctx ->
                     fun (a, b) ->
                       let a = self#arg_label ctx a in
                       let b = self#expression ctx b in
                       (((Stdlib.fst a), (Stdlib.fst b)),
                         (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx
                  b in
              ((Pcl_apply ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pcl_apply" [Stdlib.snd a; Stdlib.snd b]))
          | Pcl_let (a, b, c) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#value_binding ctx b in
              let c = self#class_expr ctx c in
              ((Pcl_let ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pcl_let"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pcl_constraint (a, b) ->
              let a = self#class_expr ctx a in
              let b = self#class_type ctx b in
              ((Pcl_constraint ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pcl_constraint"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pcl_extension a ->
              let a = self#extension ctx a in
              ((Pcl_extension (Stdlib.fst a)),
                (self#constr ctx "Pcl_extension" [Stdlib.snd a]))
          | Pcl_open (a, b) ->
              let a = self#open_description ctx a in
              let b = self#class_expr ctx b in
              ((Pcl_open ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pcl_open" [Stdlib.snd a; Stdlib.snd b]))
    method class_structure :
      'ctx -> class_structure -> (class_structure * 'res)=
      fun ctx ->
        fun { pcstr_self; pcstr_fields } ->
          let pcstr_self = self#pattern ctx pcstr_self in
          let pcstr_fields = self#list self#class_field ctx pcstr_fields in
          ({
             pcstr_self = (Stdlib.fst pcstr_self);
             pcstr_fields = (Stdlib.fst pcstr_fields)
           },
            (self#record ctx
               [("pcstr_self", (Stdlib.snd pcstr_self));
               ("pcstr_fields", (Stdlib.snd pcstr_fields))]))
    method class_field : 'ctx -> class_field -> (class_field * 'res)=
      fun ctx ->
        fun { pcf_desc; pcf_loc; pcf_attributes } ->
          let pcf_desc = self#class_field_desc ctx pcf_desc in
          let pcf_loc = self#location ctx pcf_loc in
          let pcf_attributes = self#attributes ctx pcf_attributes in
          ({
             pcf_desc = (Stdlib.fst pcf_desc);
             pcf_loc = (Stdlib.fst pcf_loc);
             pcf_attributes = (Stdlib.fst pcf_attributes)
           },
            (self#record ctx
               [("pcf_desc", (Stdlib.snd pcf_desc));
               ("pcf_loc", (Stdlib.snd pcf_loc));
               ("pcf_attributes", (Stdlib.snd pcf_attributes))]))
    method class_field_desc :
      'ctx -> class_field_desc -> (class_field_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pcf_inherit (a, b, c) ->
              let a = self#override_flag ctx a in
              let b = self#class_expr ctx b in
              let c = self#option (self#loc self#string) ctx c in
              ((Pcf_inherit ((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c))),
                (self#constr ctx "Pcf_inherit"
                   [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))
          | Pcf_val a ->
              let a =
                (fun ctx ->
                   fun (a, b, c) ->
                     let a = self#loc self#label ctx a in
                     let b = self#mutable_flag ctx b in
                     let c = self#class_field_kind ctx c in
                     (((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c)),
                       (self#tuple ctx
                          [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))) ctx a in
              ((Pcf_val (Stdlib.fst a)),
                (self#constr ctx "Pcf_val" [Stdlib.snd a]))
          | Pcf_method a ->
              let a =
                (fun ctx ->
                   fun (a, b, c) ->
                     let a = self#loc self#label ctx a in
                     let b = self#private_flag ctx b in
                     let c = self#class_field_kind ctx c in
                     (((Stdlib.fst a), (Stdlib.fst b), (Stdlib.fst c)),
                       (self#tuple ctx
                          [Stdlib.snd a; Stdlib.snd b; Stdlib.snd c]))) ctx a in
              ((Pcf_method (Stdlib.fst a)),
                (self#constr ctx "Pcf_method" [Stdlib.snd a]))
          | Pcf_constraint a ->
              let a =
                (fun ctx ->
                   fun (a, b) ->
                     let a = self#core_type ctx a in
                     let b = self#core_type ctx b in
                     (((Stdlib.fst a), (Stdlib.fst b)),
                       (self#tuple ctx [Stdlib.snd a; Stdlib.snd b]))) ctx a in
              ((Pcf_constraint (Stdlib.fst a)),
                (self#constr ctx "Pcf_constraint" [Stdlib.snd a]))
          | Pcf_initializer a ->
              let a = self#expression ctx a in
              ((Pcf_initializer (Stdlib.fst a)),
                (self#constr ctx "Pcf_initializer" [Stdlib.snd a]))
          | Pcf_attribute a ->
              let a = self#attribute ctx a in
              ((Pcf_attribute (Stdlib.fst a)),
                (self#constr ctx "Pcf_attribute" [Stdlib.snd a]))
          | Pcf_extension a ->
              let a = self#extension ctx a in
              ((Pcf_extension (Stdlib.fst a)),
                (self#constr ctx "Pcf_extension" [Stdlib.snd a]))
    method class_field_kind :
      'ctx -> class_field_kind -> (class_field_kind * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Cfk_virtual a ->
              let a = self#core_type ctx a in
              ((Cfk_virtual (Stdlib.fst a)),
                (self#constr ctx "Cfk_virtual" [Stdlib.snd a]))
          | Cfk_concrete (a, b) ->
              let a = self#override_flag ctx a in
              let b = self#expression ctx b in
              ((Cfk_concrete ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Cfk_concrete" [Stdlib.snd a; Stdlib.snd b]))
    method class_declaration :
      'ctx -> class_declaration -> (class_declaration * 'res)=
      self#class_infos self#class_expr
    method module_type : 'ctx -> module_type -> (module_type * 'res)=
      fun ctx ->
        fun { pmty_desc; pmty_loc; pmty_attributes } ->
          let pmty_desc = self#module_type_desc ctx pmty_desc in
          let pmty_loc = self#location ctx pmty_loc in
          let pmty_attributes = self#attributes ctx pmty_attributes in
          ({
             pmty_desc = (Stdlib.fst pmty_desc);
             pmty_loc = (Stdlib.fst pmty_loc);
             pmty_attributes = (Stdlib.fst pmty_attributes)
           },
            (self#record ctx
               [("pmty_desc", (Stdlib.snd pmty_desc));
               ("pmty_loc", (Stdlib.snd pmty_loc));
               ("pmty_attributes", (Stdlib.snd pmty_attributes))]))
    method module_type_desc :
      'ctx -> module_type_desc -> (module_type_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pmty_ident a ->
              let a = self#longident_loc ctx a in
              ((Pmty_ident (Stdlib.fst a)),
                (self#constr ctx "Pmty_ident" [Stdlib.snd a]))
          | Pmty_signature a ->
              let a = self#signature ctx a in
              ((Pmty_signature (Stdlib.fst a)),
                (self#constr ctx "Pmty_signature" [Stdlib.snd a]))
          | Pmty_functor (a, b) ->
              let a = self#functor_parameter ctx a in
              let b = self#module_type ctx b in
              ((Pmty_functor ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pmty_functor" [Stdlib.snd a; Stdlib.snd b]))
          | Pmty_with (a, b) ->
              let a = self#module_type ctx a in
              let b = self#list self#with_constraint ctx b in
              ((Pmty_with ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pmty_with" [Stdlib.snd a; Stdlib.snd b]))
          | Pmty_typeof a ->
              let a = self#module_expr ctx a in
              ((Pmty_typeof (Stdlib.fst a)),
                (self#constr ctx "Pmty_typeof" [Stdlib.snd a]))
          | Pmty_extension a ->
              let a = self#extension ctx a in
              ((Pmty_extension (Stdlib.fst a)),
                (self#constr ctx "Pmty_extension" [Stdlib.snd a]))
          | Pmty_alias a ->
              let a = self#longident_loc ctx a in
              ((Pmty_alias (Stdlib.fst a)),
                (self#constr ctx "Pmty_alias" [Stdlib.snd a]))
    method functor_parameter :
      'ctx -> functor_parameter -> (functor_parameter * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Unit -> (Unit, (self#constr ctx "Unit" []))
          | Named (a, b) ->
              let a = self#loc (self#option self#string) ctx a in
              let b = self#module_type ctx b in
              ((Named ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Named" [Stdlib.snd a; Stdlib.snd b]))
    method signature : 'ctx -> signature -> (signature * 'res)=
      self#list self#signature_item
    method signature_item :
      'ctx -> signature_item -> (signature_item * 'res)=
      fun ctx ->
        fun { psig_desc; psig_loc } ->
          let psig_desc = self#signature_item_desc ctx psig_desc in
          let psig_loc = self#location ctx psig_loc in
          ({
             psig_desc = (Stdlib.fst psig_desc);
             psig_loc = (Stdlib.fst psig_loc)
           },
            (self#record ctx
               [("psig_desc", (Stdlib.snd psig_desc));
               ("psig_loc", (Stdlib.snd psig_loc))]))
    method signature_item_desc :
      'ctx -> signature_item_desc -> (signature_item_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Psig_value a ->
              let a = self#value_description ctx a in
              ((Psig_value (Stdlib.fst a)),
                (self#constr ctx "Psig_value" [Stdlib.snd a]))
          | Psig_type (a, b) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#type_declaration ctx b in
              ((Psig_type ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Psig_type" [Stdlib.snd a; Stdlib.snd b]))
          | Psig_typesubst a ->
              let a = self#list self#type_declaration ctx a in
              ((Psig_typesubst (Stdlib.fst a)),
                (self#constr ctx "Psig_typesubst" [Stdlib.snd a]))
          | Psig_typext a ->
              let a = self#type_extension ctx a in
              ((Psig_typext (Stdlib.fst a)),
                (self#constr ctx "Psig_typext" [Stdlib.snd a]))
          | Psig_exception a ->
              let a = self#type_exception ctx a in
              ((Psig_exception (Stdlib.fst a)),
                (self#constr ctx "Psig_exception" [Stdlib.snd a]))
          | Psig_module a ->
              let a = self#module_declaration ctx a in
              ((Psig_module (Stdlib.fst a)),
                (self#constr ctx "Psig_module" [Stdlib.snd a]))
          | Psig_modsubst a ->
              let a = self#module_substitution ctx a in
              ((Psig_modsubst (Stdlib.fst a)),
                (self#constr ctx "Psig_modsubst" [Stdlib.snd a]))
          | Psig_recmodule a ->
              let a = self#list self#module_declaration ctx a in
              ((Psig_recmodule (Stdlib.fst a)),
                (self#constr ctx "Psig_recmodule" [Stdlib.snd a]))
          | Psig_modtype a ->
              let a = self#module_type_declaration ctx a in
              ((Psig_modtype (Stdlib.fst a)),
                (self#constr ctx "Psig_modtype" [Stdlib.snd a]))
          | Psig_modtypesubst a ->
              let a = self#module_type_declaration ctx a in
              ((Psig_modtypesubst (Stdlib.fst a)),
                (self#constr ctx "Psig_modtypesubst" [Stdlib.snd a]))
          | Psig_open a ->
              let a = self#open_description ctx a in
              ((Psig_open (Stdlib.fst a)),
                (self#constr ctx "Psig_open" [Stdlib.snd a]))
          | Psig_include a ->
              let a = self#include_description ctx a in
              ((Psig_include (Stdlib.fst a)),
                (self#constr ctx "Psig_include" [Stdlib.snd a]))
          | Psig_class a ->
              let a = self#list self#class_description ctx a in
              ((Psig_class (Stdlib.fst a)),
                (self#constr ctx "Psig_class" [Stdlib.snd a]))
          | Psig_class_type a ->
              let a = self#list self#class_type_declaration ctx a in
              ((Psig_class_type (Stdlib.fst a)),
                (self#constr ctx "Psig_class_type" [Stdlib.snd a]))
          | Psig_attribute a ->
              let a = self#attribute ctx a in
              ((Psig_attribute (Stdlib.fst a)),
                (self#constr ctx "Psig_attribute" [Stdlib.snd a]))
          | Psig_extension (a, b) ->
              let a = self#extension ctx a in
              let b = self#attributes ctx b in
              ((Psig_extension ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Psig_extension"
                   [Stdlib.snd a; Stdlib.snd b]))
    method module_declaration :
      'ctx -> module_declaration -> (module_declaration * 'res)=
      fun ctx ->
        fun { pmd_name; pmd_type; pmd_attributes; pmd_loc } ->
          let pmd_name = self#loc (self#option self#string) ctx pmd_name in
          let pmd_type = self#module_type ctx pmd_type in
          let pmd_attributes = self#attributes ctx pmd_attributes in
          let pmd_loc = self#location ctx pmd_loc in
          ({
             pmd_name = (Stdlib.fst pmd_name);
             pmd_type = (Stdlib.fst pmd_type);
             pmd_attributes = (Stdlib.fst pmd_attributes);
             pmd_loc = (Stdlib.fst pmd_loc)
           },
            (self#record ctx
               [("pmd_name", (Stdlib.snd pmd_name));
               ("pmd_type", (Stdlib.snd pmd_type));
               ("pmd_attributes", (Stdlib.snd pmd_attributes));
               ("pmd_loc", (Stdlib.snd pmd_loc))]))
    method module_substitution :
      'ctx -> module_substitution -> (module_substitution * 'res)=
      fun ctx ->
        fun { pms_name; pms_manifest; pms_attributes; pms_loc } ->
          let pms_name = self#loc self#string ctx pms_name in
          let pms_manifest = self#longident_loc ctx pms_manifest in
          let pms_attributes = self#attributes ctx pms_attributes in
          let pms_loc = self#location ctx pms_loc in
          ({
             pms_name = (Stdlib.fst pms_name);
             pms_manifest = (Stdlib.fst pms_manifest);
             pms_attributes = (Stdlib.fst pms_attributes);
             pms_loc = (Stdlib.fst pms_loc)
           },
            (self#record ctx
               [("pms_name", (Stdlib.snd pms_name));
               ("pms_manifest", (Stdlib.snd pms_manifest));
               ("pms_attributes", (Stdlib.snd pms_attributes));
               ("pms_loc", (Stdlib.snd pms_loc))]))
    method module_type_declaration :
      'ctx -> module_type_declaration -> (module_type_declaration * 'res)=
      fun ctx ->
        fun { pmtd_name; pmtd_type; pmtd_attributes; pmtd_loc } ->
          let pmtd_name = self#loc self#string ctx pmtd_name in
          let pmtd_type = self#option self#module_type ctx pmtd_type in
          let pmtd_attributes = self#attributes ctx pmtd_attributes in
          let pmtd_loc = self#location ctx pmtd_loc in
          ({
             pmtd_name = (Stdlib.fst pmtd_name);
             pmtd_type = (Stdlib.fst pmtd_type);
             pmtd_attributes = (Stdlib.fst pmtd_attributes);
             pmtd_loc = (Stdlib.fst pmtd_loc)
           },
            (self#record ctx
               [("pmtd_name", (Stdlib.snd pmtd_name));
               ("pmtd_type", (Stdlib.snd pmtd_type));
               ("pmtd_attributes", (Stdlib.snd pmtd_attributes));
               ("pmtd_loc", (Stdlib.snd pmtd_loc))]))
    method open_infos :
      'a .
        ('ctx -> 'a -> ('a * 'res)) ->
          'ctx -> 'a open_infos -> ('a open_infos * 'res)=
      fun _a ->
        fun ctx ->
          fun { popen_expr; popen_override; popen_loc; popen_attributes } ->
            let popen_expr = _a ctx popen_expr in
            let popen_override = self#override_flag ctx popen_override in
            let popen_loc = self#location ctx popen_loc in
            let popen_attributes = self#attributes ctx popen_attributes in
            ({
               popen_expr = (Stdlib.fst popen_expr);
               popen_override = (Stdlib.fst popen_override);
               popen_loc = (Stdlib.fst popen_loc);
               popen_attributes = (Stdlib.fst popen_attributes)
             },
              (self#record ctx
                 [("popen_expr", (Stdlib.snd popen_expr));
                 ("popen_override", (Stdlib.snd popen_override));
                 ("popen_loc", (Stdlib.snd popen_loc));
                 ("popen_attributes", (Stdlib.snd popen_attributes))]))
    method open_description :
      'ctx -> open_description -> (open_description * 'res)=
      self#open_infos self#longident_loc
    method open_declaration :
      'ctx -> open_declaration -> (open_declaration * 'res)=
      self#open_infos self#module_expr
    method include_infos :
      'a .
        ('ctx -> 'a -> ('a * 'res)) ->
          'ctx -> 'a include_infos -> ('a include_infos * 'res)=
      fun _a ->
        fun ctx ->
          fun { pincl_mod; pincl_loc; pincl_attributes } ->
            let pincl_mod = _a ctx pincl_mod in
            let pincl_loc = self#location ctx pincl_loc in
            let pincl_attributes = self#attributes ctx pincl_attributes in
            ({
               pincl_mod = (Stdlib.fst pincl_mod);
               pincl_loc = (Stdlib.fst pincl_loc);
               pincl_attributes = (Stdlib.fst pincl_attributes)
             },
              (self#record ctx
                 [("pincl_mod", (Stdlib.snd pincl_mod));
                 ("pincl_loc", (Stdlib.snd pincl_loc));
                 ("pincl_attributes", (Stdlib.snd pincl_attributes))]))
    method include_description :
      'ctx -> include_description -> (include_description * 'res)=
      self#include_infos self#module_type
    method include_declaration :
      'ctx -> include_declaration -> (include_declaration * 'res)=
      self#include_infos self#module_expr
    method with_constraint :
      'ctx -> with_constraint -> (with_constraint * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pwith_type (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#type_declaration ctx b in
              ((Pwith_type ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pwith_type" [Stdlib.snd a; Stdlib.snd b]))
          | Pwith_module (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#longident_loc ctx b in
              ((Pwith_module ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pwith_module" [Stdlib.snd a; Stdlib.snd b]))
          | Pwith_modtype (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#module_type ctx b in
              ((Pwith_modtype ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pwith_modtype" [Stdlib.snd a; Stdlib.snd b]))
          | Pwith_modtypesubst (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#module_type ctx b in
              ((Pwith_modtypesubst ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pwith_modtypesubst"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pwith_typesubst (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#type_declaration ctx b in
              ((Pwith_typesubst ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pwith_typesubst"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pwith_modsubst (a, b) ->
              let a = self#longident_loc ctx a in
              let b = self#longident_loc ctx b in
              ((Pwith_modsubst ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pwith_modsubst"
                   [Stdlib.snd a; Stdlib.snd b]))
    method module_expr : 'ctx -> module_expr -> (module_expr * 'res)=
      fun ctx ->
        fun { pmod_desc; pmod_loc; pmod_attributes } ->
          let pmod_desc = self#module_expr_desc ctx pmod_desc in
          let pmod_loc = self#location ctx pmod_loc in
          let pmod_attributes = self#attributes ctx pmod_attributes in
          ({
             pmod_desc = (Stdlib.fst pmod_desc);
             pmod_loc = (Stdlib.fst pmod_loc);
             pmod_attributes = (Stdlib.fst pmod_attributes)
           },
            (self#record ctx
               [("pmod_desc", (Stdlib.snd pmod_desc));
               ("pmod_loc", (Stdlib.snd pmod_loc));
               ("pmod_attributes", (Stdlib.snd pmod_attributes))]))
    method module_expr_desc :
      'ctx -> module_expr_desc -> (module_expr_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pmod_ident a ->
              let a = self#longident_loc ctx a in
              ((Pmod_ident (Stdlib.fst a)),
                (self#constr ctx "Pmod_ident" [Stdlib.snd a]))
          | Pmod_structure a ->
              let a = self#structure ctx a in
              ((Pmod_structure (Stdlib.fst a)),
                (self#constr ctx "Pmod_structure" [Stdlib.snd a]))
          | Pmod_functor (a, b) ->
              let a = self#functor_parameter ctx a in
              let b = self#module_expr ctx b in
              ((Pmod_functor ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pmod_functor" [Stdlib.snd a; Stdlib.snd b]))
          | Pmod_apply (a, b) ->
              let a = self#module_expr ctx a in
              let b = self#module_expr ctx b in
              ((Pmod_apply ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pmod_apply" [Stdlib.snd a; Stdlib.snd b]))
          | Pmod_constraint (a, b) ->
              let a = self#module_expr ctx a in
              let b = self#module_type ctx b in
              ((Pmod_constraint ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pmod_constraint"
                   [Stdlib.snd a; Stdlib.snd b]))
          | Pmod_unpack a ->
              let a = self#expression ctx a in
              ((Pmod_unpack (Stdlib.fst a)),
                (self#constr ctx "Pmod_unpack" [Stdlib.snd a]))
          | Pmod_extension a ->
              let a = self#extension ctx a in
              ((Pmod_extension (Stdlib.fst a)),
                (self#constr ctx "Pmod_extension" [Stdlib.snd a]))
    method structure : 'ctx -> structure -> (structure * 'res)=
      self#list self#structure_item
    method structure_item :
      'ctx -> structure_item -> (structure_item * 'res)=
      fun ctx ->
        fun { pstr_desc; pstr_loc } ->
          let pstr_desc = self#structure_item_desc ctx pstr_desc in
          let pstr_loc = self#location ctx pstr_loc in
          ({
             pstr_desc = (Stdlib.fst pstr_desc);
             pstr_loc = (Stdlib.fst pstr_loc)
           },
            (self#record ctx
               [("pstr_desc", (Stdlib.snd pstr_desc));
               ("pstr_loc", (Stdlib.snd pstr_loc))]))
    method structure_item_desc :
      'ctx -> structure_item_desc -> (structure_item_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pstr_eval (a, b) ->
              let a = self#expression ctx a in
              let b = self#attributes ctx b in
              ((Pstr_eval ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pstr_eval" [Stdlib.snd a; Stdlib.snd b]))
          | Pstr_value (a, b) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#value_binding ctx b in
              ((Pstr_value ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pstr_value" [Stdlib.snd a; Stdlib.snd b]))
          | Pstr_primitive a ->
              let a = self#value_description ctx a in
              ((Pstr_primitive (Stdlib.fst a)),
                (self#constr ctx "Pstr_primitive" [Stdlib.snd a]))
          | Pstr_type (a, b) ->
              let a = self#rec_flag ctx a in
              let b = self#list self#type_declaration ctx b in
              ((Pstr_type ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pstr_type" [Stdlib.snd a; Stdlib.snd b]))
          | Pstr_typext a ->
              let a = self#type_extension ctx a in
              ((Pstr_typext (Stdlib.fst a)),
                (self#constr ctx "Pstr_typext" [Stdlib.snd a]))
          | Pstr_exception a ->
              let a = self#type_exception ctx a in
              ((Pstr_exception (Stdlib.fst a)),
                (self#constr ctx "Pstr_exception" [Stdlib.snd a]))
          | Pstr_module a ->
              let a = self#module_binding ctx a in
              ((Pstr_module (Stdlib.fst a)),
                (self#constr ctx "Pstr_module" [Stdlib.snd a]))
          | Pstr_recmodule a ->
              let a = self#list self#module_binding ctx a in
              ((Pstr_recmodule (Stdlib.fst a)),
                (self#constr ctx "Pstr_recmodule" [Stdlib.snd a]))
          | Pstr_modtype a ->
              let a = self#module_type_declaration ctx a in
              ((Pstr_modtype (Stdlib.fst a)),
                (self#constr ctx "Pstr_modtype" [Stdlib.snd a]))
          | Pstr_open a ->
              let a = self#open_declaration ctx a in
              ((Pstr_open (Stdlib.fst a)),
                (self#constr ctx "Pstr_open" [Stdlib.snd a]))
          | Pstr_class a ->
              let a = self#list self#class_declaration ctx a in
              ((Pstr_class (Stdlib.fst a)),
                (self#constr ctx "Pstr_class" [Stdlib.snd a]))
          | Pstr_class_type a ->
              let a = self#list self#class_type_declaration ctx a in
              ((Pstr_class_type (Stdlib.fst a)),
                (self#constr ctx "Pstr_class_type" [Stdlib.snd a]))
          | Pstr_include a ->
              let a = self#include_declaration ctx a in
              ((Pstr_include (Stdlib.fst a)),
                (self#constr ctx "Pstr_include" [Stdlib.snd a]))
          | Pstr_attribute a ->
              let a = self#attribute ctx a in
              ((Pstr_attribute (Stdlib.fst a)),
                (self#constr ctx "Pstr_attribute" [Stdlib.snd a]))
          | Pstr_extension (a, b) ->
              let a = self#extension ctx a in
              let b = self#attributes ctx b in
              ((Pstr_extension ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pstr_extension"
                   [Stdlib.snd a; Stdlib.snd b]))
    method value_binding : 'ctx -> value_binding -> (value_binding * 'res)=
      fun ctx ->
        fun { pvb_pat; pvb_expr; pvb_attributes; pvb_loc } ->
          let pvb_pat = self#pattern ctx pvb_pat in
          let pvb_expr = self#expression ctx pvb_expr in
          let pvb_attributes = self#attributes ctx pvb_attributes in
          let pvb_loc = self#location ctx pvb_loc in
          ({
             pvb_pat = (Stdlib.fst pvb_pat);
             pvb_expr = (Stdlib.fst pvb_expr);
             pvb_attributes = (Stdlib.fst pvb_attributes);
             pvb_loc = (Stdlib.fst pvb_loc)
           },
            (self#record ctx
               [("pvb_pat", (Stdlib.snd pvb_pat));
               ("pvb_expr", (Stdlib.snd pvb_expr));
               ("pvb_attributes", (Stdlib.snd pvb_attributes));
               ("pvb_loc", (Stdlib.snd pvb_loc))]))
    method module_binding :
      'ctx -> module_binding -> (module_binding * 'res)=
      fun ctx ->
        fun { pmb_name; pmb_expr; pmb_attributes; pmb_loc } ->
          let pmb_name = self#loc (self#option self#string) ctx pmb_name in
          let pmb_expr = self#module_expr ctx pmb_expr in
          let pmb_attributes = self#attributes ctx pmb_attributes in
          let pmb_loc = self#location ctx pmb_loc in
          ({
             pmb_name = (Stdlib.fst pmb_name);
             pmb_expr = (Stdlib.fst pmb_expr);
             pmb_attributes = (Stdlib.fst pmb_attributes);
             pmb_loc = (Stdlib.fst pmb_loc)
           },
            (self#record ctx
               [("pmb_name", (Stdlib.snd pmb_name));
               ("pmb_expr", (Stdlib.snd pmb_expr));
               ("pmb_attributes", (Stdlib.snd pmb_attributes));
               ("pmb_loc", (Stdlib.snd pmb_loc))]))
    method toplevel_phrase :
      'ctx -> toplevel_phrase -> (toplevel_phrase * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Ptop_def a ->
              let a = self#structure ctx a in
              ((Ptop_def (Stdlib.fst a)),
                (self#constr ctx "Ptop_def" [Stdlib.snd a]))
          | Ptop_dir a ->
              let a = self#toplevel_directive ctx a in
              ((Ptop_dir (Stdlib.fst a)),
                (self#constr ctx "Ptop_dir" [Stdlib.snd a]))
    method toplevel_directive :
      'ctx -> toplevel_directive -> (toplevel_directive * 'res)=
      fun ctx ->
        fun { pdir_name; pdir_arg; pdir_loc } ->
          let pdir_name = self#loc self#string ctx pdir_name in
          let pdir_arg = self#option self#directive_argument ctx pdir_arg in
          let pdir_loc = self#location ctx pdir_loc in
          ({
             pdir_name = (Stdlib.fst pdir_name);
             pdir_arg = (Stdlib.fst pdir_arg);
             pdir_loc = (Stdlib.fst pdir_loc)
           },
            (self#record ctx
               [("pdir_name", (Stdlib.snd pdir_name));
               ("pdir_arg", (Stdlib.snd pdir_arg));
               ("pdir_loc", (Stdlib.snd pdir_loc))]))
    method directive_argument :
      'ctx -> directive_argument -> (directive_argument * 'res)=
      fun ctx ->
        fun { pdira_desc; pdira_loc } ->
          let pdira_desc = self#directive_argument_desc ctx pdira_desc in
          let pdira_loc = self#location ctx pdira_loc in
          ({
             pdira_desc = (Stdlib.fst pdira_desc);
             pdira_loc = (Stdlib.fst pdira_loc)
           },
            (self#record ctx
               [("pdira_desc", (Stdlib.snd pdira_desc));
               ("pdira_loc", (Stdlib.snd pdira_loc))]))
    method directive_argument_desc :
      'ctx -> directive_argument_desc -> (directive_argument_desc * 'res)=
      fun ctx ->
        fun x ->
          match x with
          | Pdir_string a ->
              let a = self#string ctx a in
              ((Pdir_string (Stdlib.fst a)),
                (self#constr ctx "Pdir_string" [Stdlib.snd a]))
          | Pdir_int (a, b) ->
              let a = self#string ctx a in
              let b = self#option self#char ctx b in
              ((Pdir_int ((Stdlib.fst a), (Stdlib.fst b))),
                (self#constr ctx "Pdir_int" [Stdlib.snd a; Stdlib.snd b]))
          | Pdir_ident a ->
              let a = self#longident ctx a in
              ((Pdir_ident (Stdlib.fst a)),
                (self#constr ctx "Pdir_ident" [Stdlib.snd a]))
          | Pdir_bool a ->
              let a = self#bool ctx a in
              ((Pdir_bool (Stdlib.fst a)),
                (self#constr ctx "Pdir_bool" [Stdlib.snd a]))
    method cases : 'ctx -> cases -> (cases * 'res)= self#list self#case
  end
[@@@end ]
[@@@end ]
